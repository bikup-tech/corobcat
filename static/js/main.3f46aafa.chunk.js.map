{"version":3,"sources":["redux/actions/actionTypes.ts","redux/reducers/index.ts","redux/reducers/authReducer.ts","redux/reducers/mainReducer.ts","redux/store/configureStore.ts","redux/store/initialState.ts","pages/EmployeesListPage/EmployeeCard/EmployeeCard.tsx","pages/EmployeesListPage/components/EmployeesListPage/EmployeesListPage.tsx","pages/EmployeesListPage/EmployeesListPageContainer.tsx","pages/EmployeesListPage/queries/useLoadEmployeesQuery.ts","components/MUITable/EnhancedTableHead/EnhancedTableHead.tsx","pages/MachinePage/components/FinishTaskButton/FinishTaskButton.tsx","utils/populateTasks.ts","mocks/tasksRepository.ts","redux/actions/mainActions.ts","pages/MachinePage/hooks/useFinishTaskDialog.tsx","styles/styleConstants.ts","components/MUITable/SCMuiTable.ts","components/MUITable/setTableRowBackgroundColorByPriority.ts","components/MUITable/EnhancedTasksTable/EnhancedTasksTable.tsx","utils/calculateTotalTime.ts","utils/sortTasksByPriority.ts","routes/routes.ts","StyledComponents/StyledTableHeader.ts","pages/MachinePage/components/MachineInfoHeader/MachineInfoHeader.tsx","pages/MachinePage/MachinePage.tsx","mocks/machineRepository.ts","pages/MachinePage/MachinePageContainer.tsx","pages/MachinePage/queries/useLoadMachineTasksQuery.ts","mocks/userRepository.ts","utils/formatDate.ts","components/TaskStatus/TaskStatus.tsx","components/MUITable/EnhancedEmployeeTable/EnhancedEmployeeTable.tsx","constants/machineNames.ts","utils/calculateMachineGeneralValues.ts","components/TableHeaderInfoCard/TableHeaderInfoCard.tsx","components/UserInfoHeader/UserInfoHeader.tsx","pages/EmployeePage/EmployeePage.tsx","pages/EmployeePage/EmployeePageContainer.tsx","pages/EmployeePage/queries/useLoadEmployeeTasksQuery.ts","components/MUITable/EnhancedFinishedTasksTable/EnhancedFinishedTasksTable.tsx","pages/FinishedTasksPage/components/FinishedTasksInfoHeader.tsx","pages/FinishedTasksPage/FinishedTasksPage.tsx","pages/FinishedTasksPage/FinishedTasksPageContainer.tsx","pages/FinishedTasksPage/queries/useLoadFinishedTasksQuery.ts","constants/errorMessages.ts","redux/actions/authActions.ts","pages/LoginPage/LoginPage.tsx","components/LeftMenu/LeftMenu.tsx","components/Layout/Layout.tsx","components/ProtectedRoute/ProtectedRoute.tsx","components/MUITable/LiteTasksTable/LiteTasksTable.tsx","pages/MachinesHomePage/SCMachinesHomePage.ts","pages/MachinesHomePage/MachinesHomePage.tsx","pages/MachinesHomePage/MachinesHomePageContainer.tsx","pages/MachinesHomePage/queries/useMachinesHomeQuery.ts","components/FormikComponents/FormikTextField.tsx","utils/getColorByPriority.ts","components/CreateTaskDialog/components/PriorityBadge/PriorityBadge.tsx","components/FormikComponents/FormikSelect.tsx","components/CreateTaskDialog/CreateTaskDialog.tsx","components/CreateTaskDialog/CreateTaskDialogContainer.tsx","components/StandardLoading/StandardLoading.tsx","pages/AdminProfilePage/components/GeneralSettingsTab.tsx","pages/AdminProfilePage/components/EmployeesTab.tsx","pages/AdminProfilePage/components/TabPanel.tsx","pages/AdminProfilePage/AdminProfilePage.tsx","pages/AdminProfilePage/AdminProfilePageContainer.tsx","pages/AdminProfilePage/queries/useAdminProfilePageQuery.ts","components/SuperProtectedRoute/SuperProtectedRoute.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FORCE_RENDER","LOGIN_LOADING","LOGIN_SUCCESS","LOGIN_ERROR","LOGOUT","SET_CREATE_TASK_MODAL_ISOPEN","SET_CREATE_TASK_MODAL_SELECTED_MACHINE","combineReducers","authReducer","state","action","newState","type","loginLoading","loginError","payload","errorMessage","user","mainReducer","forceRender","createTaskModal","isOpen","selectedMachine","configureStore","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","thunk","JSON","parse","localStorage","getItem","EmployeeCard","props","employee","Card","className","CardContent","Typography","color","gutterBottom","employerCode","variant","component","name","CardActions","to","_id","StyledEmployeePageContainer","styled","div","StyledLoadingWrapper","EmployeesListPage","employees","isLoading","isError","CircularProgress","map","EmployeesListPageContainer","useQuery","a","data","users","EnhancedTasksTableHead","headCells","TableHead","TableRow","headCell","TableCell","align","padding","label","id","FinishTaskButton","taskId","openFinishedTaskDialog","programNumber","Button","disableElevation","onClick","populateTasks","tasks","task","find","machine","machines","jsonTasks","getTaskByMachineId","machineId","filter","status","getTaskByUserId","userId","setIsCreateTaskModalOpen","setCreateTaskModalSelectedMachine","console","log","isAcceptButtonActive","useFinishTaskDialog","dispatch","useDispatch","useState","isFinishTaskDialogOpen","setIsFinishTaskDialogOpen","finishTaskDialogState","setFinishTaskDialogState","handleFinishTaskDialogClose","FinishTaskDialog","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","Grid","container","item","xs","TextField","placeholder","fullWidth","sx","marginTop","onChange","target","hasValue","value","prevState","DialogActions","taskIndex","findIndex","saveFinishedTask","autoFocus","disabled","handleFinishTaskDialogOpen","maxTableHeight","StyledTablePageContainer","StyledTableWrapper","setTableRowBackgroundColorByPriority","priority","bgColor","backgroundColor","EnhancedTaksTable","page","setPage","rowsPerPage","setRowsPerPage","Box","width","TableContainer","Paper","maxHeight","Table","minWidth","size","stickyHeader","TableBody","colSpan","index","border","style","scope","taskNumber","material","thickness","duration","TablePagination","rowsPerPageOptions","count","length","onPageChange","event","newPage","onRowsPerPageChange","parseInt","calculateTotalTime","reduce","accumulator","current","sortTasksByPriority","sort","b","undefined","ROUTE_MACHINES","ROUTE_MACHINES_NAME_FACTORY","machineName","ROUTE_EMPLOYEES","ROUTE_FINISHEDTASKS","ROUTE_ADMIN_PROFILE","StyledTableHeaderWrapper","StyledTableHeaderInfoWrapper","StyledFlexGrow","StyledTableHeaderName","p","StyledTableHeaderInfo","MachineInfoHeader","activeOrders","timeToFinish","history","useHistory","IconButton","push","MachinePage","getMachineByName","MachinePageContainer","useSelector","useParams","refetchInterval","useLoadMachineTasksQuery","handleTaskClick","getUserById","getUserByCode","userCode","formatDate","date","dayjs","format","StyledTaskStatusContainer","StyledTaskText","span","statusText","statusTextColor","iconColor","statusBgColor","TaskStatus","background","marginRight","EnhnacedEmployeeTasksTable","React","end","start","MACHINE_1","MACHINE_2","calculateMachineGeneralValues","machine1Tasks","machine2Tasks","machine1TimeToFinish","machine2TimeToFinish","machine1","activeTasks","machine2","StyledTableHeaderInfoCardContainer","StyledInfoCardSeparator","StyledImportantCell","StyledValue","StyledTotalValue","TableHeaderInfoCard","totalTasks","totalTimeToFinish","alignItems","StyledInfoWrapper","UserInfoHeader","tasksData","goBack","EmployeePage","EmployeePageContainer","employeeId","employeeTasks","useLoadEmployeeTasksQuery","EnhancedFinishedTasksTable","FinishedTasksInfoHeader","FinishedTasksPage","FinishedTasksPageContainer","ERROR_MESSAGE_INVALID_CREDENTIALS","LoginPage","valueRef","useRef","warningMessage","setWarningMessage","handleLogInClick","setItem","stringify","response","message","useEffect","replace","elevation","Avatar","required","inputRef","onKeyUp","key","LeftMenu","List","ListItem","disableGutters","activeClassName","ListItemButton","ListItemIcon","ListItemText","primary","disablePadding","pl","removeItem","Layout","children","ProtectedRoute","path","Compo","exact","rest","render","StyledMachinesHomePageWrapper","StyledMachinesHomePageLoadingWrapper","MachinesHomePage","handleNewTaskClick","MachinesHomePageContainer","useMachinesHomeQuery","StyledFormikTextFieldWrapper","FormikTextField","formikContext","useFormikContext","margin","autofocus","adornment","min","max","setFieldValue","values","helperText","touched","errors","error","InputProps","inputProps","endAdornment","InputAdornment","position","getColorByPriority","StyledPriorityBadgeWrapper","StyledPriorityBadge","StyledPriorityText","formatTextByPriority","text","PriorityBadge","StyledFormikSelectWrapper","FormikSelect","selectValues","toLowerCase","FormControl","InputLabel","Select","labelId","defaultValue","MenuItem","FormHelperText","StyledCreateTaskDialogWrapper","StyledFlexCenteredWrapper","materialsMock","machinesMock","CreateTaskDialog","handleClose","resetForm","noValidate","textAlign","spacing","CreateTaksDialogContainer","initialValues","correctionalFactor","validationSchema","Yup","integer","onSubmit","StyledLoadingText","StandardLoading","StyledTabContainer","motion","attrs","initial","opacity","animate","StyledTabTitle","GeneralSettingsTab","EmployeesTab","TabPanel","role","hidden","height","flex","StyledAdminProfileHeader","AdminProfilePage","correctionalFactors","setValue","a11yProps","bgcolor","boxSizing","AppBar","Tabs","newValue","indicatorColor","textColor","Tab","AnimatePresence","AdminProfilePageContainer","SuperProtectedRoute","queryClient","QueryClient","App","store","QueryClientProvider","client","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f46aafa.chunk.js","sourcesContent":["export const FORCE_RENDER = \"FORCE_RENDER\";\n// LOGIN\nexport const LOGIN_LOADING = \"LOGIN_LOADING\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_ERROR = \"LOGIN_ERROR\";\nexport const LOGOUT = \"LOGOUT\";\n\n// Create task modal\nexport const SET_CREATE_TASK_MODAL_ISOPEN = \"SET_CREATE_TASK_MODAL_ISOPEN\";\nexport const SET_CREATE_TASK_MODAL_SELECTED_MACHINE =\n  \"SET_CREATE_TASK_MODAL_SELECTED_MACHINE\";\n","import { combineReducers } from \"redux\";\nimport mainReducer from \"./mainReducer\";\nimport authReducer from \"./authReducer\";\n\nexport default combineReducers({\n  authReducer,\n  mainReducer,\n});\n","import {\n  LOGIN_ERROR,\n  LOGIN_LOADING,\n  LOGIN_SUCCESS,\n  LOGOUT,\n} from \"../actions/actionTypes\";\n\nimport { TAction } from \"../../types/storeActionType\";\nimport { TAuthActions } from \"../actions/authActions\";\n\nexport default function authReducer(state: any = {}, action: TAuthActions) {\n  let newState = {};\n  switch (action.type) {\n    case LOGIN_LOADING:\n      newState = { ...state, loginLoading: true };\n      break;\n    case LOGIN_ERROR:\n      newState = {\n        ...state,\n        loginLoading: false,\n        loginError: action.payload.errorMessage,\n      };\n      break;\n    case LOGIN_SUCCESS:\n      newState = {\n        ...state,\n        loginLoading: false,\n        loginError: null,\n        user: action.payload.user,\n      };\n      break;\n\n    case LOGOUT:\n      newState = {\n        ...state,\n        user: null,\n      };\n      break;\n\n    default:\n      newState = state;\n      break;\n  }\n  return newState;\n}\n","import {\n  FORCE_RENDER,\n  SET_CREATE_TASK_MODAL_ISOPEN,\n  SET_CREATE_TASK_MODAL_SELECTED_MACHINE,\n} from \"../actions/actionTypes\";\n\nimport { TAction } from \"../../types/storeActionType\";\n\nexport default function mainReducer(state: any = {}, action: TAction) {\n  let newState = {};\n  switch (action.type) {\n    case FORCE_RENDER:\n      newState = { ...state, forceRender: ++state.forceRender };\n      break;\n\n    // Create task modal\n    case SET_CREATE_TASK_MODAL_ISOPEN: {\n      newState = {\n        ...state,\n        createTaskModal: { ...state.createTaskModal, isOpen: action.payload },\n      };\n      break;\n    }\n    case SET_CREATE_TASK_MODAL_SELECTED_MACHINE: {\n      newState = {\n        ...state,\n        createTaskModal: {\n          ...state.createTaskModal,\n          selectedMachine: action.payload,\n        },\n      };\n      break;\n    }\n\n    default:\n      newState = state;\n      break;\n  }\n\n  return newState;\n}\n","import { applyMiddleware, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\nimport { TInitialState } from \"./initialState\";\n\nexport default function configureStore(initialState: TInitialState) {\n  const composeEnhancers =\n    (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\n  return createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunk))\n  );\n}\n","import { TUserResponse } from \"../../types/employeeTypes\";\n\nexport type TMainReducer = {\n  forceRender: number;\n  createTaskModal: {\n    isOpen: boolean;\n    selectedMachine: string;\n  };\n};\n\nexport type TAuthReducer = {\n  user: TUserResponse | null;\n  loginLoading?: boolean;\n  loginError?: string;\n};\n\nexport type TInitialState = {\n  mainReducer: TMainReducer;\n  authReducer: TAuthReducer;\n};\n\nexport const initialState: TInitialState = {\n  mainReducer: {\n    forceRender: 0,\n    createTaskModal: {\n      isOpen: false,\n      selectedMachine: \"máquina1\",\n    },\n  },\n  authReducer: {\n    user: JSON.parse(localStorage.getItem(\"user\") as string) || null,\n  },\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// styles\nimport \"./EmployeeCard.scss\";\n\n// types\nimport { TUserResponse } from \"../../../types/employeeTypes\";\n\n// components\nimport { Card, CardActions, CardContent, Typography } from \"@mui/material\";\n\ninterface IEmployeeCardProps {\n  employee: TUserResponse;\n}\n\nfunction EmployeeCard(props: IEmployeeCardProps) {\n  const { employee } = props;\n  return (\n    <Card key={employee._id} className={`employee__card`}>\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          Cód. empleado: {employee.employerCode}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {employee.name}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Link to={`/employees/${employee._id}`} className=\"employee__link\">\n          Ver Empleado\n        </Link>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default EmployeeCard;\n","import styled from \"styled-components\";\n\nimport \"./EmployeesListPage.scss\";\n\n// types\nimport { TUserResponse } from \"../../../../types/employeeTypes\";\n\n// components\nimport EmployeeCard from \"../../EmployeeCard/EmployeeCard\";\nimport { CircularProgress } from \"@mui/material\";\n\nconst StyledEmployeePageContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n  width: 100%;\n`;\n\nconst StyledLoadingWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n\n  font-size: 1.75rem;\n`;\n\ninterface IEmployeesCardProps {\n  employees: TUserResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n}\n\nfunction EmployeesListPage(props: IEmployeesCardProps) {\n  const { employees, isLoading, isError } = props;\n  return (\n    <>\n      <div className=\"employees-title\">Lista de empleados</div>\n      <StyledEmployeePageContainer className=\"employees-container\">\n        {isLoading ? (\n          <StyledLoadingWrapper>\n            <CircularProgress />\n            Cargando Datos...\n          </StyledLoadingWrapper>\n        ) : isError ? (\n          <></>\n        ) : (\n          employees &&\n          employees.map((employee) => {\n            return <EmployeeCard key={employee._id} employee={employee} />;\n          })\n        )}\n      </StyledEmployeePageContainer>\n    </>\n  );\n}\nexport default EmployeesListPage;\n","// query\nimport useLoadEmployeesQuery from \"./queries/useLoadEmployeesQuery\";\n// components\nimport EmployeesListPage from \"./components/EmployeesListPage/EmployeesListPage\";\n\nfunction EmployeesListPageContainer() {\n  // getEmployers\n  const { isLoading, isError, data } = useLoadEmployeesQuery();\n\n  return (\n    <>\n      <EmployeesListPage employees={data} isLoading={isLoading} isError={isError} />\n    </>\n  );\n}\n\nexport default EmployeesListPageContainer;\n","import { useQuery } from \"react-query\";\nimport users from \"../../../mocks/users.json\";\n\nexport default function useLoadEmployeesQuery() {\n  return useQuery([\"loadEmployers\"], async () => {\n    // TODO const {data} = await axios.get('/api/users')\n    const data = users;\n\n    return data;\n  });\n}\n","import { TableCell, TableHead, TableRow } from \"@mui/material\";\nimport { THeadCell } from \"../MUITableTypes\";\n\ninterface IEnhancedTableHeadProps {\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedTasksTableHead(props: IEnhancedTableHeadProps) {\n  const { headCells } = props;\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell key={headCell.id} align=\"center\" padding=\"normal\">\n            {headCell.label}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n","import { Button } from \"@mui/material\";\n\ninterface IFinishTaskButtonProps {\n  taskId: string;\n  programNumber: string;\n  openFinishedTaskDialog: (programNumber: string) => void;\n}\n\nfunction FinishTaskButton(props: IFinishTaskButtonProps) {\n  const { taskId, programNumber, openFinishedTaskDialog } = props;\n\n  function handleClick() {\n    openFinishedTaskDialog(taskId);\n  }\n\n  return (\n    <>\n      <Button variant=\"contained\" disableElevation onClick={handleClick}>\n        Finalizar\n      </Button>\n    </>\n  );\n}\n\nexport default FinishTaskButton;\n","import { TTaskResponse } from \"../types/taskTypes\";\nimport users from \"../mocks/users.json\";\nimport machines from \"../mocks/machines.json\";\n\nexport default function populateTasks(tasks: TTaskResponse[]) {\n  return tasks.map((task: any) => {\n    const user = users.find((user) => user._id === task.user);\n    const machine = machines.find((machine) => machine._id === task.machine);\n\n    return { ...task, user, machine };\n  });\n}\n","import { TTaskResponse } from \"../types/taskTypes\";\nimport populateTasks from \"../utils/populateTasks\";\nimport jsonTasks from \"./tasks.json\";\n\nconst tasks: TTaskResponse[] = [...jsonTasks];\n\nexport function getTaskByMachineId(machineId: string): TTaskResponse[] {\n  const filteredTasks = tasks.filter(\n    (task: TTaskResponse) => task.machine === machineId && task.status === 0\n  );\n\n  const populatedTasks = populateTasks(filteredTasks);\n\n  return populatedTasks;\n}\n\nexport function getTaskByUserId(userId: string) {\n  const filteredTasks = tasks.filter((task) => task.user === userId);\n  const populatedTasks = populateTasks(filteredTasks);\n\n  return populatedTasks;\n}\n\nexport function getActiveTasks() {\n  const filteredTasks = tasks.filter(\n    (task: TTaskResponse) => task.status === 0\n  );\n  const populatedTasks = populateTasks(filteredTasks);\n\n  return populatedTasks;\n}\n\nexport function getFinishedTasks() {\n  const filteredTasks = tasks.filter(\n    (task: TTaskResponse) => task.status === 1\n  );\n  const populatedTasks = populateTasks(filteredTasks);\n\n  return populatedTasks;\n}\n\nexport function saveFinishedTask(taskId: string) {\n  const taskIndex = tasks.findIndex((task) => task._id === taskId);\n\n  if (taskIndex || taskIndex === 0) {\n    tasks[taskIndex].status = 1;\n  }\n}\n","import {\n  FORCE_RENDER,\n  SET_CREATE_TASK_MODAL_ISOPEN,\n  SET_CREATE_TASK_MODAL_SELECTED_MACHINE,\n} from \"./actionTypes\";\n\nexport function forceRender() {\n  return {\n    type: FORCE_RENDER,\n  };\n}\n\nexport function setIsCreateTaskModalOpen(isOpen: boolean) {\n  return {\n    type: SET_CREATE_TASK_MODAL_ISOPEN,\n    payload: isOpen,\n  };\n}\n\nexport function setCreateTaskModalSelectedMachine(machine: string) {\n  console.log(\"changing to machine\", machine);\n\n  return {\n    type: SET_CREATE_TASK_MODAL_SELECTED_MACHINE,\n    payload: machine,\n  };\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Grid,\n  TextField,\n} from \"@mui/material\";\n\nimport React, { useState } from \"react\";\nimport { saveFinishedTask } from \"../../../mocks/tasksRepository\";\nimport { useDispatch } from \"react-redux\";\nimport { forceRender } from \"../../../redux/actions/mainActions\";\n\nconst initialState = {\n  taskId: \"\",\n  isAcceptButtonActive: false,\n};\n\nexport default function useFinishTaskDialog() {\n  const dispatch = useDispatch();\n\n  const [isFinishTaskDialogOpen, setIsFinishTaskDialogOpen] = useState(false);\n\n  const [finishTaskDialogState, setFinishTaskDialogState] =\n    useState(initialState);\n\n  function handleFinishTaskDialogOpen(taskId: string) {\n    setIsFinishTaskDialogOpen(true);\n    setFinishTaskDialogState({\n      ...finishTaskDialogState,\n      taskId,\n      isAcceptButtonActive: false,\n    });\n  }\n\n  function handleFinishTaskDialogClose() {\n    setIsFinishTaskDialogOpen(false);\n  }\n\n  function handleEmployeeCodeChange({ target }: any) {\n    let hasValue = false;\n    if (target.value) {\n      hasValue = true;\n    }\n\n    setFinishTaskDialogState((prevState) => ({\n      ...prevState,\n      isAcceptButtonActive: hasValue,\n    }));\n  }\n\n  function handleAccept() {\n    // TODO: Dispatch de la action que comprova si existeix el employeeCode i l'asigna i finalitza.\n    saveFinishedTask(finishTaskDialogState.taskId);\n    setIsFinishTaskDialogOpen(false);\n    dispatch(forceRender());\n  }\n\n  const FinishTaskDialog = (\n    <Dialog\n      open={isFinishTaskDialogOpen}\n      onClose={handleFinishTaskDialogClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Confirmación finalizar programa\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n           Introduce tu código de empleado para finalizar el programa:\n        </DialogContentText>\n        <Grid container>\n          <Grid item xs={8}>\n            <TextField\n              variant=\"outlined\"\n              label=\"Cód. Empleado\"\n              placeholder=\"Código de empleado\"\n              fullWidth\n              sx={{ marginTop: \"1rem\" }}\n              onChange={handleEmployeeCodeChange}\n            />\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleFinishTaskDialogClose}>Cancelar</Button>\n        <Button\n          onClick={handleAccept}\n          autoFocus\n          variant=\"contained\"\n          disabled={finishTaskDialogState.isAcceptButtonActive ? false : true}\n        >\n          Finalizar programa\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n\n  return {\n    FinishTaskDialog,\n    handleFinishTaskDialogOpen,\n    handleFinishTaskDialogClose,\n  };\n}\n","export const maxWidth = 1200;\nexport const maxTableHeight = \"78vh\";\nexport const maxTableHeight_small = \"70vh\";\nexport const darkBackground = \"#303030\";\nexport const darkMenuBackground = \"#212121\";\nexport const darkCardBackground = \"#424242\";\n","import styled from \"styled-components\";\n\nimport { maxWidth } from \"../../styles/styleConstants\";\n\nexport const StyledTablePageContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nexport const StyledTableWrapper = styled.div`\n  width: 100%;\n  max-width: ${maxWidth}px;\n\n  .MuiTableCell-head {\n    color: #002740;\n    font-weight: 700;\n    background-color: #f5f5f5;\n    border-bottom: 2px solid rgba(150, 150, 150, 1);\n    line-height: 1.25;\n    font-size: 1.1rem;\n  }\n\n  .MuiTableCell-body {\n    border-bottom: 1px solid rgba(255, 255, 255, 1);\n    font-weight: 500;\n    font-size: 1.1rem;\n  }\n\n  .MuiTablePagination-root {\n    color: white;\n  }\n\n  .MuiSvgIcon-root {\n    color: white;\n  }\n`;\n\nexport const StyledLoadingWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n\n  font-size: 1.75rem;\n\n  .MuiCircularProgress-root {\n    margin-right: 1rem;\n  }\n`;\n","export function setTableRowBackgroundColorByPriority(priority: number) {\n  let bgColor = \"\";\n  if (priority > 0 && priority <= 2) {\n    bgColor = \"rgba(93, 172, 245, 0.5)\";\n  }\n  if (priority > 2 && priority <= 4) {\n    bgColor = \"rgba(1, 187, 63, 0.5)\";\n  }\n  if (priority > 4 && priority <= 8) {\n    bgColor = \"rgba(255, 163, 15, 0.5)\";\n  }\n  if (priority > 8 && priority <= 10) {\n    bgColor = \"rgba(246, 91, 92, 0.5)\";\n  }\n\n  return {\n    backgroundColor: bgColor,\n  };\n}\n","import {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport FinishTaskButton from \"../../../pages/MachinePage/components/FinishTaskButton/FinishTaskButton\";\nimport useFinishTaskDialog from \"../../../pages/MachinePage/hooks/useFinishTaskDialog\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTablePageContainer,\n  StyledTableWrapper,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\n\ninterface IEnhancedTableProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedTaksTable(props: IEnhancedTableProps) {\n  const { tasks, headCells, isLoading, isError } = props;\n\n  const {\n    FinishTaskDialog,\n    handleFinishTaskDialogOpen,\n    handleFinishTaskDialogClose,\n  } = useFinishTaskDialog();\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table\n              sx={{ minWidth: 750 }}\n              aria-labelledby=\"tableTitle\"\n              size=\"medium\"\n              stickyHeader\n            >\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={999}>\n                      <StyledLoadingWrapper>\n                        <CircularProgress />\n                        Cargando Datos...\n                      </StyledLoadingWrapper>\n                    </TableCell>\n                  </TableRow>\n                ) : isError ? (\n                  <></>\n                ) : (\n                  tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">{task.material}</TableCell>\n                        <TableCell align=\"center\">{task.thickness}</TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.user.employerCode}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <FinishTaskButton\n                            taskId={task._id}\n                            programNumber={task.programNumber}\n                            openFinishedTaskDialog={handleFinishTaskDialogOpen}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {!isLoading && tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n      {FinishTaskDialog}\n    </StyledTablePageContainer>\n  );\n}\n","import { TTaskResponse } from \"../types/taskTypes\";\n\nexport function calculateTotalTime(tasks: TTaskResponse[] | undefined) {\n  if (tasks) {\n    return tasks.reduce(\n      (accumulator, current) => accumulator + current.duration,\n      0\n    );\n  } else {\n    return 0;\n  }\n}\n","import { TTaskResponse } from \"../types/taskTypes\";\n\nexport function sortTasksByPriority(tasks: TTaskResponse[] | undefined) {\n  return tasks ? tasks.sort((a, b) => b.priority - a.priority) : undefined;\n}\n","export const ROUTE_LOGIN = \"/\";\n\nexport const ROUTE_MACHINES = \"/machines\";\nexport const ROUTE_MACHINES_NAME = \"/machines/:machineName\";\n\nexport const ROUTE_MACHINES_NAME_FACTORY = (machineName: string) =>\n  `/machines/${machineName}`;\n\nexport const ROUTE_EMPLOYEES = \"/employees\";\nexport const ROUTE_EMPLOYEES_ID = \"/employees/:employeeId\";\nexport const ROUTE_EMPLOYEES_ID_FACTORY = (employeeId: string) =>\n  `/employees/${employeeId}`;\n\nexport const ROUTE_FINISHEDTASKS = \"/finishedTasks\";\n\nexport const ROUTE_ADMIN_PROFILE = \"/admin\";\n","import styled from \"styled-components\";\nimport { maxWidth } from \"../styles/styleConstants\";\n\nexport const StyledTableHeaderWrapper = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  max-width: ${maxWidth}px;\n  width: 100%;\n  margin: auto;\n  margin-bottom: 0.5rem;\n  background-color: #f5f5f5;\n  border-radius: 0.25rem;\n  padding: 0.5rem;\n  font-weight: 700;\n`;\n\nexport const StyledTableHeaderInfoWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1;\n`;\n\nexport const StyledFlexGrow = styled.div`\n  flex: 1;\n`;\n","import React from \"react\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { Button, IconButton } from \"@mui/material\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport styled from \"styled-components\";\nimport { ROUTE_MACHINES } from \"../../../../routes/routes\";\nimport {\n  StyledFlexGrow,\n  StyledTableHeaderInfoWrapper,\n  StyledTableHeaderWrapper,\n} from \"../../../../StyledComponents/StyledTableHeader\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  setCreateTaskModalSelectedMachine,\n  setIsCreateTaskModalOpen,\n} from \"../../../../redux/actions/mainActions\";\nimport { MACHINE_1, MACHINE_2 } from \"../../../../constants/machineNames\";\n\nconst StyledTableHeaderName = styled.p`\n  margin: 0 0.5rem;\n  font-size: 1.25rem;\n  width: 6.25rem;\n`;\n\nconst StyledTableHeaderInfo = styled.p`\n  width: 22rem;\n  margin-left: 1.5rem;\n  text-align: center;\n  font-size: 1.75rem;\n`;\n\ninterface IMachineInfoHeaderProps {\n  machineName: typeof MACHINE_1 | typeof MACHINE_2;\n  activeOrders: number;\n  timeToFinish: number;\n}\n\nfunction MachineInfoHeader(props: IMachineInfoHeaderProps) {\n  const { machineName, activeOrders, timeToFinish } = props;\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  function handleNewTaskClick(machine: string) {\n    dispatch(setCreateTaskModalSelectedMachine(machine));\n    dispatch(setIsCreateTaskModalOpen(true));\n  }\n\n  return (\n    <StyledTableHeaderWrapper className=\"user-data-table-container\">\n      <IconButton\n        onClick={() => history.push(ROUTE_MACHINES)}\n        aria-label=\"goBack\"\n      >\n        <ArrowBackIcon />\n      </IconButton>\n      <StyledTableHeaderInfoWrapper>\n        <StyledTableHeaderName className=\"user-data-table__info--name\">\n          {machineName === \"máquina1\" ? \"Máquina 1\" : \"Máquina 2\"}\n        </StyledTableHeaderName>\n        <StyledTableHeaderInfo className=\"user-data-table__info\">\n          Programas activos: {activeOrders}\n        </StyledTableHeaderInfo>\n        <StyledTableHeaderInfo className=\"user-data-table__info\">\n          Tiempo restante: {timeToFinish} min\n        </StyledTableHeaderInfo>\n      </StyledTableHeaderInfoWrapper>\n      <StyledFlexGrow />\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={() => {\n          handleNewTaskClick(machineName);\n        }}\n      >\n        Nuevo programa\n      </Button>\n    </StyledTableHeaderWrapper>\n  );\n}\n\nexport default MachineInfoHeader;\n","import EnhancedTaksTable from \"../../components/MUITable/EnhancedTasksTable/EnhancedTasksTable\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\nimport { MACHINE_1, MACHINE_2 } from \"../../constants/machineNames\";\nimport { TTaskResponse } from \"../../types/taskTypes\";\nimport { calculateTotalTime } from \"../../utils/calculateTotalTime\";\n\nimport { sortTasksByPriority } from \"../../utils/sortTasksByPriority\";\nimport MachineInfoHeader from \"./components/MachineInfoHeader/MachineInfoHeader\";\n\ninterface IMachinePageProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  machineName: typeof MACHINE_1 | typeof MACHINE_2;\n  handleTaskClick?: (taskId: string) => void;\n}\n\nfunction MachinePage(props: IMachinePageProps) {\n  const { tasks, isLoading, isError, machineName } = props;\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº Tarea\",\n    },\n    {\n      id: \"material\",\n      label: \"Material\",\n    },\n    {\n      id: \"thickness\",\n      label: \"Espesor\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"employerCode\",\n      label: \"Técnico\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n    {\n      id: \"actions\",\n      label: \"Acciones\",\n    },\n  ];\n\n  return (\n    <>\n      <MachineInfoHeader\n        machineName={machineName}\n        activeOrders={tasks?.length || 0}\n        timeToFinish={calculateTotalTime(tasks)}\n      />\n      <EnhancedTaksTable\n        headCells={headCells}\n        tasks={sortTasksByPriority(tasks)}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default MachinePage;\n","import machines from \"./machines.json\";\n\nexport function getMachineByName(machineName: string) {\n  console.log(\"getname\", machineName);\n\n  return machines.find((machine) => machine.name === machineName);\n}\n\nexport function getMachines() {\n  return machines;\n}\n","import { useParams } from \"react-router-dom\";\nimport MachinePage from \"./MachinePage\";\nimport useLoadMachineTasksQuery from \"./queries/useLoadMachineTasksQuery\";\nimport { useSelector } from \"react-redux\";\nimport { MACHINE_1, MACHINE_2 } from \"../../constants/machineNames\";\n\ninterface IMachinePageContainerParams {\n  machineName: typeof MACHINE_1 | typeof MACHINE_2;\n}\n\nfunction MachinePageContainer() {\n  const { forceRender } = useSelector((state: any) => state.mainReducer);\n\n  const { machineName } = useParams<IMachinePageContainerParams>();\n\n  const { isLoading, isError, data } = useLoadMachineTasksQuery(\n    machineName,\n    forceRender\n  );\n\n  function handleTaskClick(taskId: string) {\n    console.log(\"hola\");\n  }\n\n  return (\n    <>\n      <MachinePage\n        machineName={machineName}\n        tasks={data}\n        handleTaskClick={handleTaskClick}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default MachinePageContainer;\n","import { useQuery } from \"react-query\";\n\n// Mocks\nimport { getTaskByMachineId } from \"../../../mocks/tasksRepository\";\nimport { getMachineByName } from \"../../../mocks/machineRepository\";\n\nexport default function useLoadMachineTasksQuery(\n  machineName: string,\n  forceRender: number\n) {\n  // el useQuery reb un array amb el nom de la \"action\" i les variables que si canvien torna a executar\n  return useQuery(\n    [\"loadMachineTasks\", machineName, forceRender],\n    async () => {\n      // TODO: const machine = await axios.get('/api/machine/name/${machineName}')\n\n      const machine = getMachineByName(machineName);\n\n      // TODO: const {data} = await axios.get('/api/tasks/${machineName}')\n      if (machine) {\n        const data = getTaskByMachineId(machine._id);\n\n        return data;\n      }\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import { TUserResponse } from \"../types/employeeTypes\";\nimport data from \"./users.json\";\nconst users: TUserResponse[] = data;\n\nexport function getUserById(userId: string) {\n  const user = users.find((user) => {\n    return user._id === userId;\n  });\n  return user;\n}\n\nexport function getUserByCode(userCode: string) {\n  const user = users.find((user) => {\n    return user.employerCode === userCode;\n  });\n  return user;\n}\n","import dayjs from \"dayjs\";\n\nexport default function formatDate(date: string | null) {\n  if (!date) {\n    return \"-\";\n  }\n  return dayjs(date).format(\"DD/MM/YY HH:mm\");\n}\n","import { FC } from \"react\";\nimport styled from \"styled-components\";\n\nimport WatchLaterIcon from \"@mui/icons-material/WatchLater\";\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\n\nconst StyledTaskStatusContainer = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.5rem;\n  font-size: 0.9rem;\n  font-weight: 600;\n  width: fit-content;\n`;\n\nconst StyledTaskText = styled.span`\n  line-height: normal;\n`;\n\ninterface ITaskStatusProps {\n  status: number;\n}\n\nconst statusText: any = {\n  0: \"En curso\",\n  1: \"Finalizada\",\n};\n\nconst statusTextColor: any = {\n  0: \"#014361\",\n  1: \"#1e4620\",\n};\n\nconst iconColor: any = {\n  0: \"#03a9f4\",\n  1: \"#4caf50\",\n};\n\nconst statusBgColor: any = {\n  0: \"#E5F5FD\",\n  1: \"#EDF7ED\",\n};\n\nconst TaskStatus: FC<ITaskStatusProps> = ({ status }) => {\n  return (\n    <StyledTaskStatusContainer\n      className=\"TaskStatusContainer\"\n      style={{\n        background: statusBgColor[status],\n        color: statusTextColor[status],\n      }}\n    >\n      {status === 0 ? (\n        <WatchLaterIcon\n          style={{ color: iconColor[status], marginRight: \"0.25rem\" }}\n        />\n      ) : (\n        <CheckCircleIcon\n          style={{ color: iconColor[status], marginRight: \"0.25rem\" }}\n        />\n      )}\n      <StyledTaskText>{statusText[status]}</StyledTaskText>\n    </StyledTaskStatusContainer>\n  );\n};\n\nexport default TaskStatus;\n","import {\n  Box,\n  CircularProgress,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n  Paper,\n} from \"@mui/material\";\nimport React from \"react\";\nimport {\n  maxTableHeight,\n  maxTableHeight_small,\n} from \"../../../styles/styleConstants\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport formatDate from \"../../../utils/formatDate\";\nimport TaskStatus from \"../../TaskStatus/TaskStatus\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTablePageContainer,\n  StyledTableWrapper,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\n\ninterface IEnhnacedEmployeeTasksTableProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  headCells: THeadCell[];\n}\n\nexport default function EnhnacedEmployeeTasksTable(\n  props: IEnhnacedEmployeeTasksTableProps\n) {\n  const { tasks, headCells, isLoading, isError } = props;\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer\n            component={Paper}\n            sx={{ maxHeight: maxTableHeight_small }}\n          >\n            <Table\n              sx={{ minWidth: 750, maxHeight: 250 }}\n              aria-labelledby=\"tableTitle\"\n              size=\"medium\"\n              stickyHeader\n            >\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={999}>\n                      <StyledLoadingWrapper>\n                        <CircularProgress />\n                        Cargando Datos...\n                      </StyledLoadingWrapper>\n                    </TableCell>\n                  </TableRow>\n                ) : isError ? (\n                  <></>\n                ) : (\n                  tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n\n                        <TableCell align=\"center\">\n                          <TaskStatus status={task.status} />\n                        </TableCell>\n                        <TableCell align=\"center\">{task.material}</TableCell>\n                        <TableCell align=\"center\">{task.thickness}</TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.machine.name}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {formatDate(task.end || task.start)}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {!isLoading && tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n    </StyledTablePageContainer>\n  );\n}\n","export const MACHINE_1 = \"máquina1\";\nexport const MACHINE_2 = \"máquina2\";\n","import { MACHINE_1, MACHINE_2 } from \"../constants/machineNames\";\nimport { TMachineResponse } from \"../types/machineTypes\";\nimport { TTaskResponse } from \"../types/taskTypes\";\nimport { calculateTotalTime } from \"./calculateTotalTime\";\n\ntype TTasksData = {\n  machine1: {\n    activeTasks: number | undefined;\n    timeToFinish: number;\n  };\n  machine2: {\n    activeTasks: number | undefined;\n\n    timeToFinish: number;\n  };\n};\n\nexport function calculateMachineGeneralValues(\n  tasks: TTaskResponse[] | undefined\n): TTasksData {\n  const machine1Tasks = tasks?.filter(\n    (task) => task.machine.name === MACHINE_1\n  );\n  const machine2Tasks = tasks?.filter(\n    (task) => task.machine.name === MACHINE_2\n  );\n\n  const machine1TimeToFinish = calculateTotalTime(machine1Tasks);\n  const machine2TimeToFinish = calculateTotalTime(machine2Tasks);\n\n  return {\n    machine1: {\n      activeTasks: machine1Tasks?.length,\n      timeToFinish: machine1TimeToFinish,\n    },\n    machine2: {\n      activeTasks: machine2Tasks?.length,\n      timeToFinish: machine2TimeToFinish,\n    },\n  };\n}\n","import { Grid } from \"@mui/material\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledTableHeaderInfoCardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background: #d8d8d8;\n  border-radius: 0.5rem;\n  padding: 0.15rem 0;\n\n  .MuiGrid-item {\n    text-align: center;\n    padding: 0.25rem;\n    font-weight: 400;\n  }\n`;\n\nconst StyledInfoCardSeparator = styled.div`\n  width: 95%;\n  height: 1px;\n  margin: auto;\n  background: #8a8a8a;\n`;\n\nconst StyledImportantCell = styled.span`\n  font-weight: 700;\n`;\n\nconst StyledValue = styled.span`\n  font-size: 1.5rem;\n`;\n\nconst StyledTotalValue = styled.span`\n  color: green;\n  font-weight: 700;\n`;\n\ninterface ITableHeaderInfoCardProps {\n  machine1Tasks: number;\n  machine1TimeToFinish: number;\n  machine2Tasks: number;\n  machine2TimeToFinish: number;\n  totalTasks: number;\n  totalTimeToFinish: number;\n}\n\nfunction TableHeaderInfoCard(props: ITableHeaderInfoCardProps) {\n  const {\n    machine1Tasks,\n    machine1TimeToFinish,\n    machine2Tasks,\n    machine2TimeToFinish,\n    totalTasks,\n    totalTimeToFinish,\n  } = props;\n\n  return (\n    <StyledTableHeaderInfoCardContainer>\n      <Grid container>\n        {/* Inicio fila 1 */}\n        <Grid item alignItems=\"center\" xs={3}></Grid>\n        <Grid item alignItems=\"start\" xs={3}>\n          <StyledImportantCell>Maq.1</StyledImportantCell>\n        </Grid>\n        <Grid item alignItems=\"start\" xs={3}>\n          <StyledImportantCell>Maq.2</StyledImportantCell>\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          <StyledTotalValue>Total</StyledTotalValue>\n        </Grid>\n\n        {/* Inicio fila 2 */}\n        <Grid item alignItems=\"start\" xs={3}>\n          <StyledImportantCell>Prog. Activos</StyledImportantCell>\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          <StyledValue>{machine1Tasks}</StyledValue>\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          <StyledValue>{machine2Tasks}</StyledValue>\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          <StyledValue>\n            <StyledTotalValue>{totalTasks}</StyledTotalValue>\n          </StyledValue>\n        </Grid>\n\n        <StyledInfoCardSeparator />\n\n        {/* Inicio fila 3 */}\n        <Grid item alignItems=\"center\" xs={3}>\n          <StyledImportantCell> T. Restante</StyledImportantCell>\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          <StyledValue>{machine1TimeToFinish} min</StyledValue>\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          <StyledValue>{machine2TimeToFinish} min</StyledValue>\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          <StyledValue>\n            <StyledTotalValue>{totalTimeToFinish} min </StyledTotalValue>\n          </StyledValue>\n        </Grid>\n      </Grid>\n    </StyledTableHeaderInfoCardContainer>\n  );\n}\n\nexport default TableHeaderInfoCard;\n","import React from \"react\";\nimport { TUserResponse } from \"../../types/employeeTypes\";\nimport \"./UserInfoHeader.scss\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport IconButton from \"@mui/material/IconButton\";\nimport {\n  StyledTableHeaderInfoWrapper,\n  StyledTableHeaderWrapper,\n} from \"../../StyledComponents/StyledTableHeader\";\nimport { TTaskResponse } from \"../../types/taskTypes\";\nimport { TMachineResponse } from \"../../types/machineTypes\";\nimport { calculateMachineGeneralValues } from \"../../utils/calculateMachineGeneralValues\";\nimport TableHeaderInfoCard from \"../TableHeaderInfoCard/TableHeaderInfoCard\";\nimport { calculateTotalTime } from \"../../utils/calculateTotalTime\";\n\nconst StyledFlexGrow = styled.div`\n  flex: 1;\n`;\n\nconst StyledInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n`;\n\ninterface IUserInfoHeaderProps {\n  employee: TUserResponse | undefined;\n  tasks: TTaskResponse[] | undefined;\n}\n\nfunction UserInfoHeader(props: IUserInfoHeaderProps) {\n  const { employee, tasks } = props;\n\n  const tasksData = calculateMachineGeneralValues(tasks);\n  const history = useHistory();\n\n  return (\n    <StyledTableHeaderWrapper className=\"user-data-table-container\">\n      <StyledTableHeaderInfoWrapper className=\"user-data-table\">\n        <IconButton onClick={() => history.goBack()} aria-label=\"goBack\">\n          <ArrowBackIcon />\n        </IconButton>\n        <StyledInfoWrapper>\n          <span className=\"user-data-table__info--name\">{employee?.name}</span>\n          <span className=\"user-data-table__info\">\n            Cód. Emp: {employee?.employerCode}\n          </span>\n        </StyledInfoWrapper>\n        <StyledFlexGrow />\n        <TableHeaderInfoCard\n          machine1Tasks={tasksData.machine1.activeTasks as number}\n          machine1TimeToFinish={tasksData.machine1.timeToFinish as number}\n          machine2Tasks={tasksData.machine2.activeTasks as number}\n          machine2TimeToFinish={tasksData.machine2.timeToFinish as number}\n          totalTasks={tasks?.length as number}\n          totalTimeToFinish={calculateTotalTime(tasks)}\n        />\n      </StyledTableHeaderInfoWrapper>\n    </StyledTableHeaderWrapper>\n  );\n}\n\nexport default UserInfoHeader;\n","import React from \"react\";\n\n// types\nimport { TTaskResponse } from \"../../types/taskTypes\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\nimport { TUserResponse } from \"../../types/employeeTypes\";\n\n// components\nimport EnhancedEmployeeTable from \"../../components/MUITable/EnhancedEmployeeTable/EnhancedEmployeeTable\";\nimport UserInfoHeader from \"../../components/UserInfoHeader/UserInfoHeader\";\nimport { TMachineResponse } from \"../../types/machineTypes\";\n\ninterface IEmployeePage {\n  tasks: TTaskResponse[] | undefined;\n  employee: TUserResponse | undefined;\n  isLoading: boolean;\n  isError: boolean;\n}\n\nfunction EmployeePage(props: IEmployeePage) {\n  const { tasks, isLoading, isError, employee } = props;\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº tarea\",\n    },\n    {\n      id: \"status\",\n      label: \"Estado\",\n    },\n    {\n      id: \"material\",\n      label: \"Material\",\n    },\n    {\n      id: \"thickness\",\n      label: \"Espesor\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"machine\",\n      label: \"Máquina\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n    {\n      id: \"date\",\n      label: \"Fecha\",\n    },\n  ];\n\n  return (\n    <>\n      <UserInfoHeader employee={employee} tasks={tasks} />\n      <EnhancedEmployeeTable\n        headCells={headCells}\n        tasks={tasks}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default EmployeePage;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n// queries\nimport useLoadEmployeeTasksQuery from \"./queries/useLoadEmployeeTasksQuery\";\n\n// components\nimport EmployeePage from \"./EmployeePage\";\n\ninterface IEmployeePageContainerParams {\n  employeeId: string;\n}\n\nfunction EmployeePageContainer() {\n  const { employeeId } = useParams<IEmployeePageContainerParams>();\n\n  const { isLoading, isError, data } = useLoadEmployeeTasksQuery(employeeId);\n\n  return (\n    <>\n      <EmployeePage\n        tasks={data?.employeeTasks}\n        employee={data?.employee}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default EmployeePageContainer;\n","import { useQuery } from \"react-query\";\nimport { getMachines } from \"../../../mocks/machineRepository\";\n\n// mocks\nimport { getTaskByUserId } from \"../../../mocks/tasksRepository\";\nimport { getUserById } from \"../../../mocks/userRepository\";\n\nexport default function useLoadEmployeeTasksQuery(employeeId: string) {\n  return useQuery(\n    [\"loadEmployeeTasks\", employeeId],\n    async () => {\n      // TODO const {data:employee} = await axios.get(\"/api/employee/${employeeId}\")\n      // TODO const {data:employeeTasks} = await axios.get(\"/api/tasks/employee/${employeeId}\")\n      // TODO const {data:machines} = await axios.get(\"/api/machines\")\n      const employee = getUserById(employeeId);\n      const employeeTasks = getTaskByUserId(employeeId);\n      return { employeeTasks, employee };\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport React from \"react\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport formatDate from \"../../../utils/formatDate\";\nimport TaskStatus from \"../../TaskStatus/TaskStatus\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTablePageContainer,\n  StyledTableWrapper,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\n\ninterface IEnhancedTableProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedFinishedTasksTable(props: IEnhancedTableProps) {\n  const { tasks, headCells, isLoading, isError } = props;\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  console.log(tasks);\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table\n              sx={{ minWidth: 750 }}\n              aria-labelledby=\"tableTitle\"\n              size=\"medium\"\n              stickyHeader\n            >\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={999}>\n                      <StyledLoadingWrapper>\n                        <CircularProgress />\n                        Cargando Datos...\n                      </StyledLoadingWrapper>\n                    </TableCell>\n                  </TableRow>\n                ) : isError ? (\n                  <></>\n                ) : (\n                  tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.machine.name}\n                        </TableCell>\n                        <TableCell align=\"center\">{task.material}</TableCell>\n                        <TableCell align=\"center\">{task.thickness}</TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.user.employerCode}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {formatDate(task.end)}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {!isLoading && tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n    </StyledTablePageContainer>\n  );\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport IconButton from \"@mui/material/IconButton\";\n\nimport { ROUTE_MACHINES } from \"../../../routes/routes\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport { calculateMachineGeneralValues } from \"../../../utils/calculateMachineGeneralValues\";\nimport {\n  StyledTableHeaderInfoWrapper,\n  StyledTableHeaderWrapper,\n} from \"../../../StyledComponents/StyledTableHeader\";\nimport TableHeaderInfoCard from \"../../../components/TableHeaderInfoCard/TableHeaderInfoCard\";\nimport { calculateTotalTime } from \"../../../utils/calculateTotalTime\";\n\nconst StyledFlexGrow = styled.div`\n  flex: 1;\n`;\n\nconst StyledTableHeaderName = styled.p`\n  margin-left: 0.5rem;\n  font-size: 1.5rem;\n  justify-self: flex-start;\n`;\n\ninterface IFinishedTasksInfoHeaderProps {\n  tasks: TTaskResponse[] | undefined;\n}\n\nfunction FinishedTasksInfoHeader(props: IFinishedTasksInfoHeaderProps) {\n  const { tasks } = props;\n\n  const tasksData = calculateMachineGeneralValues(tasks);\n  const history = useHistory();\n\n  return (\n    <StyledTableHeaderWrapper className=\"user-data-table-container\">\n      <StyledTableHeaderInfoWrapper className=\"user-data-table\">\n        <IconButton\n          onClick={() => history.push(ROUTE_MACHINES)}\n          aria-label=\"goBack\"\n        >\n          <ArrowBackIcon />\n        </IconButton>\n        <StyledTableHeaderName>Programas finalizados</StyledTableHeaderName>\n        <StyledFlexGrow />\n        <TableHeaderInfoCard\n          machine1Tasks={tasksData.machine1.activeTasks as number}\n          machine1TimeToFinish={tasksData.machine1.timeToFinish as number}\n          machine2Tasks={tasksData.machine2.activeTasks as number}\n          machine2TimeToFinish={tasksData.machine2.timeToFinish as number}\n          totalTasks={tasks?.length as number}\n          totalTimeToFinish={calculateTotalTime(tasks)}\n        />\n      </StyledTableHeaderInfoWrapper>\n    </StyledTableHeaderWrapper>\n  );\n}\n\nexport default FinishedTasksInfoHeader;\n","import EnhancedFinishedTasksTable from \"../../components/MUITable/EnhancedFinishedTasksTable/EnhancedFinishedTasksTable\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\nimport { TTaskResponse } from \"../../types/taskTypes\";\nimport FinishedTasksInfoHeader from \"./components/FinishedTasksInfoHeader\";\n\ninterface IFinishedTasksPageProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  handleTaskClick?: (taskId: string) => void;\n}\n\nfunction FinishedTasksPage(props: IFinishedTasksPageProps) {\n  const { tasks, isLoading, isError } = props;\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº Tarea\",\n    },\n    {\n      id: \"machine\",\n      label: \"Máquina\",\n    },\n    {\n      id: \"material\",\n      label: \"Material\",\n    },\n    {\n      id: \"thickness\",\n      label: \"Espesor\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"employerCode\",\n      label: \"Técnico\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n    {\n      id: \"date\",\n      label: \"Fecha\",\n    },\n  ];\n\n  return (\n    <>\n      <FinishedTasksInfoHeader tasks={tasks} />\n      <EnhancedFinishedTasksTable\n        headCells={headCells}\n        tasks={tasks}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default FinishedTasksPage;\n","import FinishedTasksPage from \"./FinishedTasksPage\";\nimport useFinisedTasksQuery from \"./queries/useLoadFinishedTasksQuery\";\n\nfunction FinishedTasksPageContainer() {\n  const { isLoading, isError, data } = useFinisedTasksQuery();\n\n  function handleTaskClick(taskId: string) {\n    console.log(\"hola\");\n  }\n\n  return (\n    <>\n      <FinishedTasksPage tasks={data} isLoading={isLoading} isError={isError} />\n    </>\n  );\n}\n\nexport default FinishedTasksPageContainer;\n","import { useQuery } from \"react-query\";\nimport { getMachines } from \"../../../mocks/machineRepository\";\n\nimport { getFinishedTasks } from \"../../../mocks/tasksRepository\";\nimport { TMachineResponse } from \"../../../types/machineTypes\";\n\nfunction getMachineNameById(machines: TMachineResponse[], machineId: string) {\n  const machine = machines.find((machine) => machine._id === machineId);\n\n  return machine ? machine.name : \"\";\n}\n\nexport default function useFinisedTasksQuery() {\n  // el useQuery reb un array amb el nom de la \"action\" i les variables que si canvien torna a executar\n  return useQuery(\n    [\"loadFinishedTasks\"],\n    async () => {\n      // TODO: const {data: tasks} = await axios.get('/api/tasks/finished}')\n      const tasks = getFinishedTasks();\n\n      return tasks;\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","export const ERROR_MESSAGE_INVALID_CREDENTIALS = (userCode: string) =>\n  `No existe un empleado con el código de empleado: ${userCode}.`;\n","import { Dispatch } from \"redux\";\nimport {\n  LOGIN_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_LOADING,\n  LOGOUT,\n} from \"./actionTypes\";\n\n// mocks\nimport { getUserByCode } from \"../../mocks/userRepository\";\nimport { TUserResponse } from \"../../types/employeeTypes\";\nimport { ERROR_MESSAGE_INVALID_CREDENTIALS } from \"../../constants/errorMessages\";\n\ntype TLoginLoadingAction = {\n  type: typeof LOGIN_LOADING;\n};\n\ntype TLogoutAction = {\n  type: typeof LOGOUT;\n};\n\nexport type TAuthActions =\n  | TLoginLoadingAction\n  | TLogoutAction\n  | {\n      type: typeof LOGIN_SUCCESS;\n      payload: { user: TUserResponse };\n    }\n  | {\n      type: typeof LOGIN_ERROR;\n      payload: { errorMessage: string };\n    };\n\nexport function loginLoading() {\n  return {\n    type: LOGIN_LOADING,\n  };\n}\n\nexport function loginSuccess(user: TUserResponse | undefined) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: { user },\n  };\n}\n\nexport function loginError(errorMessage: string) {\n  return {\n    type: LOGIN_ERROR,\n    payload: { errorMessage },\n  };\n}\n\nexport function login(userCode: string) {\n  return async (dispatch: Dispatch) => {\n    try {\n      dispatch(loginLoading());\n      // TODO: const {data} = await axios.get('/api/user/employerCode/${userCode')\n      const data = await getUserByCode(userCode);\n\n      if (data) {\n        localStorage.setItem(\"user\", JSON.stringify(data));\n        dispatch(loginSuccess(data));\n      } else {\n        dispatch(loginError(ERROR_MESSAGE_INVALID_CREDENTIALS(userCode)));\n      }\n    } catch (error: any) {\n      if (error.response) {\n        dispatch(loginError(error.response.message));\n      } else {\n        dispatch(loginError(error.message));\n      }\n    }\n  };\n}\n\nexport function logout() {\n  localStorage.removeItem(\"user\");\n\n  return {\n    type: LOGOUT,\n  };\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\n// actions\nimport { login } from \"../../redux/actions/authActions\";\n\n// styles\nimport styled from \"styled-components\";\nimport \"./LoginPage.scss\";\n\nimport {\n  Grid,\n  Paper,\n  Avatar,\n  TextField,\n  CircularProgress,\n  Button,\n} from \"@mui/material\";\n\nimport LoginIcon from \"@mui/icons-material/Login\";\nimport { TInitialState } from \"../../redux/store/initialState\";\n\nconst StyledLoadingWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n\n  .MuiPaper-root {\n    padding: 3rem 1.25rem;\n    width: 17rem;\n  }\n\n  .MuiGrid-root {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n  .MuiAvatar-root {\n    margin-bottom: 1rem;\n    background-color: #1bbd7e;\n  }\n  .MuiFormControl-root {\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n  }\n  .MuiButton-root {\n    margin-top: 1rem;\n  }\n`;\n\nfunction LoginPage() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const { loginLoading, loginError, user } = useSelector(\n    (state: TInitialState) => state.authReducer\n  );\n\n  const valueRef = useRef<HTMLInputElement>(null);\n  const [warningMessage, setWarningMessage] = useState(\"\");\n\n  useEffect(() => {\n    if (user) {\n      history.replace(\"/machines\");\n    }\n    if (loginError) {\n      setWarningMessage(loginError);\n    }\n  }, [user, loginError]);\n\n  function handleLogInClick() {\n    if (valueRef.current) {\n      dispatch(login(valueRef.current.value));\n    }\n  }\n\n  function handleKeyUp(event: React.KeyboardEvent) {\n    if (event.key === \"Enter\") {\n      handleLogInClick();\n    }\n  }\n\n  return (\n    <StyledLoadingWrapper>\n      <Grid>\n        <Paper elevation={10}>\n          <Grid>\n            <Avatar>\n              <LoginIcon />\n            </Avatar>\n            <h2>Login</h2>\n          </Grid>\n          <TextField\n            label=\"Código de empleado\"\n            placeholder=\"Entra el código de empleado\"\n            variant=\"standard\"\n            fullWidth\n            required\n            inputRef={valueRef}\n            onKeyUp={handleKeyUp}\n          />\n          {loginLoading && <CircularProgress />}\n          <small className=\"form__warningMessage\">{warningMessage}</small>\n\n          <Button variant=\"contained\" fullWidth onClick={handleLogInClick}>\n            login\n          </Button>\n        </Paper>\n      </Grid>\n    </StyledLoadingWrapper>\n  );\n}\n\nexport default LoginPage;\n","import { List, ListItem, ListItemIcon, ListItemText } from \"@mui/material\";\n\nimport AssignmentTurnedInIcon from \"@mui/icons-material/AssignmentTurnedIn\";\nimport PrecisionManufacturingIcon from \"@mui/icons-material/PrecisionManufacturing\";\nimport PeopleIcon from \"@mui/icons-material/People\";\nimport StoreIcon from \"@mui/icons-material/Store\";\nimport { ListItemButton } from \"@mui/material\";\nimport Avatar from \"@mui/material/Avatar\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport LogoutIcon from \"@mui/icons-material/Logout\";\nimport { useDispatch } from \"react-redux\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport \"./LeftMenu.scss\";\nimport {\n  ROUTE_ADMIN_PROFILE,\n  ROUTE_EMPLOYEES,\n  ROUTE_FINISHEDTASKS,\n  ROUTE_LOGIN,\n  ROUTE_MACHINES,\n  ROUTE_MACHINES_NAME_FACTORY,\n} from \"../../routes/routes\";\nimport { MACHINE_1, MACHINE_2 } from \"../../constants/machineNames\";\nimport { logout } from \"../../redux/actions/authActions\";\n\nfunction LeftMenu() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"left-menu\">\n      <div className=\"left-menu__header\">\n        <Avatar>CRC</Avatar>\n        {/* TODO: Display del username */}\n      </div>\n      <nav className=\"left-menu__nav\">\n        <List>\n          <ListItem disableGutters>\n            <NavLink\n              activeClassName=\"left-menu__nav-item--active\"\n              to={ROUTE_MACHINES}\n              className=\"left-menu__nav-item\"\n            >\n              <ListItemButton>\n                <ListItemIcon>\n                  <StoreIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Maquinas\" />\n              </ListItemButton>\n            </NavLink>\n          </ListItem>\n          <List component=\"div\" disablePadding>\n            <NavLink\n              activeClassName=\"left-menu__nav-item--active\"\n              to={ROUTE_MACHINES_NAME_FACTORY(MACHINE_1)}\n              className=\"left-menu__nav-item\"\n            >\n              <ListItemButton sx={{ pl: 5 }}>\n                <ListItemIcon>\n                  <PrecisionManufacturingIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Maquina 1\" />\n              </ListItemButton>\n            </NavLink>\n            <NavLink\n              activeClassName=\"left-menu__nav-item--active\"\n              to={ROUTE_MACHINES_NAME_FACTORY(MACHINE_2)}\n              className=\"left-menu__nav-item\"\n            >\n              <ListItemButton sx={{ pl: 5 }}>\n                <ListItemIcon>\n                  <PrecisionManufacturingIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Maquina 2\" />\n              </ListItemButton>\n            </NavLink>\n          </List>\n\n          <ListItem disableGutters>\n            <NavLink\n              activeClassName=\"left-menu__nav-item--active\"\n              to={ROUTE_EMPLOYEES}\n              className=\"left-menu__nav-item\"\n            >\n              <ListItemButton>\n                <ListItemIcon>\n                  <PeopleIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Lista de técnicos\" />\n              </ListItemButton>\n            </NavLink>\n          </ListItem>\n\n          <ListItem disableGutters>\n            <NavLink\n              activeClassName=\"left-menu__nav-item--active\"\n              to={ROUTE_FINISHEDTASKS}\n              className=\"left-menu__nav-item\"\n            >\n              <ListItemButton>\n                <ListItemIcon>\n                  <AssignmentTurnedInIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Programas Terminados\" />\n              </ListItemButton>\n            </NavLink>\n          </ListItem>\n\n          <ListItem disableGutters>\n            <NavLink\n              activeClassName=\"left-menu__nav-item--active\"\n              to={ROUTE_ADMIN_PROFILE}\n              className=\"left-menu__nav-item\"\n            >\n              <ListItemButton>\n                <ListItemIcon>\n                  <SettingsIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Zona Admin\" />\n              </ListItemButton>\n            </NavLink>\n          </ListItem>\n        </List>\n        <div className=\"flex-grow\"></div>\n\n        <ListItem\n          disableGutters\n          className=\"left-menu__nav-item left-menu__nav-item--bottom\"\n        >\n          <ListItemButton\n            onClick={() => {\n              dispatch(logout());\n              history.replace(\"/\");\n            }}\n          >\n            <ListItemIcon>\n              <LogoutIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Salir\" />\n          </ListItemButton>\n        </ListItem>\n      </nav>\n    </div>\n  );\n}\n\nexport default LeftMenu;\n","import React from \"react\";\nimport LeftMenu from \"../LeftMenu/LeftMenu\";\nimport \"./Layout.scss\";\n\ninterface ILayoutProps {\n  children: React.ReactNode;\n}\n\nfunction Layout(props: ILayoutProps) {\n  const { children } = props;\n\n  return (\n    <div className=\"layout\">\n      <div className=\"layout__menu-container\">\n        <LeftMenu />\n      </div>\n      <div className=\"layout__content\">{children}</div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import { useSelector } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { TInitialState } from \"../../redux/store/initialState\";\n\ninterface IProtectedRouteProps {\n  path: string;\n  component: any;\n  exact?: boolean;\n}\n\nfunction ProtectedRoute(props: IProtectedRouteProps) {\n  const { path, component: Compo, exact, ...rest } = props;\n  const user = useSelector((state: TInitialState) => state.authReducer.user);\n\n  return (\n    <Route\n      path={path}\n      exact={exact}\n      {...rest}\n      render={(props) => (user ? <Compo {...props} /> : <Redirect to=\"/\" />)}\n    />\n  );\n}\n\nexport default ProtectedRoute;\n","import {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport FinishTaskButton from \"../../../pages/MachinePage/components/FinishTaskButton/FinishTaskButton\";\nimport useFinishTaskDialog from \"../../../pages/MachinePage/hooks/useFinishTaskDialog\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTableWrapper,\n  StyledTablePageContainer,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\n\ninterface IEnhancedTableProps {\n  tasks: TTaskResponse[] | undefined;\n\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedTaksTable(props: IEnhancedTableProps) {\n  const { tasks, headCells } = props;\n\n  const {\n    FinishTaskDialog,\n    handleFinishTaskDialogOpen,\n    handleFinishTaskDialogClose,\n  } = useFinishTaskDialog();\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table aria-labelledby=\"tableTitle\" size=\"medium\" stickyHeader>\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <FinishTaskButton\n                            taskId={task._id}\n                            programNumber={task.programNumber}\n                            openFinishedTaskDialog={handleFinishTaskDialogOpen}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n      {FinishTaskDialog}\n    </StyledTablePageContainer>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const StyledMachinesHomePageWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: flex-start;\n`;\n\nexport const StyledMachinesHomePageLoadingWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding-top: 1.5rem;\n  font-size: 1.5rem;\n  color: white;\n\n  .MuiCircularProgress-root {\n    margin-right: 1rem;\n  }\n`;\n\nexport const StyledTableWrapper = styled.div`\n  width: 49%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const StyledTableHeaderWrapper = styled.div`\n  padding: 1rem 0;\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n\n  .flex-grow {\n    flex: 1;\n  }\n\n  .machines-home-page__machine-title {\n    font-size: 1.75rem;\n    color: white;\n  }\n\n  .machines__header-actions {\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n","import { CircularProgress, Button } from \"@mui/material\";\nimport LiteTasksTable from \"../../components/MUITable/LiteTasksTable/LiteTasksTable\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\n\nimport { useDispatch } from \"react-redux\";\nimport { sortTasksByPriority } from \"../../utils/sortTasksByPriority\";\nimport { TMachinesHomeTasks } from \"./MachinesHomePageTypes\";\nimport {\n  StyledMachinesHomePageLoadingWrapper,\n  StyledMachinesHomePageWrapper,\n  StyledTableHeaderWrapper,\n  StyledTableWrapper,\n} from \"./SCMachinesHomePage\";\nimport {\n  setCreateTaskModalSelectedMachine,\n  setIsCreateTaskModalOpen,\n} from \"../../redux/actions/mainActions\";\nimport { MACHINE_1, MACHINE_2 } from \"../../constants/machineNames\";\n\ninterface IMachinePageProps {\n  tasks: TMachinesHomeTasks | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  handleTaskClick?: (taskId: string) => void;\n}\n\nfunction MachinesHomePage(props: IMachinePageProps) {\n  const { tasks, isLoading, isError } = props;\n\n  const dispatch = useDispatch();\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº Tarea\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n    {\n      id: \"actions\",\n      label: \"Acciones\",\n    },\n  ];\n\n  function handleNewTaskClick(machine: string) {\n    dispatch(setCreateTaskModalSelectedMachine(machine));\n    dispatch(setIsCreateTaskModalOpen(true));\n  }\n\n  return (\n    <>\n      {isLoading && (\n        <StyledMachinesHomePageLoadingWrapper>\n          <CircularProgress />\n          Cargando Datos...\n        </StyledMachinesHomePageLoadingWrapper>\n      )}\n      {tasks && (\n        <StyledMachinesHomePageWrapper>\n          <StyledTableWrapper>\n            <StyledTableHeaderWrapper>\n              <div className=\"flex-grow\" />\n              <h3 className=\"machines-home-page__machine-title\">Máquina 1</h3>\n              <div className=\"flex-grow machines__header-actions\">\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => {\n                    handleNewTaskClick(MACHINE_1);\n                  }}\n                >\n                  Nuevo programa\n                </Button>\n              </div>\n            </StyledTableHeaderWrapper>\n            <LiteTasksTable\n              tasks={sortTasksByPriority(tasks.machine1)}\n              headCells={headCells}\n            />\n          </StyledTableWrapper>\n          <StyledTableWrapper>\n            <StyledTableHeaderWrapper>\n              <div className=\"flex-grow\" />\n              <h3 className=\"machines-home-page__machine-title\">Máquina 2</h3>\n              <div className=\"flex-grow machines__header-actions\">\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => {\n                    handleNewTaskClick(MACHINE_2);\n                  }}\n                >\n                  Nuevo programa\n                </Button>\n              </div>\n            </StyledTableHeaderWrapper>\n            <LiteTasksTable\n              tasks={sortTasksByPriority(tasks.machine2)}\n              headCells={headCells}\n            />\n          </StyledTableWrapper>\n        </StyledMachinesHomePageWrapper>\n      )}\n    </>\n  );\n}\n\nexport default MachinesHomePage;\n","import { useParams } from \"react-router-dom\";\n\nimport { useSelector } from \"react-redux\";\n\nimport MachinesHomePage from \"./MachinesHomePage\";\nimport useMachinesHomeQuery from \"./queries/useMachinesHomeQuery\";\n\nfunction MachinesHomePageContainer() {\n  const { forceRender } = useSelector((state: any) => state.mainReducer);\n\n  const { isLoading, isError, data } = useMachinesHomeQuery(forceRender);\n\n  function handleTaskClick(taskId: string) {\n    console.log(\"hola\");\n  }\n\n  return (\n    <>\n      <MachinesHomePage\n        tasks={data}\n        handleTaskClick={handleTaskClick}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default MachinesHomePageContainer;\n","import { useQuery } from \"react-query\";\n\n// Mocks\nimport {\n  getActiveTasks,\n  getTaskByMachineId,\n} from \"../../../mocks/tasksRepository\";\nimport { getMachineByName } from \"../../../mocks/machineRepository\";\nimport { MACHINE_1, MACHINE_2 } from \"../../../constants/machineNames\";\n\nexport default function useLoadMachineTasksQuery(forceRender: number) {\n  // el useQuery reb un array amb el nom de la \"action\" i les variables que si canvien torna a executar\n  return useQuery(\n    [\"loadMachinesHomeTasks\", forceRender],\n    async () => {\n      // TODO: const {data: activeTasks} = await axios.get(/api/tasks/active)\n\n      const activeTasks = getActiveTasks();\n\n      const machine1Tasks = activeTasks.filter(\n        (task) => task.machine.name === MACHINE_1\n      );\n\n      const machine2Tasks = activeTasks.filter(\n        (task) => task.machine.name === MACHINE_2\n      );\n\n      return {\n        machine1: machine1Tasks,\n        machine2: machine2Tasks,\n      };\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import { InputAdornment, TextField } from \"@mui/material\";\nimport React from \"react\";\nimport { useFormikContext } from \"formik\";\n\nimport styled from \"styled-components\";\n\nconst StyledFormikTextFieldWrapper = styled.div`\n  input {\n    padding: 0.75rem 0.5rem;\n  }\n`;\n\ninterface IFormikTextFieldProps {\n  name: string;\n  type?: string;\n  label?: string;\n  placeholder?: string;\n  variant?: \"outlined\" | \"filled\" | \"standard\";\n  size?: \"medium\" | \"small\";\n  margin?: \"normal\" | \"dense\";\n  autofocus?: boolean;\n  fullWidth?: boolean;\n  adornment?: string;\n  disabled?: boolean;\n  min?: number;\n  max?: number;\n}\n\nfunction FormikTextField(props: IFormikTextFieldProps) {\n  const formikContext = useFormikContext<any>();\n\n  const {\n    name,\n    label,\n    placeholder,\n    variant = \"outlined\",\n    size = \"medium\",\n    type = \"text\",\n    margin = \"dense\",\n    autofocus = false,\n    fullWidth = false,\n    adornment = null,\n    disabled = false,\n    min,\n    max,\n  } = props;\n\n  function handleChange({ target }: React.ChangeEvent<HTMLInputElement>) {\n    formikContext.setFieldValue(name, target.value);\n  }\n\n  return (\n    <StyledFormikTextFieldWrapper>\n      <TextField\n        variant={variant}\n        name={name}\n        label={label}\n        type={type}\n        placeholder={placeholder}\n        size={size}\n        onChange={handleChange}\n        value={formikContext.values[name]}\n        autoFocus={autofocus}\n        fullWidth={fullWidth}\n        margin={margin}\n        helperText={\n          formikContext.touched[name] &&\n          formikContext.errors[name] &&\n          formikContext.errors[name]\n        }\n        error={\n          formikContext.touched[name] && formikContext.errors[name]\n            ? true\n            : false\n        }\n        disabled={disabled}\n        InputProps={{\n          inputProps: {\n            min,\n            max,\n          },\n          endAdornment: adornment && (\n            <InputAdornment position=\"end\">{adornment}</InputAdornment>\n          ),\n        }}\n      />\n    </StyledFormikTextFieldWrapper>\n  );\n}\n\nexport default FormikTextField;\n","export default function getColorByPriority(priority: number) {\n  let bgColor = \"\";\n  if (priority > 0 && priority <= 2) {\n    bgColor = \"rgba(93, 172, 245, 0.5)\";\n  }\n  if (priority > 2 && priority <= 4) {\n    bgColor = \"rgba(1, 187, 63, 0.5)\";\n  }\n  if (priority > 4 && priority <= 8) {\n    bgColor = \"rgba(255, 163, 15, 0.5)\";\n  }\n  if (priority > 8 && priority <= 10) {\n    bgColor = \"rgba(246, 91, 92, 0.5)\";\n  }\n\n  return bgColor;\n}\n","import styled from \"styled-components\";\nimport getColorByPriority from \"../../../../utils/getColorByPriority\";\n\nconst StyledPriorityBadgeWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst StyledPriorityBadge = styled.div`\n  width: 1.75rem;\n  height: 1.75rem;\n  border-radius: 50%;\n  margin-right: 0.5rem;\n`;\n\nconst StyledPriorityText = styled.span`\n  font-size: 1rem;\n  font-weight: 600;\n`;\n\nfunction formatTextByPriority(priority: number) {\n  let text = \"\";\n\n  if (priority > 0 && priority <= 2) {\n    text = \"Normal\";\n  }\n  if (priority > 2 && priority <= 4) {\n    text = \"Normal\";\n  }\n  if (priority > 4 && priority <= 8) {\n    text = \"Urgencia 48h\";\n  }\n  if (priority > 8 && priority <= 10) {\n    text = \"Urgencia 24h\";\n  }\n\n  return text;\n}\n\ninterface IPriorityBadge {\n  priority: number;\n}\nfunction PriorityBadge(props: IPriorityBadge) {\n  const { priority } = props;\n  return (\n    <StyledPriorityBadgeWrapper>\n      <StyledPriorityBadge\n        style={{\n          background: getColorByPriority(priority),\n        }}\n      />\n      <StyledPriorityText>{formatTextByPriority(priority)}</StyledPriorityText>\n    </StyledPriorityBadgeWrapper>\n  );\n}\n\nexport default PriorityBadge;\n","import { FC } from \"react\";\nimport { useFormikContext } from \"formik\";\nimport styled from \"styled-components\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport { FormHelperText } from \"@mui/material\";\n\nconst StyledFormikSelectWrapper = styled.div`\n  margin-top: 0.5rem;\n  .MuiSelect-select {\n    padding: 0.75rem 0.5rem;\n  }\n`;\n\ninterface IFormikSelectProps {\n  name: string;\n  label: string;\n  values: string[];\n  variant?: \"outlined\" | \"filled\" | \"standard\";\n  size?: \"medium\" | \"small\";\n  margin?: \"none\" | \"dense\";\n}\n\nconst FormikSelect: FC<IFormikSelectProps> = ({\n  name,\n  label,\n  values,\n  variant = \"outlined\",\n  size = \"medium\",\n  margin = \"dense\",\n}) => {\n  const formikContext = useFormikContext<any>();\n\n  function handleChange({ target }: SelectChangeEvent) {\n    formikContext.setFieldValue(name, target.value);\n  }\n\n  const selectValues = values.map((item) => ({\n    label: item,\n    value: item.toLowerCase(),\n  }));\n\n  return (\n    <StyledFormikSelectWrapper>\n      <FormControl fullWidth>\n        <InputLabel id=\"demo-simple-select-label\">{label}</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={formikContext.values[name]}\n          label={label}\n          onChange={handleChange}\n          error={\n            formikContext.touched[name] && formikContext.errors[name]\n              ? true\n              : false\n          }\n          variant={variant}\n          size={size}\n          margin={margin}\n          defaultValue={formikContext.values[name]}\n        >\n          {selectValues.map((item) => (\n            <MenuItem value={item.value} key={item.value}>\n              {item.label}\n            </MenuItem>\n          ))}\n        </Select>\n        {formikContext.touched[name] && formikContext.errors[name] && (\n          <FormHelperText sx={{ color: \"#D32F2F\" }}>\n            {formikContext.errors[name]}\n          </FormHelperText>\n        )}\n      </FormControl>\n    </StyledFormikSelectWrapper>\n  );\n};\n\nexport default FormikSelect;\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n} from \"@mui/material\";\nimport { Form } from \"formik\";\nimport styled from \"styled-components\";\nimport FormikTextField from \"../FormikComponents/FormikTextField\";\nimport PriorityBadge from \"./components/PriorityBadge/PriorityBadge\";\n\nimport { useFormikContext } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { TInitialState } from \"../../redux/store/initialState\";\nimport { useEffect } from \"react\";\nimport FormikSelect from \"../FormikComponents/FormikSelect\";\n\nconst StyledCreateTaskDialogWrapper = styled(Dialog)`\n  .MuiPaper-root {\n    max-width: 26rem;\n  }\n`;\n\nconst StyledFlexCenteredWrapper = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\ninterface ICreateTaskDialogProps {\n  isOpen: boolean;\n  handleClose: () => void;\n}\n\nconst materialsMock = [\"Madera\", \"Hierro\", \"Acero\", \"Aluminio\"];\nconst machinesMock = [\"Máquina1\", \"Máquina2\"];\n\nfunction CreateTaskDialog(props: ICreateTaskDialogProps) {\n  const { isOpen, handleClose } = props;\n\n  const formikContext = useFormikContext<any>();\n\n  const { selectedMachine } = useSelector(\n    (state: TInitialState) => state.mainReducer.createTaskModal\n  );\n\n  useEffect(() => {\n    console.log(\"machine\", selectedMachine);\n\n    formikContext.values.selectedMachine = selectedMachine;\n  }, [selectedMachine]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      formikContext.resetForm();\n    }\n  }, [isOpen]);\n\n  return (\n    <StyledCreateTaskDialogWrapper open={isOpen} onClose={handleClose}>\n      <Form noValidate>\n        <DialogTitle sx={{ textAlign: \"center\" }}>Nuevo programa</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <FormikTextField\n                name=\"employee\"\n                label=\"Código de empleado\"\n                autofocus\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormikTextField\n                name=\"programNumber\"\n                label=\"Nº Programa\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormikSelect\n                name=\"material\"\n                label=\"Material\"\n                values={materialsMock}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField\n                min={0}\n                name=\"thickness\"\n                label=\"Espesor (mm)\"\n                type=\"number\"\n                adornment=\"mm\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField\n                name=\"priority\"\n                label=\"Prioridad\"\n                type=\"number\"\n                min={1}\n                max={10}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <StyledFlexCenteredWrapper>\n                <PriorityBadge priority={formikContext.values.priority} />\n              </StyledFlexCenteredWrapper>\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField\n                name=\"duration\"\n                label=\"Tiempo\"\n                type=\"number\"\n                adornment=\"min\"\n                min={0}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField\n                name=\"correctionalFactor\"\n                label=\"Factor corrector\"\n                fullWidth\n                disabled\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormikSelect\n                name=\"selectedMachine\"\n                label=\"Máquina\"\n                values={machinesMock}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} variant=\"outlined\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" variant=\"contained\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Form>\n    </StyledCreateTaskDialogWrapper>\n  );\n}\n\nexport default CreateTaskDialog;\n","import { useSelector, useDispatch } from \"react-redux\";\n\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { TInitialState } from \"../../redux/store/initialState\";\nimport { setIsCreateTaskModalOpen } from \"../../redux/actions/mainActions\";\nimport CreateTaskDialog from \"./CreateTaskDialog\";\n\nfunction CreateTaksDialogContainer() {\n  const dispatch = useDispatch();\n\n  const { isOpen, selectedMachine } = useSelector(\n    (state: TInitialState) => state.mainReducer.createTaskModal\n  );\n\n  function handleClose() {\n    dispatch(setIsCreateTaskModalOpen(false));\n  }\n\n  const initialValues = {\n    employee: \"\",\n    material: \"\",\n    thickness: 0,\n    programNumber: \"\",\n    priority: 1,\n    duration: 0,\n    correctionalFactor: 10,\n    selectedMachine: selectedMachine || \"máquina1\",\n  };\n\n  const validationSchema = Yup.object({\n    employee: Yup.string().required(\"El código de empleado es obligatorio.\"),\n    material: Yup.string().required(\"El material es obligatorio.\"),\n    programNumber: Yup.string().required(\n      \"El número de programa es obligatorio.\"\n    ),\n    thickness: Yup.number()\n      .integer(\"No puede contener decimales.\")\n      .min(0, \"No puede ser negativo.\")\n      .required(\"El espesor es obligatorio.\"),\n    priority: Yup.number()\n      .integer(\"No puede contener decimales.\")\n      .min(1, \"El valor mínimo es 1.\")\n      .max(10, \"El valor máximo es 10.\")\n      .required(\"La prioridad es obligatoria.\"),\n    duration: Yup.number()\n      .integer(\"No puede contener decimales.\")\n      .required(\"La duración es obligatoria.\"),\n    selectedMachine: Yup.string().required(\"La máquina es obligatoria.\"),\n  });\n\n  function handleCreateTaskFormSubmit(values: TCreateTaskDialogFormValues) {\n    console.log(\"submitting\");\n    handleClose();\n  }\n\n  type TCreateTaskDialogFormValues = typeof initialValues;\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleCreateTaskFormSubmit}\n      validationSchema={validationSchema}\n    >\n      <CreateTaskDialog isOpen={isOpen} handleClose={handleClose} />\n    </Formik>\n  );\n}\n\nexport default CreateTaksDialogContainer;\n","import { FC } from \"react\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport styled from \"styled-components\";\nimport { Typography } from \"@mui/material\";\n\nconst StyledLoadingWrapper = styled.div`\n  display: flex;\n  max-width: 35rem;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n  color: white;\n  margin-top: 3rem;\n`;\n\nconst StyledLoadingText = styled(Typography)`\n  margin-left: 1rem;\n  font-size: 1.5rem;\n`;\n\ninterface IStandardLoadingProps {\n  text?: string;\n}\n\nconst StandardLoading: FC<IStandardLoadingProps> = ({ text }) => {\n  return (\n    <StyledLoadingWrapper>\n      <CircularProgress />\n      <StyledLoadingText>{text ? text : \"Cargando...\"}</StyledLoadingText>\n    </StyledLoadingWrapper>\n  );\n};\n\nexport default StandardLoading;\n","import { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { motion } from \"framer-motion\";\nimport { Typography } from \"@mui/material\";\n\nconst StyledTabContainer = styled(motion.div).attrs(() => ({\n  initial: { opacity: 0 },\n  animate: { opacity: 1 },\n}))`\n  width: 100%;\n  display: flex;\n`;\n\nconst StyledTabTitle = styled(Typography)`\n  font-size: 1.15rem;\n  font-weight: 600;\n`;\n\nconst GeneralSettingsTab: FC = () => {\n  return (\n    <StyledTabContainer>\n      <StyledTabTitle>Editar factor corrector:</StyledTabTitle>\n      <StyledTabTitle>Lista de materiales:</StyledTabTitle>\n    </StyledTabContainer>\n  );\n};\n\nexport default GeneralSettingsTab;\n","import { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { motion } from \"framer-motion\";\n\nconst StyledTabContainer = styled(motion.div).attrs(() => ({\n  initial: { opacity: 0 },\n  animate: { opacity: 1 },\n}))`\n  width: 100%;\n  display: flex;\n`;\n\nconst EmployeesTab: FC = () => {\n  return <StyledTabContainer>hola que tal</StyledTabContainer>;\n};\n\nexport default EmployeesTab;\n","import { Typography, Box } from \"@mui/material\";\nimport { height } from \"@mui/system\";\nimport { FC } from \"react\";\nimport { StyledFlexGrow } from \"../../../StyledComponents/StyledTableHeader\";\n\ninterface ITabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst TabPanel: FC<ITabPanelProps> = ({ children, value, index }) => {\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      style={{ height: \"calc(100% - 3rem)\" }}\n    >\n      {value === index && (\n        <Box sx={{ p: 3, height: \"100%\", flex: 1 }}>\n          {children}\n          <StyledFlexGrow />\n        </Box>\n      )}\n    </div>\n  );\n};\n\nexport default TabPanel;\n","import { Tabs, Tab, Box, AppBar } from \"@mui/material\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { useState } from \"react\";\nimport { FC } from \"react\";\nimport styled from \"styled-components\";\nimport CorrectionalFactorTab from \"./components/GeneralSettingsTab\";\nimport EmployeesTab from \"./components/EmployeesTab\";\nimport TabPanel from \"./components/TabPanel\";\n\nconst StyledAdminProfileHeader = styled.div`\n  width: 100%;\n  display: flex;\n  color: white;\n  font-size: 1.75rem;\n  font-weight: 700;\n  justify-content: center;\n  margin-bottom: 1.5rem;\n`;\n\ntype TCorrectionalFactors = {\n  machine1: number;\n  machine2: number;\n};\n\ninterface IAdminProfilePageProps {\n  correctionalFactors: TCorrectionalFactors;\n}\n\nconst AdminProfilePage: FC<IAdminProfilePageProps> = ({\n  correctionalFactors,\n}) => {\n  const [value, setValue] = useState(0);\n\n  function a11yProps(index: number) {\n    return {\n      id: `simple-tab-${index}`,\n      \"aria-controls\": `simple-tabpanel-${index}`,\n    };\n  }\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <>\n      <StyledAdminProfileHeader>\n        Zona de administración\n      </StyledAdminProfileHeader>\n\n      <Box\n        sx={{\n          bgcolor: \"background.paper\",\n          width: \"100%\",\n          height: \"calc(100% - 4rem)\",\n          flex: 1,\n          boxSizing: \"border-box\",\n        }}\n      >\n        <AppBar position=\"static\">\n          <Tabs\n            value={value}\n            onChange={handleChange}\n            aria-label=\"admin tabs\"\n            indicatorColor=\"secondary\"\n            textColor=\"inherit\"\n          >\n            <Tab\n              label=\"Ajustes generales\"\n              {...a11yProps(0)}\n              sx={{ color: \"white\" }}\n            />\n            <Tab label=\"Empleados\" {...a11yProps(1)} sx={{ color: \"white\" }} />\n          </Tabs>\n        </AppBar>\n        <AnimatePresence>\n          <TabPanel value={value} index={0}>\n            <CorrectionalFactorTab />\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <EmployeesTab />\n          </TabPanel>\n        </AnimatePresence>\n      </Box>\n    </>\n  );\n};\n\nexport default AdminProfilePage;\n","import { FC } from \"react\";\nimport StandardLoading from \"../../components/StandardLoading/StandardLoading\";\nimport AdminProfilePage from \"./AdminProfilePage\";\nimport useAdminProfilePageQuery from \"./queries/useAdminProfilePageQuery\";\n\nconst AdminProfilePageContainer: FC = () => {\n  const { isLoading, isError, data } = useAdminProfilePageQuery();\n\n  return (\n    <>\n      {isLoading ? (\n        <StandardLoading />\n      ) : (\n        <AdminProfilePage\n          correctionalFactors={{ machine1: 0.5, machine2: 0.1 }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default AdminProfilePageContainer;\n","import { useQuery } from \"react-query\";\n\nexport default function useAdminProfilePageQuery() {\n  return useQuery([\"loadAdminProfile\"], async () => {\n    return {};\n  });\n}\n","import { useSelector } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { TInitialState } from \"../../redux/store/initialState\";\nimport { ROUTE_LOGIN, ROUTE_MACHINES } from \"../../routes/routes\";\n\ninterface ISuperProtectedRouteProps {\n  path: string;\n  component: any;\n  exact?: boolean;\n}\n\nfunction SuperProtectedRoute(props: ISuperProtectedRouteProps) {\n  const { path, component: Compo, exact, ...rest } = props;\n  const user = useSelector((state: TInitialState) => state.authReducer.user);\n\n  return (\n    <Route\n      path={path}\n      exact={exact}\n      {...rest}\n      render={(props) =>\n        user ? (\n          user.role === 0 ? (\n            <Compo {...props} />\n          ) : (\n            <Redirect to={ROUTE_MACHINES} />\n          )\n        ) : (\n          <Redirect to={ROUTE_LOGIN} />\n        )\n      }\n    />\n  );\n}\n\nexport default SuperProtectedRoute;\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./redux/store/configureStore\";\nimport { initialState } from \"./redux/store/initialState\";\n\n// pages\nimport EmployeesListPageContainer from \"./pages/EmployeesListPage/EmployeesListPageContainer\";\nimport MachinePageContainer from \"./pages/MachinePage/MachinePageContainer\";\nimport EmployeePageContainer from \"./pages/EmployeePage/EmployeePageContainer\";\nimport FinishedTasksPageContainer from \"./pages/FinishedTasksPage/FinishedTasksPageContainer\";\nimport LoginPage from \"./pages/LoginPage/LoginPage\";\n\n// components\nimport Layout from \"./components/Layout/Layout\";\nimport ProtectedRoute from \"./components/ProtectedRoute/ProtectedRoute\";\nimport MachinesHomePageContainer from \"./pages/MachinesHomePage/MachinesHomePageContainer\";\nimport CreateTaskDialog from \"./components/CreateTaskDialog/CreateTaskDialogContainer\";\nimport {\n  ROUTE_ADMIN_PROFILE,\n  ROUTE_EMPLOYEES,\n  ROUTE_EMPLOYEES_ID,\n  ROUTE_FINISHEDTASKS,\n  ROUTE_LOGIN,\n  ROUTE_MACHINES,\n  ROUTE_MACHINES_NAME,\n} from \"./routes/routes\";\nimport AdminProfilePageContainer from \"./pages/AdminProfilePage/AdminProfilePageContainer\";\nimport SuperProtectedRoute from \"./components/SuperProtectedRoute/SuperProtectedRoute\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <>\n      <Provider store={configureStore(initialState)}>\n        <QueryClientProvider client={queryClient}>\n          <BrowserRouter basename=\"/corobcat\">\n            <Switch>\n              <Route path={ROUTE_LOGIN} exact>\n                <LoginPage />\n              </Route>\n              <Layout>\n                <ProtectedRoute\n                  path={ROUTE_EMPLOYEES}\n                  exact\n                  component={EmployeesListPageContainer}\n                />\n                <ProtectedRoute\n                  path={ROUTE_EMPLOYEES_ID}\n                  component={EmployeePageContainer}\n                />\n                <ProtectedRoute\n                  path={ROUTE_FINISHEDTASKS}\n                  component={FinishedTasksPageContainer}\n                />\n                <ProtectedRoute\n                  path={ROUTE_MACHINES}\n                  exact\n                  component={MachinesHomePageContainer}\n                />\n                <ProtectedRoute\n                  path={ROUTE_MACHINES_NAME}\n                  component={MachinePageContainer}\n                />\n                <SuperProtectedRoute\n                  path={ROUTE_ADMIN_PROFILE}\n                  component={AdminProfilePageContainer}\n                />\n              </Layout>\n            </Switch>\n          </BrowserRouter>\n\n          <CreateTaskDialog />\n        </QueryClientProvider>\n      </Provider>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}