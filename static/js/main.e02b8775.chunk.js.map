{"version":3,"sources":["redux/actions/actionTypes.ts","redux/reducers/index.ts","redux/reducers/authReducer.ts","redux/reducers/mainReducer.ts","redux/store/configureStore.ts","redux/store/initialState.ts","pages/EmployeesListPage/EmployeeCard/EmployeeCard.tsx","pages/EmployeesListPage/components/EmployeesListPage/EmployeesListPage.tsx","pages/EmployeesListPage/EmployeesListPageContainer.tsx","pages/EmployeesListPage/queries/useLoadEmployeesQuery.ts","components/MUITable/EnhancedTableHead/EnhancedTableHead.tsx","pages/MachinePage/components/FinishTaskButton/FinishTaskButton.tsx","mocks/tasksRepository.ts","redux/actions/mainActions.ts","pages/MachinePage/hooks/useFinishTaskDialog.tsx","styles/styleConstants.ts","components/MUITable/SCMuiTable.ts","components/MUITable/setTableRowBackgroundColorByPriority.ts","components/MUITable/EnhancedTasksTable/EnhancedTasksTable.tsx","utils/sortTasksByPriority.ts","pages/MachinePage/MachinePage.tsx","mocks/machineRepository.ts","pages/MachinePage/MachinePageContainer.tsx","pages/MachinePage/queries/useLoadMachineTasksQuery.ts","mocks/userRepository.ts","components/MUITable/EnhancedEmployeeTable/EnhancedEmployeeTable.tsx","components/UserInfoHeader/UserInfoHeader.tsx","pages/EmployeePage/EmployeePage.tsx","pages/EmployeePage/EmployeePageContainer.tsx","pages/EmployeePage/queries/useLoadEmployeeTasksQuery.ts","components/MUITable/EnhancedFinishedTasksTable/EnhancedFinishedTasksTable.tsx","pages/FinishedTasksPage/FinishedTasksPage.tsx","pages/FinishedTasksPage/queries/useLoadFinishedTasksQuery.ts","pages/FinishedTasksPage/FinishedTasksPageContainer.tsx","constants/errorMessages.ts","redux/actions/authActions.ts","pages/LoginPage/LoginPage.tsx","components/LeftMenu/LeftMenu.tsx","components/Layout/Layout.tsx","components/ProtectedRoute/ProtectedRoute.tsx","components/MUITable/LiteTasksTable/LiteTasksTable.tsx","pages/MachinesHomePage/SCMachinesHomePage.ts","pages/MachinesHomePage/MachinesHomePage.tsx","pages/MachinesHomePage/MachinesHomePageContainer.tsx","pages/MachinesHomePage/queries/useMachinesHomeQuery.ts","components/FormikComponents/FormikTextField.tsx","utils/getColorByPriority.ts","components/CreateTaskDialog/components/PriorityBadge/PriorityBadge.tsx","components/CreateTaskDialog/CreateTaskDialog.tsx","components/CreateTaskDialog/CreateTaskDialogContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FORCE_RENDER","LOGIN_LOADING","LOGIN_SUCCESS","LOGIN_ERROR","SET_CREATE_TASK_MODAL_ISOPEN","SET_CREATE_TASK_MODAL_SELECTED_MACHINE","combineReducers","authReducer","state","action","newState","type","loginLoading","loginError","payload","errorMessage","user","mainReducer","forceRender","createTaskModal","isOpen","selectedMachine","configureStore","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","thunk","JSON","parse","localStorage","getItem","EmployeeCard","props","employee","Card","className","CardContent","Typography","color","gutterBottom","employerCode","variant","component","name","CardActions","to","_id","StyledEmployeePageContainer","styled","div","StyledLoadingWrapper","EmployeesListPage","employees","isLoading","isError","CircularProgress","map","EmployeesListPageContainer","useQuery","a","data","users","EnhancedTasksTableHead","headCells","TableHead","TableRow","headCell","TableCell","align","padding","label","id","FinishTaskButton","taskId","openFinishedTaskDialog","programNumber","Button","disableElevation","onClick","tasks","jsonTasks","getTaskByMachineId","machineId","filter","task","status","getTaskByUserId","userId","setIsCreateTaskModalOpen","useFinishTaskDialog","dispatch","useDispatch","useState","isFinishTaskDialogOpen","setIsFinishTaskDialogOpen","finishTaskDialogState","setFinishTaskDialogState","handleFinishTaskDialogClose","FinishTaskDialog","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","taskIndex","findIndex","saveFinishedTask","autoFocus","handleFinishTaskDialogOpen","maxTableHeight","StyledTablePageContainer","StyledTableWrapper","setTableRowBackgroundColorByPriority","priority","bgColor","backgroundColor","EnhancedTaksTable","page","setPage","rowsPerPage","setRowsPerPage","Box","sx","width","TableContainer","Paper","maxHeight","Table","minWidth","size","stickyHeader","TableBody","colSpan","index","border","style","scope","taskNumber","material","thickness","duration","TablePagination","rowsPerPageOptions","count","length","onPageChange","event","newPage","onRowsPerPageChange","parseInt","target","value","sortTasksByPriority","sort","b","undefined","MachinePage","getMachineByName","machineName","machines","find","machine","MachinePageContainer","useSelector","refetchInterval","useLoadMachineTasksQuery","useParams","handleTaskClick","console","log","getUserById","getUserByCode","userCode","EnhnacedEmployeeTasksTable","React","UserInfoHeader","history","useHistory","IconButton","goBack","EmployeePage","EmployeePageContainer","employeeId","employeeTasks","useLoadEmployeeTasksQuery","EnhancedFinishedTasksTable","FinishedTasksPage","getMachineNameById","FinishedTasksPageContainer","finishedTasks","ERROR_MESSAGE_INVALID_CREDENTIALS","LoginPage","valueRef","useRef","warningMessage","setWarningMessage","handleLogInClick","current","setItem","stringify","response","message","useEffect","replace","Grid","elevation","Avatar","TextField","placeholder","fullWidth","required","inputRef","onKeyUp","key","LeftMenu","List","ListItem","disableGutters","ListItemButton","ListItemIcon","ListItemText","primary","disablePadding","pl","Layout","children","ProtectedRoute","path","Compo","exact","rest","render","StyledMachinesHomePageWrapper","StyledMachinesHomePageLoadingWrapper","StyledTableHeaderWrapper","MachinesHomePage","handleNewTaskClick","setCreateTaskModalSelectedMachine","machine1","machine2","MachinesHomePageContainer","activeTasks","machine1Tasks","machine2Tasks","useMachinesHomeQuery","StyledFormikTextFieldWrapper","FormikTextField","formikContext","useFormikContext","margin","autofocus","adornment","disabled","onChange","setFieldValue","values","helperText","errors","error","InputProps","endAdornment","InputAdornment","position","getColorByPriority","StyledPriorityBadgeWrapper","StyledPriorityBadge","StyledPriorityText","span","formatTextByPriority","text","PriorityBadge","background","StyledCreateTaskDialogWrapper","StyledFlexCenteredWrapper","CreateTaskDialog","handleClose","noValidate","textAlign","container","spacing","item","xs","CreateTaksDialogContainer","initialValues","correctionalFactor","validationSchema","Yup","integer","min","max","onSubmit","queryClient","QueryClient","App","store","QueryClientProvider","client","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e02b8775.chunk.js","sourcesContent":["export const FORCE_RENDER = \"FORCE_RENDER\";\n// LOGIN\nexport const LOGIN_LOADING = \"LOGIN_LOADING\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_ERROR = \"LOGIN_ERROR\";\n\n// Create task modal\nexport const SET_CREATE_TASK_MODAL_ISOPEN = \"SET_CREATE_TASK_MODAL_ISOPEN\";\nexport const SET_CREATE_TASK_MODAL_SELECTED_MACHINE =\n  \"SET_CREATE_TASK_MODAL_SELECTED_MACHINE\";\n","import { combineReducers } from \"redux\";\nimport mainReducer from \"./mainReducer\";\nimport authReducer from \"./authReducer\";\n\nexport default combineReducers({\n  authReducer,\n  mainReducer,\n});\n","import {\n  LOGIN_ERROR,\n  LOGIN_LOADING,\n  LOGIN_SUCCESS,\n} from \"../actions/actionTypes\";\n\nimport { TAction } from \"../../types/storeActionType\";\nimport { TAuthActions } from \"../actions/authActions\";\n\nexport default function authReducer(state: any = {}, action: TAuthActions) {\n  let newState = {};\n  switch (action.type) {\n    case LOGIN_LOADING:\n      newState = { ...state, loginLoading: true };\n      break;\n    case LOGIN_ERROR:\n      newState = {\n        ...state,\n        loginLoading: false,\n        loginError: action.payload.errorMessage,\n      };\n      break;\n    case LOGIN_SUCCESS:\n      newState = {\n        ...state,\n        loginLoading: false,\n        loginError: null,\n        user: action.payload.user,\n      };\n      break;\n    default:\n      newState = state;\n      break;\n  }\n  return newState;\n}\n","import {\n  FORCE_RENDER,\n  SET_CREATE_TASK_MODAL_ISOPEN,\n  SET_CREATE_TASK_MODAL_SELECTED_MACHINE,\n} from \"../actions/actionTypes\";\n\nimport { TAction } from \"../../types/storeActionType\";\n\nexport default function mainReducer(state: any = {}, action: TAction) {\n  let newState = {};\n  switch (action.type) {\n    case FORCE_RENDER:\n      newState = { ...state, forceRender: ++state.forceRender };\n      break;\n\n    // Create task modal\n    case SET_CREATE_TASK_MODAL_ISOPEN: {\n      newState = {\n        ...state,\n        createTaskModal: { ...state.createTaskModal, isOpen: action.payload },\n      };\n      break;\n    }\n    case SET_CREATE_TASK_MODAL_SELECTED_MACHINE: {\n      newState = {\n        ...state,\n        createTaskModal: {\n          ...state.createTaskModal,\n          selectedMachine: action.payload,\n        },\n      };\n      break;\n    }\n\n    default:\n      newState = state;\n      break;\n  }\n\n  return newState;\n}\n","import { applyMiddleware, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\nimport { TInitialState } from \"./initialState\";\n\nexport default function configureStore(initialState: TInitialState) {\n  const composeEnhancers =\n    (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\n  return createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunk))\n  );\n}\n","import { TUserResponse } from \"../../types/employeeTypes\";\n\nexport type TMainReducer = {\n  forceRender: number;\n  createTaskModal: {\n    isOpen: boolean;\n    selectedMachine: number;\n  };\n};\n\nexport type TAuthReducer = {\n  user: TUserResponse | null;\n  loginLoading?: boolean;\n  loginError?: string;\n};\n\nexport type TInitialState = {\n  mainReducer: TMainReducer;\n  authReducer: TAuthReducer;\n};\n\nexport const initialState: TInitialState = {\n  mainReducer: {\n    forceRender: 0,\n    createTaskModal: {\n      isOpen: false,\n      selectedMachine: 1,\n    },\n  },\n  authReducer: {\n    user: JSON.parse(localStorage.getItem(\"user\") as string) || null,\n  },\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// styles\nimport \"./EmployeeCard.scss\";\n\n// types\nimport { TUserResponse } from \"../../../types/employeeTypes\";\n\n// components\nimport { Card, CardActions, CardContent, Typography } from \"@mui/material\";\n\ninterface IEmployeeCardProps {\n  employee: TUserResponse;\n}\n\nfunction EmployeeCard(props: IEmployeeCardProps) {\n  const { employee } = props;\n  return (\n    <Card key={employee._id} className={`employee__card`}>\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          Código empleado: {employee.employerCode}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {employee.name}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Link to={`/employees/${employee._id}`} className=\"employee__link\">\n          Ver Empleado\n        </Link>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default EmployeeCard;\n","import styled from \"styled-components\";\n\nimport \"./EmployeesListPage.scss\";\n\n// types\nimport { TUserResponse } from \"../../../../types/employeeTypes\";\n\n// components\nimport EmployeeCard from \"../../EmployeeCard/EmployeeCard\";\nimport { CircularProgress } from \"@mui/material\";\n\nconst StyledEmployeePageContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: start;\n  align-items: flex-start;\n  width: 100%;\n  height: 100%;\n`;\n\nconst StyledLoadingWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n\n  font-size: 1.75rem;\n`;\n\ninterface IEmployeesCardProps {\n  employees: TUserResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n}\n\nfunction EmployeesListPage(props: IEmployeesCardProps) {\n  const { employees, isLoading, isError } = props;\n  return (\n    <>\n      <div className=\"employees-title\">Lista de empleados</div>\n      <StyledEmployeePageContainer className=\"employees-container\">\n        {isLoading ? (\n          <StyledLoadingWrapper>\n            <CircularProgress />\n            Cargando Datos...\n          </StyledLoadingWrapper>\n        ) : isError ? (\n          <></>\n        ) : (\n          employees &&\n          employees.map((employee) => {\n            return <EmployeeCard key={employee._id} employee={employee} />;\n          })\n        )}\n      </StyledEmployeePageContainer>\n    </>\n  );\n}\nexport default EmployeesListPage;\n","// query\nimport useLoadEmployeesQuery from \"./queries/useLoadEmployeesQuery\";\n// components\nimport EmployeesListPage from \"./components/EmployeesListPage/EmployeesListPage\";\n\nfunction EmployeesListPageContainer() {\n  // getEmployers\n  const { isLoading, isError, data } = useLoadEmployeesQuery();\n\n  return (\n    <>\n      <EmployeesListPage employees={data} isLoading={isLoading} isError={isError} />\n    </>\n  );\n}\n\nexport default EmployeesListPageContainer;\n","import { useQuery } from \"react-query\";\nimport users from \"../../../mocks/users.json\";\n\nexport default function useLoadEmployeesQuery() {\n  return useQuery([\"loadEmployers\"], async () => {\n    // TODO const {data} = await axios.get('/api/users')\n    const data = users;\n\n    return data;\n  });\n}\n","import { TableCell, TableHead, TableRow } from \"@mui/material\";\nimport { THeadCell } from \"../MUITableTypes\";\n\ninterface IEnhancedTableHeadProps {\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedTasksTableHead(props: IEnhancedTableHeadProps) {\n  const { headCells } = props;\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell key={headCell.id} align=\"center\" padding=\"normal\">\n            {headCell.label}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n","import { Button } from \"@mui/material\";\n\ninterface IFinishTaskButtonProps {\n  taskId: string;\n  programNumber: string;\n  openFinishedTaskDialog: (programNumber: string) => void;\n}\n\nfunction FinishTaskButton(props: IFinishTaskButtonProps) {\n  const { taskId, programNumber, openFinishedTaskDialog } = props;\n\n  function handleClick() {\n    openFinishedTaskDialog(taskId);\n  }\n\n  return (\n    <>\n      <Button variant=\"contained\" disableElevation onClick={handleClick}>\n        Finalizar\n      </Button>\n    </>\n  );\n}\n\nexport default FinishTaskButton;\n","import { TTaskResponse } from \"../types/taskTypes\";\nimport jsonTasks from \"./tasks.json\";\n\nconst tasks = [...jsonTasks];\n\nexport function getTaskByMachineId(machineId: string): TTaskResponse[] {\n  return tasks.filter(\n    (task: TTaskResponse) => task.machineId === machineId && task.status === 0\n  );\n}\n\nexport function getTaskByUserId(userId: string) {\n  return tasks.filter((task) => task.userId === userId);\n}\n\nexport function getActiveTasks() {\n  return tasks.filter((task: TTaskResponse) => task.status === 0);\n}\n\nexport function getFinishedTasks() {\n  return tasks.filter((task: TTaskResponse) => task.status === 1);\n}\n\nexport function saveFinishedTask(taskId: string) {\n  const taskIndex = tasks.findIndex((task) => task._id === taskId);\n\n  if (taskIndex || taskIndex === 0) {\n    tasks[taskIndex].status = 1;\n  }\n}\n","import {\n  FORCE_RENDER,\n  SET_CREATE_TASK_MODAL_ISOPEN,\n  SET_CREATE_TASK_MODAL_SELECTED_MACHINE,\n} from \"./actionTypes\";\n\nexport function forceRender() {\n  return {\n    type: FORCE_RENDER,\n  };\n}\n\nexport function setIsCreateTaskModalOpen(isOpen: boolean) {\n  return {\n    type: SET_CREATE_TASK_MODAL_ISOPEN,\n    payload: isOpen,\n  };\n}\n\nexport function setCreateTaskModalSelectedMachine(machine: number) {\n  return {\n    type: SET_CREATE_TASK_MODAL_SELECTED_MACHINE,\n    payload: machine,\n  };\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@mui/material\";\n\nimport React, { useState } from \"react\";\nimport { saveFinishedTask } from \"../../../mocks/tasksRepository\";\nimport { useDispatch } from \"react-redux\";\nimport { forceRender } from \"../../../redux/actions/mainActions\";\n\nconst initialState = {\n  taskId: \"\",\n};\n\nexport default function useFinishTaskDialog() {\n  const dispatch = useDispatch();\n\n  const [isFinishTaskDialogOpen, setIsFinishTaskDialogOpen] = useState(false);\n\n  const [finishTaskDialogState, setFinishTaskDialogState] =\n    useState(initialState);\n\n  function handleFinishTaskDialogOpen(taskId: string) {\n    setIsFinishTaskDialogOpen(true);\n    setFinishTaskDialogState({ ...finishTaskDialogState, taskId });\n  }\n\n  function handleFinishTaskDialogClose() {\n    setIsFinishTaskDialogOpen(false);\n  }\n\n  function handleAccept() {\n    saveFinishedTask(finishTaskDialogState.taskId);\n    setIsFinishTaskDialogOpen(false);\n    dispatch(forceRender());\n  }\n\n  const FinishTaskDialog = (\n    <Dialog\n      open={isFinishTaskDialogOpen}\n      onClose={handleFinishTaskDialogClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Confirmación finalizar programa\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n           Estás seguro de que deseas finalizar el programa?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleFinishTaskDialogClose}>Cancelar</Button>\n        <Button onClick={handleAccept} autoFocus variant=\"contained\">\n          Finalizar programa\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n\n  return {\n    FinishTaskDialog,\n    handleFinishTaskDialogOpen,\n    handleFinishTaskDialogClose,\n  };\n}\n","export const maxWidth = 1200;\nexport const maxTableHeight = \"78vh\";\n","import styled from \"styled-components\";\n\nimport { maxWidth } from \"../../styles/styleConstants\";\n\nexport const StyledTablePageContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nexport const StyledTableWrapper = styled.div`\n  width: 100%;\n  max-width: ${maxWidth}px;\n\n  .MuiTableCell-head {\n    color: #002740;\n    font-weight: 700;\n    background-color: #f5f5f5;\n    border-bottom: 2px solid rgba(150, 150, 150, 1);\n    line-height: 1.25;\n    font-size: 1.1rem;\n  }\n\n  .MuiTableCell-body {\n    border-bottom: 1px solid rgba(255, 255, 255, 1);\n    font-weight: 500;\n    font-size: 1.1rem;\n  }\n\n  .MuiTablePagination-root {\n    color: white;\n  }\n\n  .MuiSvgIcon-root {\n    color: white;\n  }\n`;\n\nexport const StyledLoadingWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n\n  font-size: 1.75rem;\n\n  .MuiCircularProgress-root {\n    margin-right: 1rem;\n  }\n`;\n","export function setTableRowBackgroundColorByPriority(priority: number) {\n  let bgColor = \"\";\n  if (priority > 0 && priority <= 2) {\n    bgColor = \"rgba(93, 172, 245, 0.5)\";\n  }\n  if (priority > 2 && priority <= 4) {\n    bgColor = \"rgba(1, 187, 63, 0.5)\";\n  }\n  if (priority > 4 && priority <= 8) {\n    bgColor = \"rgba(255, 163, 15, 0.5)\";\n  }\n  if (priority > 8 && priority <= 10) {\n    bgColor = \"rgba(246, 91, 92, 0.5)\";\n  }\n\n  return {\n    backgroundColor: bgColor,\n  };\n}\n","import {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport FinishTaskButton from \"../../../pages/MachinePage/components/FinishTaskButton/FinishTaskButton\";\nimport useFinishTaskDialog from \"../../../pages/MachinePage/hooks/useFinishTaskDialog\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTablePageContainer,\n  StyledTableWrapper,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\n\ninterface IEnhancedTableProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedTaksTable(props: IEnhancedTableProps) {\n  const { tasks, headCells, isLoading, isError } = props;\n\n  const {\n    FinishTaskDialog,\n    handleFinishTaskDialogOpen,\n    handleFinishTaskDialogClose,\n  } = useFinishTaskDialog();\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table\n              sx={{ minWidth: 750 }}\n              aria-labelledby=\"tableTitle\"\n              size=\"medium\"\n              stickyHeader\n            >\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={999}>\n                      <StyledLoadingWrapper>\n                        <CircularProgress />\n                        Cargando Datos...\n                      </StyledLoadingWrapper>\n                    </TableCell>\n                  </TableRow>\n                ) : isError ? (\n                  <></>\n                ) : (\n                  tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">{task.material}</TableCell>\n                        <TableCell align=\"center\">{task.thickness}</TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.employerCode}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <FinishTaskButton\n                            taskId={task._id}\n                            programNumber={task.programNumber}\n                            openFinishedTaskDialog={handleFinishTaskDialogOpen}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {!isLoading && tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n      {FinishTaskDialog}\n    </StyledTablePageContainer>\n  );\n}\n","import { TTaskResponse } from \"../types/taskTypes\";\n\nexport function sortTasksByPriority(tasks: TTaskResponse[] | undefined) {\n  return tasks ? tasks.sort((a, b) => b.priority - a.priority) : undefined;\n}\n","import EnhancedTaksTable from \"../../components/MUITable/EnhancedTasksTable/EnhancedTasksTable\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\nimport { TTaskResponse } from \"../../types/taskTypes\";\n\nimport { sortTasksByPriority } from \"../../utils/sortTasksByPriority\";\n\ninterface IMachinePageProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  handleTaskClick?: (taskId: string) => void;\n}\n\nfunction MachinePage(props: IMachinePageProps) {\n  const { tasks, isLoading, isError } = props;\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº Tarea\",\n    },\n    {\n      id: \"material\",\n      label: \"Material\",\n    },\n    {\n      id: \"thickness\",\n      label: \"Espesor\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"employerCode\",\n      label: \"Técnico\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n    {\n      id: \"actions\",\n      label: \"Acciones\",\n    },\n  ];\n\n  return (\n    <>\n      <EnhancedTaksTable\n        headCells={headCells}\n        tasks={sortTasksByPriority(tasks)}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default MachinePage;\n","import machines from \"./machines.json\";\n\nexport function getMachineByName(machineName: string) {\n  return machines.find((machine) => machine.name === machineName);\n}\n\nexport function getMachines() {\n  return machines;\n}\n","import { useParams } from \"react-router-dom\";\nimport MachinePage from \"./MachinePage\";\nimport useLoadMachineTasksQuery from \"./queries/useLoadMachineTasksQuery\";\nimport { useSelector } from \"react-redux\";\n\ninterface IMachinePageContainerParams {\n  machineName: string;\n}\n\nfunction MachinePageContainer() {\n  const { forceRender } = useSelector((state: any) => state.mainReducer);\n\n  const { machineName } = useParams<IMachinePageContainerParams>();\n\n  const { isLoading, isError, data } = useLoadMachineTasksQuery(\n    machineName,\n    forceRender\n  );\n\n  function handleTaskClick(taskId: string) {\n    console.log(\"hola\");\n  }\n\n  return (\n    <>\n      <MachinePage\n        tasks={data}\n        handleTaskClick={handleTaskClick}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default MachinePageContainer;\n","import { useQuery } from \"react-query\";\n\n// Mocks\nimport { getTaskByMachineId } from \"../../../mocks/tasksRepository\";\nimport { getMachineByName } from \"../../../mocks/machineRepository\";\n\nexport default function useLoadMachineTasksQuery(\n  machineName: string,\n  forceRender: number\n) {\n  // el useQuery reb un array amb el nom de la \"action\" i les variables que si canvien torna a executar\n  return useQuery(\n    [\"loadMachineTasks\", machineName, forceRender],\n    async () => {\n      // TODO: const machine = await axios.get('/api/machine/name/${machineName}')\n      const machine = getMachineByName(machineName);\n\n      // TODO: const {data} = await axios.get('/api/tasks/${machineName}')\n      if (machine) {\n        const data = getTaskByMachineId(machine._id);\n\n        return data;\n      }\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import { TUserResponse } from \"../types/employeeTypes\";\nimport data from \"./users.json\";\nconst users: TUserResponse[] = data;\n\nexport function getUserById(userId: string) {\n  const user = users.find((user) => {\n    return user._id === userId;\n  });\n  return user;\n}\n\nexport function getUserByCode(userCode: string) {\n  const user = users.find((user) => {\n    return user.employerCode === userCode;\n  });\n  return user;\n}\n","import {\n  Box,\n  CircularProgress,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n  Paper,\n} from \"@mui/material\";\nimport React from \"react\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTablePageContainer,\n  StyledTableWrapper,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\n\ninterface IEnhnacedEmployeeTasksTableProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  headCells: THeadCell[];\n}\n\nexport default function EnhnacedEmployeeTasksTable(\n  props: IEnhnacedEmployeeTasksTableProps\n) {\n  const { tasks, headCells, isLoading, isError } = props;\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table\n              sx={{ minWidth: 750, maxHeight: 250 }}\n              aria-labelledby=\"tableTitle\"\n              size=\"medium\"\n              stickyHeader\n            >\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={999}>\n                      <StyledLoadingWrapper>\n                        <CircularProgress />\n                        Cargando Datos...\n                      </StyledLoadingWrapper>\n                    </TableCell>\n                  </TableRow>\n                ) : isError ? (\n                  <></>\n                ) : (\n                  tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">{task.material}</TableCell>\n                        <TableCell align=\"center\">{task.thickness}</TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {!isLoading && tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n    </StyledTablePageContainer>\n  );\n}\n","import React from \"react\";\nimport { TUserResponse } from \"../../types/employeeTypes\";\nimport \"./UserInfoHeader.scss\";\nimport { useHistory } from \"react-router-dom\";\n\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport IconButton from \"@mui/material/IconButton\";\n\ninterface IUserInfoHeaderProps {\n  employee: TUserResponse | undefined;\n}\n\nfunction UserInfoHeader(props: IUserInfoHeaderProps) {\n  const { employee } = props;\n  const history = useHistory();\n\n  return (\n    <div className=\"user-data-table-container\">\n    <div className=\"user-data-table\">\n      <IconButton onClick={() => history.goBack()} aria-label=\"goBack\">\n        <ArrowBackIcon />\n      </IconButton>\n      <p className=\"user-data-table__info--name\">{employee?.name}</p>\n      <p className=\"user-data-table__info\">{employee?.employerCode}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default UserInfoHeader;\n","import React from \"react\";\n\n// types\nimport { TTaskResponse } from \"../../types/taskTypes\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\nimport { TUserResponse } from \"../../types/employeeTypes\";\n\n// components\nimport EnhancedEmployeeTable from '../../components/MUITable/EnhancedEmployeeTable/EnhancedEmployeeTable';\nimport UserInfoHeader from \"../../components/UserInfoHeader/UserInfoHeader\";\n\ninterface IEmployeePage {\n  tasks: TTaskResponse[] | undefined;\n  employee: TUserResponse | undefined;\n  isLoading: boolean;\n  isError: boolean;\n}\n\nfunction EmployeePage(props: IEmployeePage) {\n  const { tasks, isLoading, isError,employee } = props;\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº tarea\",\n    },\n    {\n      id: \"material\",\n      label: \"Material\",\n    },\n    {\n      id: \"thickness\",\n      label: \"Espesor\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n  ];\n\n  return (\n    <>\n      <UserInfoHeader employee={employee} />\n      <EnhancedEmployeeTable\n        headCells={headCells}\n        tasks={tasks}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default EmployeePage;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n// queries\nimport useLoadEmployeeTasksQuery from './queries/useLoadEmployeeTasksQuery';\n\n// components\nimport EmployeePage from './EmployeePage';\n\ninterface IEmployeePageContainerParams {\n  employeeId: string;\n}\n\nfunction EmployeePageContainer() {\n    const {employeeId} = useParams<IEmployeePageContainerParams>();\n\n  const { isLoading, isError, data } = useLoadEmployeeTasksQuery(employeeId); \n\n    \n  return (\n    <>\n      <EmployeePage \n        tasks={data?.employeeTasks}\n        employee={data?.employee}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default EmployeePageContainer;\n","import { useQuery } from \"react-query\";\n\n// mocks\nimport { getTaskByUserId } from \"../../../mocks/tasksRepository\";\nimport { getUserById } from \"../../../mocks/userRepository\";\n\nexport default function useLoadEmployeeTasksQuery(employeeId: string) {\n  return useQuery(\n    [\"loadEmployeeTasks\", employeeId],\n    async () => {\n      // getEmployeeById\n      const employee = getUserById(employeeId);\n      const employeeTasks = getTaskByUserId(employeeId);\n      return { employeeTasks, employee };\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport React from \"react\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\nimport { TEnhancedTaskResponse } from \"../../../types/taskTypes\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTablePageContainer,\n  StyledTableWrapper,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\n\ninterface IEnhancedTableProps {\n  tasks: TEnhancedTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedFinishedTasksTable(props: IEnhancedTableProps) {\n  const { tasks, headCells, isLoading, isError } = props;\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table\n              sx={{ minWidth: 750 }}\n              aria-labelledby=\"tableTitle\"\n              size=\"medium\"\n              stickyHeader\n            >\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={999}>\n                      <StyledLoadingWrapper>\n                        <CircularProgress />\n                        Cargando Datos...\n                      </StyledLoadingWrapper>\n                    </TableCell>\n                  </TableRow>\n                ) : isError ? (\n                  <></>\n                ) : (\n                  tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">{task.machineName}</TableCell>\n                        <TableCell align=\"center\">{task.material}</TableCell>\n                        <TableCell align=\"center\">{task.thickness}</TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.employerCode}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {!isLoading && tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n    </StyledTablePageContainer>\n  );\n}\n","import EnhancedFinishedTasksTable from \"../../components/MUITable/EnhancedFinishedTasksTable/EnhancedFinishedTasksTable\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\nimport { TEnhancedTaskResponse } from \"../../types/taskTypes\";\n\ninterface IFinishedTasksPageProps {\n  tasks: TEnhancedTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  handleTaskClick?: (taskId: string) => void;\n}\n\nfunction FinishedTasksPage(props: IFinishedTasksPageProps) {\n  const { tasks, isLoading, isError } = props;\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº Tarea\",\n    },\n    {\n      id: \"machine\",\n      label: \"Máquina\",\n    },\n    {\n      id: \"material\",\n      label: \"Material\",\n    },\n    {\n      id: \"thickness\",\n      label: \"Espesor\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"employerCode\",\n      label: \"Técnico\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n  ];\n\n  return (\n    <>\n      <EnhancedFinishedTasksTable\n        headCells={headCells}\n        tasks={tasks}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default FinishedTasksPage;\n","import { useQuery } from \"react-query\";\nimport { getMachines } from \"../../../mocks/machineRepository\";\n\nimport { getFinishedTasks } from \"../../../mocks/tasksRepository\";\nimport { TMachineResponse } from \"../../../types/machineTypes\";\n\nfunction getMachineNameById(machines: TMachineResponse[], machineId: string) {\n  const machine = machines.find((machine) => machine._id === machineId);\n\n  return machine ? machine.name : \"\";\n}\n\nexport default function useFinisedTasksQuery() {\n  // el useQuery reb un array amb el nom de la \"action\" i les variables que si canvien torna a executar\n  return useQuery(\n    [\"loadFinishedTasks\"],\n    async () => {\n      // TODO: const {data: tasks} = await axios.get('/api/tasks/finished}')\n      const tasks = getFinishedTasks();\n\n      // TODO: const { data: machines } = await axios.get(\"/api/machines\");\n      const machines = getMachines();\n\n      const finishedTasks = tasks.map((task) => {\n        return {\n          ...task,\n          machineName: getMachineNameById(machines, task.machineId),\n        };\n      });\n\n      return finishedTasks;\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import FinishedTasksPage from \"./FinishedTasksPage\";\nimport useFinisedTasksQuery from \"./queries/useLoadFinishedTasksQuery\";\n\nfunction FinishedTasksPageContainer() {\n  const { isLoading, isError, data } = useFinisedTasksQuery();\n\n  function handleTaskClick(taskId: string) {\n    console.log(\"hola\");\n  }\n\n  return (\n    <>\n      <FinishedTasksPage tasks={data} isLoading={isLoading} isError={isError} />\n    </>\n  );\n}\n\nexport default FinishedTasksPageContainer;\n","export const ERROR_MESSAGE_INVALID_CREDENTIALS = (userCode: string) =>\n  `No existe un empleado con el código de empleado: ${userCode}.`;\n","import { Dispatch } from \"redux\";\nimport { LOGIN_ERROR, LOGIN_SUCCESS, LOGIN_LOADING } from \"./actionTypes\";\n\n// mocks\nimport { getUserByCode } from \"../../mocks/userRepository\";\nimport { TUserResponse } from \"../../types/employeeTypes\";\nimport { ERROR_MESSAGE_INVALID_CREDENTIALS } from \"../../constants/errorMessages\";\n\ntype TLoginLoadingAction = {\n  type: typeof LOGIN_LOADING;\n};\n\nexport type TAuthActions =\n  | TLoginLoadingAction\n  | {\n      type: typeof LOGIN_SUCCESS;\n      payload: { user: TUserResponse };\n    }\n  | {\n      type: typeof LOGIN_ERROR;\n      payload: { errorMessage: string };\n    };\n\nexport function loginLoading() {\n  return {\n    type: LOGIN_LOADING,\n  };\n}\n\nexport function loginSuccess(user: TUserResponse | undefined) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: { user },\n  };\n}\n\nexport function loginError(errorMessage: string) {\n  return {\n    type: LOGIN_ERROR,\n    payload: { errorMessage },\n  };\n}\n\nexport function login(userCode: string) {\n  return async (dispatch: Dispatch) => {\n    try {\n      dispatch(loginLoading());\n      // TODO: const {data} = await axios.get('/api/user/employerCode/${userCode')\n      const data = await getUserByCode(userCode);\n\n      if (data) {\n        localStorage.setItem(\"user\", JSON.stringify(data));\n        dispatch(loginSuccess(data));\n      } else {\n        dispatch(loginError(ERROR_MESSAGE_INVALID_CREDENTIALS(userCode)));\n      }\n    } catch (error: any) {\n      if (error.response) {\n        dispatch(loginError(error.response.message));\n      } else {\n        dispatch(loginError(error.message));\n      }\n    }\n  };\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\n// actions\nimport { login } from \"../../redux/actions/authActions\";\n\n// styles\nimport styled from \"styled-components\";\nimport \"./LoginPage.scss\";\n\nimport {\n  Grid,\n  Paper,\n  Avatar,\n  TextField,\n  CircularProgress,\n  Button,\n} from \"@mui/material\";\n\nimport LoginIcon from \"@mui/icons-material/Login\";\nimport { TInitialState } from \"../../redux/store/initialState\";\n\nconst StyledLoadingWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n\n  .MuiPaper-root {\n    padding: 3rem 1.25rem;\n    width: 17rem;\n  }\n\n  .MuiGrid-root {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n  .MuiAvatar-root {\n    margin-bottom: 1rem;\n    background-color: #1bbd7e;\n  }\n  .MuiFormControl-root {\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n  }\n  .MuiButton-root {\n    margin-top: 1rem;\n  }\n`;\n\nfunction LoginPage() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const { loginLoading, loginError, user } = useSelector(\n    (state: TInitialState) => state.authReducer\n  );\n\n  const valueRef = useRef<HTMLInputElement>(null);\n  const [warningMessage, setWarningMessage] = useState(\"\");\n\n  useEffect(() => {\n    if (user) {\n      history.replace(\"/machines\");\n    }\n    if (loginError) {\n      setWarningMessage(loginError);\n    }\n  }, [user, loginError]);\n\n  function handleLogInClick() {\n    if (valueRef.current) {\n      dispatch(login(valueRef.current.value));\n    }\n  }\n\n  function handleKeyUp(event: React.KeyboardEvent) {\n    if (event.key === \"Enter\") {\n      handleLogInClick();\n    }\n  }\n\n  return (\n    <StyledLoadingWrapper>\n      <Grid>\n        <Paper elevation={10}>\n          <Grid>\n            <Avatar>\n              <LoginIcon />\n            </Avatar>\n            <h2>Login</h2>\n          </Grid>\n          <TextField\n            label=\"Código de empleado\"\n            placeholder=\"Entra el código de empleado\"\n            variant=\"standard\"\n            fullWidth\n            required\n            inputRef={valueRef}\n            onKeyUp={handleKeyUp}\n          />\n          {loginLoading && <CircularProgress />}\n          <small className=\"form__warningMessage\">{warningMessage}</small>\n\n          <Button variant=\"contained\" fullWidth onClick={handleLogInClick}>\n            login\n          </Button>\n        </Paper>\n      </Grid>\n    </StyledLoadingWrapper>\n  );\n}\n\nexport default LoginPage;\n","import { List, ListItem, ListItemIcon, ListItemText } from \"@mui/material\";\n\nimport AssignmentTurnedInIcon from \"@mui/icons-material/AssignmentTurnedIn\";\nimport PrecisionManufacturingIcon from \"@mui/icons-material/PrecisionManufacturing\";\nimport PeopleIcon from \"@mui/icons-material/People\";\nimport StoreIcon from \"@mui/icons-material/Store\";\nimport { ListItemButton } from \"@mui/material\";\nimport Avatar from \"@mui/material/Avatar\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./LeftMenu.scss\";\n\nfunction LeftMenu() {\n  return (\n    <div className=\"left-menu\">\n      <div className=\"left-menu__header\">\n        <Avatar>CRC</Avatar>\n      </div>\n      <nav>\n        <List>\n          <ListItem disableGutters>\n            <NavLink to=\"/machines\" className=\"left-menu__nav-item\">\n              <ListItemButton>\n                <ListItemIcon>\n                  <StoreIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Maquinas\" />\n              </ListItemButton>\n            </NavLink>\n          </ListItem>\n          <List component=\"div\" disablePadding>\n            <NavLink to=\"/machines/maquina1\" className=\"left-menu__nav-item\">\n              <ListItemButton sx={{ pl: 5 }}>\n                <ListItemIcon>\n                  <PrecisionManufacturingIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Maquina 1\" />\n              </ListItemButton>\n            </NavLink>\n            <NavLink to=\"/machines/maquina2\" className=\"left-menu__nav-item\">\n              <ListItemButton sx={{ pl: 5 }}>\n                <ListItemIcon>\n                  <PrecisionManufacturingIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Maquina 2\" />\n              </ListItemButton>\n            </NavLink>\n          </List>\n\n          <ListItem disableGutters>\n            <NavLink to=\"/employees\" className=\"left-menu__nav-item\">\n              <ListItemButton>\n                <ListItemIcon>\n                  <PeopleIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Lista de técnicos\" />\n              </ListItemButton>\n            </NavLink>\n          </ListItem>\n\n          <ListItem disableGutters>\n            <NavLink to=\"/finishedTasks\" className=\"left-menu__nav-item\">\n              <ListItemButton>\n                <ListItemIcon>\n                  <AssignmentTurnedInIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Programas Terminados\" />\n              </ListItemButton>\n            </NavLink>\n          </ListItem>\n        </List>\n      </nav>\n    </div>\n  );\n}\n\nexport default LeftMenu;\n","import React from \"react\";\nimport LeftMenu from \"../LeftMenu/LeftMenu\";\nimport \"./Layout.scss\";\n\ninterface ILayoutProps {\n  children: React.ReactNode;\n}\n\nfunction Layout(props: ILayoutProps) {\n  const { children } = props;\n\n  return (\n    <div className=\"layout\">\n      <div className=\"layout__menu-container\">\n        <LeftMenu />\n      </div>\n      <div className=\"layout__content\">{children}</div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import { useSelector } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { TInitialState } from \"../../redux/store/initialState\";\n\ninterface IProtectedRouteProps {\n  path: string;\n  component: any;\n  exact?: boolean;\n}\n\nfunction ProtectedRoute(props: IProtectedRouteProps) {\n  const { path, component: Compo, exact, ...rest } = props;\n  const user = useSelector((state: TInitialState) => state.authReducer.user);\n\n  return (\n    <Route\n      path={path}\n      exact={exact}\n      {...rest}\n      render={(props) => (user ? <Compo {...props} /> : <Redirect to=\"/\" />)}\n    />\n  );\n}\n\nexport default ProtectedRoute;\n","import {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport FinishTaskButton from \"../../../pages/MachinePage/components/FinishTaskButton/FinishTaskButton\";\nimport useFinishTaskDialog from \"../../../pages/MachinePage/hooks/useFinishTaskDialog\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTableWrapper,\n  StyledTablePageContainer,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\n\ninterface IEnhancedTableProps {\n  tasks: TTaskResponse[] | undefined;\n\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedTaksTable(props: IEnhancedTableProps) {\n  const { tasks, headCells } = props;\n\n  const {\n    FinishTaskDialog,\n    handleFinishTaskDialogOpen,\n    handleFinishTaskDialogClose,\n  } = useFinishTaskDialog();\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table aria-labelledby=\"tableTitle\" size=\"medium\" stickyHeader>\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <FinishTaskButton\n                            taskId={task._id}\n                            programNumber={task.programNumber}\n                            openFinishedTaskDialog={handleFinishTaskDialogOpen}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n      {FinishTaskDialog}\n    </StyledTablePageContainer>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const StyledMachinesHomePageWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: flex-start;\n`;\n\nexport const StyledMachinesHomePageLoadingWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding-top: 1.5rem;\n  font-size: 1.5rem;\n  color: white;\n\n  .MuiCircularProgress-root {\n    margin-right: 1rem;\n  }\n`;\n\nexport const StyledTableWrapper = styled.div`\n  width: 49%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const StyledTableHeaderWrapper = styled.div`\n  padding: 1rem 0;\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n\n  .flex-grow {\n    flex: 1;\n  }\n\n  .machines-home-page__machine-title {\n    font-size: 1.75rem;\n    color: white;\n  }\n\n  .machines__header-actions {\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n","import { CircularProgress, Button } from \"@mui/material\";\nimport LiteTasksTable from \"../../components/MUITable/LiteTasksTable/LiteTasksTable\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\n\nimport { useDispatch } from \"react-redux\";\nimport { sortTasksByPriority } from \"../../utils/sortTasksByPriority\";\nimport { TMachinesHomeTasks } from \"./MachinesHomePageTypes\";\nimport {\n  StyledMachinesHomePageLoadingWrapper,\n  StyledMachinesHomePageWrapper,\n  StyledTableHeaderWrapper,\n  StyledTableWrapper,\n} from \"./SCMachinesHomePage\";\nimport {\n  setCreateTaskModalSelectedMachine,\n  setIsCreateTaskModalOpen,\n} from \"../../redux/actions/mainActions\";\n\ninterface IMachinePageProps {\n  tasks: TMachinesHomeTasks | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  handleTaskClick?: (taskId: string) => void;\n}\n\nfunction MachinesHomePage(props: IMachinePageProps) {\n  const { tasks, isLoading, isError } = props;\n\n  const dispatch = useDispatch();\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº Tarea\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n    {\n      id: \"actions\",\n      label: \"Acciones\",\n    },\n  ];\n\n  function handleNewTaskClick(machine: number) {\n    dispatch(setCreateTaskModalSelectedMachine(machine));\n    dispatch(setIsCreateTaskModalOpen(true));\n  }\n\n  return (\n    <>\n      {isLoading && (\n        <StyledMachinesHomePageLoadingWrapper>\n          <CircularProgress />\n          Cargando Datos...\n        </StyledMachinesHomePageLoadingWrapper>\n      )}\n      {tasks && (\n        <StyledMachinesHomePageWrapper>\n          <StyledTableWrapper>\n            <StyledTableHeaderWrapper>\n              <div className=\"flex-grow\" />\n              <h3 className=\"machines-home-page__machine-title\">Máquina 1</h3>\n              <div className=\"flex-grow machines__header-actions\">\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => {\n                    handleNewTaskClick(1);\n                  }}\n                >\n                  Nuevo programa\n                </Button>\n              </div>\n            </StyledTableHeaderWrapper>\n            <LiteTasksTable\n              tasks={sortTasksByPriority(tasks.machine1)}\n              headCells={headCells}\n            />\n          </StyledTableWrapper>\n          <StyledTableWrapper>\n            <StyledTableHeaderWrapper>\n              <div className=\"flex-grow\" />\n              <h3 className=\"machines-home-page__machine-title\">Máquina 2</h3>\n              <div className=\"flex-grow machines__header-actions\">\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => {\n                    handleNewTaskClick(2);\n                  }}\n                >\n                  Nuevo programa\n                </Button>\n              </div>\n            </StyledTableHeaderWrapper>\n            <LiteTasksTable\n              tasks={sortTasksByPriority(tasks.machine2)}\n              headCells={headCells}\n            />\n          </StyledTableWrapper>\n        </StyledMachinesHomePageWrapper>\n      )}\n    </>\n  );\n}\n\nexport default MachinesHomePage;\n","import { useParams } from \"react-router-dom\";\n\nimport { useSelector } from \"react-redux\";\n\nimport MachinesHomePage from \"./MachinesHomePage\";\nimport useMachinesHomeQuery from \"./queries/useMachinesHomeQuery\";\n\nfunction MachinesHomePageContainer() {\n  const { forceRender } = useSelector((state: any) => state.mainReducer);\n\n  const { isLoading, isError, data } = useMachinesHomeQuery(forceRender);\n\n  function handleTaskClick(taskId: string) {\n    console.log(\"hola\");\n  }\n\n  return (\n    <>\n      <MachinesHomePage\n        tasks={data}\n        handleTaskClick={handleTaskClick}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default MachinesHomePageContainer;\n","import { useQuery } from \"react-query\";\n\n// Mocks\nimport {\n  getActiveTasks,\n  getTaskByMachineId,\n} from \"../../../mocks/tasksRepository\";\nimport { getMachineByName } from \"../../../mocks/machineRepository\";\n\nexport default function useLoadMachineTasksQuery(forceRender: number) {\n  // el useQuery reb un array amb el nom de la \"action\" i les variables que si canvien torna a executar\n  return useQuery(\n    [\"loadMachinesHomeTasks\", forceRender],\n    async () => {\n      // TODO: const {data: activeTasks} = await axios.get(/api/tasks/active)\n\n      const activeTasks = getActiveTasks();\n\n      const machine1Tasks = activeTasks.filter(\n        (task) => task.machineId === \"asd5as5d7a8ad8a\"\n      );\n\n      const machine2Tasks = activeTasks.filter(\n        (task) => task.machineId === \"f87gh6fgh87fg89\"\n      );\n\n      return {\n        machine1: machine1Tasks,\n        machine2: machine2Tasks,\n      };\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import { InputAdornment, TextField } from \"@mui/material\";\nimport React from \"react\";\nimport { useFormikContext } from \"formik\";\n\nimport styled from \"styled-components\";\n\nconst StyledFormikTextFieldWrapper = styled.div`\n  input {\n    padding: 0.75rem 0.5rem;\n  }\n`;\n\ninterface IFormikTextFieldProps {\n  name: string;\n  type?: string;\n  label?: string;\n  placeholder?: string;\n  variant?: \"outlined\" | \"filled\" | \"standard\";\n  size?: \"medium\" | \"small\";\n  margin?: \"normal\" | \"dense\";\n  autofocus?: boolean;\n  fullWidth?: boolean;\n  adornment?: string;\n  disabled?: boolean;\n}\n\nfunction FormikTextField(props: IFormikTextFieldProps) {\n  const formikContext = useFormikContext<any>();\n\n  const {\n    name,\n    label,\n    placeholder,\n    variant = \"outlined\",\n    size = \"medium\",\n    type = \"text\",\n    margin = \"dense\",\n    autofocus = false,\n    fullWidth = false,\n    adornment = null,\n    disabled = false,\n  } = props;\n\n  function handleChange({ target }: React.ChangeEvent<HTMLInputElement>) {\n    formikContext.setFieldValue(name, target.value);\n  }\n\n  return (\n    <StyledFormikTextFieldWrapper>\n      <TextField\n        variant={variant}\n        name={name}\n        label={label}\n        type={type}\n        placeholder={placeholder}\n        size={size}\n        onChange={handleChange}\n        value={formikContext.values[name]}\n        autoFocus={autofocus}\n        fullWidth={fullWidth}\n        margin={margin}\n        helperText={formikContext.errors[name]}\n        error={!!formikContext.errors[name]}\n        disabled={disabled}\n        InputProps={{\n          endAdornment: adornment && (\n            <InputAdornment position=\"end\">{adornment}</InputAdornment>\n          ),\n        }}\n      />\n    </StyledFormikTextFieldWrapper>\n  );\n}\n\nexport default FormikTextField;\n","export default function getColorByPriority(priority: number) {\n  let bgColor = \"\";\n  if (priority > 0 && priority <= 2) {\n    bgColor = \"rgba(93, 172, 245, 0.5)\";\n  }\n  if (priority > 2 && priority <= 4) {\n    bgColor = \"rgba(1, 187, 63, 0.5)\";\n  }\n  if (priority > 4 && priority <= 8) {\n    bgColor = \"rgba(255, 163, 15, 0.5)\";\n  }\n  if (priority > 8 && priority <= 10) {\n    bgColor = \"rgba(246, 91, 92, 0.5)\";\n  }\n\n  return bgColor;\n}\n","import styled from \"styled-components\";\nimport getColorByPriority from \"../../../../utils/getColorByPriority\";\n\nconst StyledPriorityBadgeWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst StyledPriorityBadge = styled.div`\n  width: 1.75rem;\n  height: 1.75rem;\n  border-radius: 50%;\n  margin-right: 0.5rem;\n`;\n\nconst StyledPriorityText = styled.span`\n  font-size: 1rem;\n  font-weight: 600;\n`;\n\nfunction formatTextByPriority(priority: number) {\n  let text = \"\";\n\n  if (priority > 0 && priority <= 2) {\n    text = \"Normal\";\n  }\n  if (priority > 2 && priority <= 4) {\n    text = \"Normal\";\n  }\n  if (priority > 4 && priority <= 8) {\n    text = \"Urgencia 48h\";\n  }\n  if (priority > 8 && priority <= 10) {\n    text = \"Urgencia 24h\";\n  }\n\n  return text;\n}\n\ninterface IPriorityBadge {\n  priority: number;\n}\nfunction PriorityBadge(props: IPriorityBadge) {\n  const { priority } = props;\n  return (\n    <StyledPriorityBadgeWrapper>\n      <StyledPriorityBadge\n        style={{\n          background: getColorByPriority(priority),\n        }}\n      />\n      <StyledPriorityText>{formatTextByPriority(priority)}</StyledPriorityText>\n    </StyledPriorityBadgeWrapper>\n  );\n}\n\nexport default PriorityBadge;\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Grid,\n  TextField,\n} from \"@mui/material\";\nimport { Form } from \"formik\";\nimport styled from \"styled-components\";\nimport FormikTextField from \"../FormikComponents/FormikTextField\";\nimport PriorityBadge from \"./components/PriorityBadge/PriorityBadge\";\n\nimport { useFormikContext } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { TInitialState } from \"../../redux/store/initialState\";\nimport { useEffect } from \"react\";\n\nconst StyledCreateTaskDialogWrapper = styled(Dialog)`\n  .MuiPaper-root {\n    max-width: 26rem;\n  }\n`;\n\nconst StyledFlexCenteredWrapper = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\ninterface ICreateTaskDialogProps {\n  isOpen: boolean;\n  handleClose: () => void;\n}\n\nfunction CreateTaskDialog(props: ICreateTaskDialogProps) {\n  const { isOpen, handleClose } = props;\n\n  const formikContext = useFormikContext<any>();\n\n  const { selectedMachine } = useSelector(\n    (state: TInitialState) => state.mainReducer.createTaskModal\n  );\n\n  useEffect(() => {\n    formikContext.values.selectedMachine = selectedMachine;\n  }, [selectedMachine]);\n\n  return (\n    <StyledCreateTaskDialogWrapper open={isOpen} onClose={handleClose}>\n      <Form noValidate>\n        <DialogTitle sx={{ textAlign: \"center\" }}>Nuevo programa</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <FormikTextField\n                name=\"employee\"\n                label=\"Código de empleado\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormikTextField\n                name=\"programNumber\"\n                label=\"Nº Programa\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField name=\"material\" label=\"Material\" fullWidth />\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField\n                name=\"thickness\"\n                label=\"Espesor (mm)\"\n                type=\"number\"\n                adornment=\"mm\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField\n                name=\"priority\"\n                label=\"Prioridad\"\n                type=\"number\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <StyledFlexCenteredWrapper>\n                <PriorityBadge priority={formikContext.values.priority} />\n              </StyledFlexCenteredWrapper>\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField\n                name=\"duration\"\n                label=\"Tiempo\"\n                type=\"number\"\n                adornment=\"min\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField\n                name=\"correctionalFactor\"\n                label=\"Factor corrector\"\n                fullWidth\n                disabled\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormikTextField\n                name=\"selectedMachine\"\n                label=\"Máquina\"\n                fullWidth\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} variant=\"outlined\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" variant=\"contained\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Form>\n    </StyledCreateTaskDialogWrapper>\n  );\n}\n\nexport default CreateTaskDialog;\n","import { useSelector, useDispatch } from \"react-redux\";\n\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { TInitialState } from \"../../redux/store/initialState\";\nimport { setIsCreateTaskModalOpen } from \"../../redux/actions/mainActions\";\nimport CreateTaskDialog from \"./CreateTaskDialog\";\n\nfunction CreateTaksDialogContainer() {\n  const dispatch = useDispatch();\n\n  const { isOpen, selectedMachine } = useSelector(\n    (state: TInitialState) => state.mainReducer.createTaskModal\n  );\n\n  function handleClose() {\n    dispatch(setIsCreateTaskModalOpen(false));\n  }\n\n  const initialValues = {\n    employee: \"\",\n    material: \"\",\n    thickness: 0,\n    programNumber: \"\",\n    priority: 1,\n    duration: 0,\n    correctionalFactor: 10,\n    selectedMachine: selectedMachine || 1,\n  };\n\n  const validationSchema = Yup.object({\n    employee: Yup.string().required(\"El código de empleado es obligatorio.\"),\n    material: Yup.string().required(\"El material es obligatorio.\"),\n    thickness: Yup.number()\n      .integer(\"No puede contener decimales.\")\n      .min(0, \"No puede ser negativo.\")\n      .required(\"El espesor es obligatorio.\"),\n    priority: Yup.number()\n      .min(1, \"El valor mínimo es 1.\")\n      .max(10, \"El valor máximo es 10.\")\n      .required(\"La prioridad es obligatoria.\"),\n    duration: Yup.number()\n      .integer(\"No puede contener decimales.\")\n      .required(\"La duración es obligatoria.\"),\n    selectedMachine: Yup.number().required(\"La máquina es obligatoria.\"),\n  });\n\n  function handleCreateTaskFormSubmit(values: TCreateTaskDialogFormValues) {\n    console.log(values);\n    handleClose();\n  }\n\n  type TCreateTaskDialogFormValues = typeof initialValues;\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleCreateTaskFormSubmit}\n      validationSchema={validationSchema}\n    >\n      <CreateTaskDialog isOpen={isOpen} handleClose={handleClose} />\n    </Formik>\n  );\n}\n\nexport default CreateTaksDialogContainer;\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./redux/store/configureStore\";\nimport { initialState } from \"./redux/store/initialState\";\n\n// pages\nimport EmployeesListPageContainer from \"./pages/EmployeesListPage/EmployeesListPageContainer\";\nimport MachinePageContainer from \"./pages/MachinePage/MachinePageContainer\";\nimport EmployeePageContainer from \"./pages/EmployeePage/EmployeePageContainer\";\nimport FinishedTasksPageContainer from \"./pages/FinishedTasksPage/FinishedTasksPageContainer\";\nimport LoginPage from \"./pages/LoginPage/LoginPage\";\n\n// components\nimport Layout from \"./components/Layout/Layout\";\nimport ProtectedRoute from \"./components/ProtectedRoute/ProtectedRoute\";\nimport MachinesHomePageContainer from \"./pages/MachinesHomePage/MachinesHomePageContainer\";\nimport CreateTaskDialog from \"./components/CreateTaskDialog/CreateTaskDialogContainer\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <>\n      <Provider store={configureStore(initialState)}>\n        <QueryClientProvider client={queryClient}>\n          <BrowserRouter basename=\"/corobcat\">\n            <Switch>\n              <Route path=\"/\" exact>\n                <LoginPage />\n              </Route>\n              <Layout>\n                <ProtectedRoute\n                  path=\"/employees\"\n                  exact\n                  component={EmployeesListPageContainer}\n                />\n                <ProtectedRoute\n                  path=\"/employees/:employeeId\"\n                  component={EmployeePageContainer}\n                />\n                <ProtectedRoute\n                  path=\"/finishedTasks\"\n                  component={FinishedTasksPageContainer}\n                />\n                <ProtectedRoute\n                  path=\"/machines\"\n                  exact\n                  component={MachinesHomePageContainer}\n                />\n                <ProtectedRoute\n                  path=\"/machines/:machineName\"\n                  component={MachinePageContainer}\n                />\n              </Layout>\n            </Switch>\n          </BrowserRouter>\n\n          <CreateTaskDialog />\n        </QueryClientProvider>\n      </Provider>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}