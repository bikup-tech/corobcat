{"version":3,"sources":["redux/actions/actionTypes.ts","redux/reducers/index.ts","redux/reducers/authReducer.ts","redux/reducers/mainReducer.ts","redux/store/configureStore.ts","redux/store/initialState.ts","pages/EmployeesListPage/EmployeeCard/EmployeeCard.tsx","pages/EmployeesListPage/components/EmployeesListPage/EmployeesListPage.tsx","pages/EmployeesListPage/EmployeesListPageContainer.tsx","pages/EmployeesListPage/queries/useLoadEmployeesQuery.ts","components/MUITable/EnhancedTableHead/EnhancedTableHead.tsx","pages/MachinePage/components/FinishTaskButton/FinishTaskButton.tsx","mocks/tasksRepository.ts","pages/MachinePage/hooks/useFinishTaskDialog.tsx","redux/actions/mainActions.ts","styles/styleConstants.ts","components/MUITable/SCMuiTable.ts","components/MUITable/setTableRowBackgroundColorByPriority.ts","components/MUITable/EnhancedTasksTable/EnhancedTasksTable.tsx","utils/sortTasksByPriority.ts","pages/MachinePage/MachinePage.tsx","mocks/machineRepository.ts","pages/MachinePage/MachinePageContainer.tsx","pages/MachinePage/queries/useLoadMachineTasksQuery.ts","mocks/userRepository.ts","components/MUITable/EnhancedEmployeeTable/EnhancedEmployeeTable.tsx","components/UserInfoHeader/UserInfoHeader.tsx","pages/EmployeePage/EmployeePage.tsx","pages/EmployeePage/EmployeePageContainer.tsx","pages/EmployeePage/queries/useLoadEmployeeTasksQuery.ts","components/MUITable/EnhancedFinishedTasksTable/EnhancedFinishedTasksTable.tsx","pages/FinishedTasksPage/FinishedTasksPage.tsx","pages/FinishedTasksPage/queries/useLoadFinishedTasksQuery.ts","pages/FinishedTasksPage/FinishedTasksPageContainer.tsx","constants/errorMessages.ts","redux/actions/authActions.ts","pages/LoginPage/LoginPage.tsx","components/LeftMenu/LeftMenu.tsx","components/Layout/Layout.tsx","components/ProtectedRoute/ProtectedRoute.tsx","components/MUITable/LiteTasksTable/LiteTasksTable.tsx","pages/MachinesHomePage/SCMachinesHomePage.ts","pages/MachinesHomePage/MachinesHomePage.tsx","pages/MachinesHomePage/MachinesHomePageContainer.tsx","pages/MachinesHomePage/queries/useMachinesHomeQuery.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FORCE_RENDER","LOGIN_LOADING","LOGIN_SUCCESS","LOGIN_ERROR","combineReducers","authReducer","state","action","newState","type","loginLoading","loginError","payload","errorMessage","user","mainReducer","forceRender","configureStore","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","thunk","JSON","parse","localStorage","getItem","useStyles","makeStyles","root","minWidth","transform","title","fontSize","EmployeeCard","props","employee","classes","Card","className","CardContent","Typography","color","gutterBottom","employerCode","variant","component","name","CardActions","to","_id","StyledEmployeePageContainer","styled","div","StyledLoadingWrapper","EmployeesListPage","employees","isLoading","isError","CircularProgress","map","EmployeesListPageContainer","useQuery","a","data","users","EnhancedTasksTableHead","headCells","TableHead","TableRow","headCell","TableCell","align","padding","label","id","FinishTaskButton","taskId","openFinishedTaskDialog","programNumber","Button","disableElevation","onClick","tasks","jsonTasks","getTaskByMachineId","machineId","filter","task","status","getTaskByUserId","userId","useFinishTaskDialog","dispatch","useDispatch","useState","isFinishTaskDialogOpen","setIsFinishTaskDialogOpen","finishTaskDialogState","setFinishTaskDialogState","handleFinishTaskDialogClose","FinishTaskDialog","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","taskIndex","findIndex","saveFinishedTask","autoFocus","handleFinishTaskDialogOpen","maxTableHeight","StyledTablePageContainer","StyledTableWrapper","setTableRowBackgroundColorByPriority","priority","bgColor","backgroundColor","EnhancedTaksTable","page","setPage","rowsPerPage","setRowsPerPage","Box","sx","width","TableContainer","Paper","maxHeight","Table","size","stickyHeader","TableBody","colSpan","index","border","style","scope","taskNumber","material","thickness","duration","TablePagination","rowsPerPageOptions","count","length","onPageChange","event","newPage","onRowsPerPageChange","parseInt","target","value","sortTasksByPriority","sort","b","undefined","MachinePage","getMachineByName","machineName","machines","find","machine","MachinePageContainer","useSelector","refetchInterval","useLoadMachineTasksQuery","useParams","handleTaskClick","console","log","getUserById","getUserByCode","userCode","EnhnacedEmployeeTasksTable","React","UserInfoHeader","history","useHistory","IconButton","goBack","EmployeePage","EmployeePageContainer","employeeId","employeeTasks","useLoadEmployeeTasksQuery","EnhancedFinishedTasksTable","FinishedTasksPage","getMachineNameById","FinishedTasksPageContainer","finishedTasks","ERROR_MESSAGE_INVALID_CREDENTIALS","LoginPage","valueRef","useRef","warningMessage","setWarningMessage","useEffect","replace","Grid","elevation","Avatar","TextField","placeholder","fullWidth","required","inputRef","current","setItem","stringify","response","message","LeftMenu","List","ListItem","disableGutters","ListItemButton","ListItemIcon","ListItemText","primary","disablePadding","pl","Layout","children","ProtectedRoute","path","Compo","exact","rest","render","StyledMachinesHomePageWrapper","StyledMachinesHomePageLoadingWrapper","StyledTableHeaderWrapper","MachinesHomePage","machine1","machine2","MachinesHomePageContainer","activeTasks","machine1Tasks","machine2Tasks","useMachinesHomeQuery","queryClient","QueryClient","App","store","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.900b52cd.chunk.js","sourcesContent":["export const FORCE_RENDER = \"FORCE_RENDER\";\n// LOGIN\nexport const LOGIN_LOADING = \"LOGIN_LOADING\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_ERROR = \"LOGIN_ERROR\";\n","import { combineReducers } from \"redux\";\nimport mainReducer from \"./mainReducer\";\nimport authReducer from \"./authReducer\";\n\nexport default combineReducers({\n  authReducer,\n  mainReducer,\n});\n","import {\n  LOGIN_ERROR,\n  LOGIN_LOADING,\n  LOGIN_SUCCESS,\n} from \"../actions/actionTypes\";\n\nimport { TAction } from \"../../types/storeActionType\";\nimport { TAuthActions } from \"../actions/authActions\";\n\nexport default function authReducer(state: any = {}, action: TAuthActions) {\n  let newState = {};\n  switch (action.type) {\n    case LOGIN_LOADING:\n      newState = { ...state, loginLoading: true };\n      break;\n    case LOGIN_ERROR:\n      newState = {\n        ...state,\n        loginLoading: false,\n        loginError: action.payload.errorMessage,\n      };\n      break;\n    case LOGIN_SUCCESS:\n      newState = {\n        ...state,\n        loginLoading: false,\n        loginError: null,\n        user: action.payload.user,\n      };\n      break;\n    default:\n      newState = state;\n      break;\n  }\n  return newState;\n}\n","/* eslint-disable no-param-reassign */\nimport { FORCE_RENDER } from \"../actions/actionTypes\";\nimport { TAction } from \"../../types/storeActionType\";\n\nexport default function mainReducer(state: any = {}, action: TAction) {\n  let newState = {};\n  switch (action.type) {\n    case FORCE_RENDER:\n      newState = { ...state, forceRender: ++state.forceRender };\n      break;\n\n    default:\n      newState = state;\n      break;\n  }\n\n  return newState;\n}\n","import { applyMiddleware, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\nimport { TInitialState } from \"./initialState\";\n\nexport default function configureStore(initialState: TInitialState) {\n  const composeEnhancers =\n    (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\n  return createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunk))\n  );\n}\n","import { TUserResponse } from \"../../types/employeeTypes\";\n\nexport type TMainReducer = {\n  forceRender: number;\n};\n\nexport type TAuthReducer = {\n  user: TUserResponse | null;\n  loginLoading?: boolean;\n  loginError?: string;\n};\n\nexport type TInitialState = {\n  mainReducer: TMainReducer;\n  authReducer: TAuthReducer;\n};\n\nexport const initialState: TInitialState = {\n  mainReducer: {\n    forceRender: 0,\n  },\n  authReducer: {\n    user: JSON.parse(localStorage.getItem(\"user\") as string) || null,\n  },\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// styles\nimport \"./EmployeeCard.scss\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n// types\nimport { TUserResponse } from \"../../../types/employeeTypes\";\n\n// components\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 100,\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n});\n\ninterface IEmployeeCardProps {\n  employee: TUserResponse;\n}\n\nfunction EmployeeCard(props:IEmployeeCardProps) {\n  const { employee } = props;\n  const classes = useStyles();\n  return (\n    <Card key={employee._id} className={`employee__card ${classes.root}`}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Código empleado: {employee.employerCode}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {employee.name}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Link to={`/employees/${employee._id}`} className=\"employee__link\">\n          Ver Empleado\n        </Link>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default EmployeeCard;\n","import styled from \"styled-components\";\n\nimport \"./EmployeesListPage.scss\";\n\n// types\nimport { TUserResponse } from \"../../../../types/employeeTypes\";\n\n// components\nimport EmployeeCard from \"../../EmployeeCard/EmployeeCard\";\nimport { CircularProgress } from \"@mui/material\";\n\nconst StyledEmployeePageContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: start;\n  align-items: flex-start;\n  width: 100%;\n  height: 100%;\n`;\n\nconst StyledLoadingWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n\n  font-size: 1.75rem;\n`;\n\ninterface IEmployeesCardProps {\n  employees: TUserResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n}\n\nfunction EmployeesListPage(props: IEmployeesCardProps) {\n  const { employees, isLoading, isError } = props;\n  return (\n    <>\n      <div className=\"employees-title\">Lista de empleados</div>\n      <StyledEmployeePageContainer className=\"employees-container\">\n        {isLoading ? (\n          <StyledLoadingWrapper>\n            <CircularProgress />\n            Cargando Datos...\n          </StyledLoadingWrapper>\n        ) : isError ? (\n          <></>\n        ) : (\n          employees &&\n          employees.map((employee) => {\n            return <EmployeeCard key={employee._id} employee={employee} />;\n          })\n        )}\n      </StyledEmployeePageContainer>\n    </>\n  );\n}\nexport default EmployeesListPage;\n","// query\nimport useLoadEmployeesQuery from \"./queries/useLoadEmployeesQuery\";\n// components\nimport EmployeesListPage from \"./components/EmployeesListPage/EmployeesListPage\";\n\nfunction EmployeesListPageContainer() {\n  // getEmployers\n  const { isLoading, isError, data } = useLoadEmployeesQuery();\n\n  return (\n    <>\n      <EmployeesListPage employees={data} isLoading={isLoading} isError={isError} />\n    </>\n  );\n}\n\nexport default EmployeesListPageContainer;\n","import { useQuery } from \"react-query\";\nimport users from \"../../../mocks/users.json\";\n\nexport default function useLoadEmployeesQuery() {\n  return useQuery([\"loadEmployers\"], async () => {\n    // TODO const {data} = await axios.get('/api/users')\n    const data = users;\n\n    return data;\n  });\n}\n","import { TableCell, TableHead, TableRow } from \"@mui/material\";\nimport { THeadCell } from \"../MUITableTypes\";\n\ninterface IEnhancedTableHeadProps {\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedTasksTableHead(props: IEnhancedTableHeadProps) {\n  const { headCells } = props;\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell key={headCell.id} align=\"center\" padding=\"normal\">\n            {headCell.label}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n","import { Button } from \"@mui/material\";\n\ninterface IFinishTaskButtonProps {\n  taskId: string;\n  programNumber: string;\n  openFinishedTaskDialog: (programNumber: string) => void;\n}\n\nfunction FinishTaskButton(props: IFinishTaskButtonProps) {\n  const { taskId, programNumber, openFinishedTaskDialog } = props;\n\n  function handleClick() {\n    openFinishedTaskDialog(taskId);\n  }\n\n  return (\n    <>\n      <Button variant=\"contained\" disableElevation onClick={handleClick}>\n        Finalizar\n      </Button>\n    </>\n  );\n}\n\nexport default FinishTaskButton;\n","import { TTaskResponse } from \"../types/taskTypes\";\nimport jsonTasks from \"./tasks.json\";\n\nconst tasks = [...jsonTasks];\n\nexport function getTaskByMachineId(machineId: string): TTaskResponse[] {\n  return tasks.filter(\n    (task: TTaskResponse) => task.machineId === machineId && task.status === 0\n  );\n}\n\nexport function getTaskByUserId(userId: string) {\n  return tasks.filter((task) => task.userId === userId);\n}\n\nexport function getActiveTasks() {\n  return tasks.filter((task: TTaskResponse) => task.status === 0);\n}\n\nexport function getFinishedTasks() {\n  return tasks.filter((task: TTaskResponse) => task.status === 1);\n}\n\nexport function saveFinishedTask(taskId: string) {\n  const taskIndex = tasks.findIndex((task) => task._id === taskId);\n\n  if (taskIndex || taskIndex === 0) {\n    tasks[taskIndex].status = 1;\n  }\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@mui/material\";\n\nimport React, { useState } from \"react\";\nimport { saveFinishedTask } from \"../../../mocks/tasksRepository\";\nimport { useDispatch } from \"react-redux\";\nimport { forceRender } from \"../../../redux/actions/mainActions\";\n\nconst initialState = {\n  taskId: \"\",\n};\n\nexport default function useFinishTaskDialog() {\n  const dispatch = useDispatch();\n\n  const [isFinishTaskDialogOpen, setIsFinishTaskDialogOpen] = useState(false);\n\n  const [finishTaskDialogState, setFinishTaskDialogState] =\n    useState(initialState);\n\n  function handleFinishTaskDialogOpen(taskId: string) {\n    setIsFinishTaskDialogOpen(true);\n    setFinishTaskDialogState({ ...finishTaskDialogState, taskId });\n  }\n\n  function handleFinishTaskDialogClose() {\n    setIsFinishTaskDialogOpen(false);\n  }\n\n  function handleAccept() {\n    saveFinishedTask(finishTaskDialogState.taskId);\n    setIsFinishTaskDialogOpen(false);\n    dispatch(forceRender());\n  }\n\n  const FinishTaskDialog = (\n    <Dialog\n      open={isFinishTaskDialogOpen}\n      onClose={handleFinishTaskDialogClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Confirmación finalizar programa\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n           Estás seguro de que deseas finalizar el programa?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleFinishTaskDialogClose}>Cancelar</Button>\n        <Button onClick={handleAccept} autoFocus variant=\"contained\">\n          Finalizar programa\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n\n  return {\n    FinishTaskDialog,\n    handleFinishTaskDialogOpen,\n    handleFinishTaskDialogClose,\n  };\n}\n","import { FORCE_RENDER } from \"./actionTypes\";\n\nexport function forceRender() {\n  return {\n    type: FORCE_RENDER,\n  };\n}\n","export const maxWidth = 1200;\nexport const maxTableHeight = \"78vh\";\n","import styled from \"styled-components\";\n\nimport { maxWidth } from \"../../styles/styleConstants\";\n\nexport const StyledTablePageContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nexport const StyledTableWrapper = styled.div`\n  width: 100%;\n  max-width: ${maxWidth}px;\n\n  .MuiTableCell-head {\n    color: #002740;\n    font-weight: 700;\n    background-color: #f5f5f5;\n    border-bottom: 2px solid rgba(150, 150, 150, 1);\n    line-height: 1.25;\n    font-size: 1.1rem;\n  }\n\n  .MuiTableCell-body {\n    border-bottom: 1px solid rgba(255, 255, 255, 1);\n    font-weight: 500;\n    font-size: 1.1rem;\n  }\n`;\n\nexport const StyledLoadingWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n\n  font-size: 1.75rem;\n\n  .MuiCircularProgress-root {\n    margin-right: 1rem;\n  }\n`;\n","export function setTableRowBackgroundColorByPriority(priority: number) {\n  let bgColor = \"\";\n  if (priority > 0 && priority <= 2) {\n    bgColor = \"rgba(246, 91, 92, 0.5)\";\n  }\n  if (priority > 2 && priority <= 4) {\n    bgColor = \"rgba(255, 163, 15, 0.5)\";\n  }\n  if (priority > 4 && priority <= 8) {\n    bgColor = \"rgba(1, 187, 63, 0.5)\";\n  }\n  if (priority > 8 && priority <= 10) {\n    bgColor = \"rgba(93, 172, 245, 0.5)\";\n  }\n\n  return {\n    backgroundColor: bgColor,\n  };\n}\n","import {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport FinishTaskButton from \"../../../pages/MachinePage/components/FinishTaskButton/FinishTaskButton\";\nimport useFinishTaskDialog from \"../../../pages/MachinePage/hooks/useFinishTaskDialog\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTablePageContainer,\n  StyledTableWrapper,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\n\ninterface IEnhancedTableProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedTaksTable(props: IEnhancedTableProps) {\n  const { tasks, headCells, isLoading, isError } = props;\n\n  const {\n    FinishTaskDialog,\n    handleFinishTaskDialogOpen,\n    handleFinishTaskDialogClose,\n  } = useFinishTaskDialog();\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table\n              sx={{ minWidth: 750 }}\n              aria-labelledby=\"tableTitle\"\n              size=\"medium\"\n              stickyHeader\n            >\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={999}>\n                      <StyledLoadingWrapper>\n                        <CircularProgress />\n                        Cargando Datos...\n                      </StyledLoadingWrapper>\n                    </TableCell>\n                  </TableRow>\n                ) : isError ? (\n                  <></>\n                ) : (\n                  tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">{task.material}</TableCell>\n                        <TableCell align=\"center\">{task.thickness}</TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.employerCode}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <FinishTaskButton\n                            taskId={task._id}\n                            programNumber={task.programNumber}\n                            openFinishedTaskDialog={handleFinishTaskDialogOpen}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {!isLoading && tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n      {FinishTaskDialog}\n    </StyledTablePageContainer>\n  );\n}\n","import { TTaskResponse } from \"../types/taskTypes\";\n\nexport function sortTasksByPriority(tasks: TTaskResponse[] | undefined) {\n  return tasks ? tasks.sort((a, b) => a.priority - b.priority) : undefined;\n}\n","import EnhancedTaksTable from \"../../components/MUITable/EnhancedTasksTable/EnhancedTasksTable\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\nimport { TTaskResponse } from \"../../types/taskTypes\";\n\nimport { sortTasksByPriority } from \"../../utils/sortTasksByPriority\";\n\ninterface IMachinePageProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  handleTaskClick?: (taskId: string) => void;\n}\n\nfunction MachinePage(props: IMachinePageProps) {\n  const { tasks, isLoading, isError } = props;\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº Tarea\",\n    },\n    {\n      id: \"material\",\n      label: \"Material\",\n    },\n    {\n      id: \"thickness\",\n      label: \"Espesor\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"employerCode\",\n      label: \"Técnico\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n    {\n      id: \"actions\",\n      label: \"Acciones\",\n    },\n  ];\n\n  return (\n    <>\n      <EnhancedTaksTable\n        headCells={headCells}\n        tasks={sortTasksByPriority(tasks)}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default MachinePage;\n","import machines from \"./machines.json\";\n\nexport function getMachineByName(machineName: string) {\n  return machines.find((machine) => machine.name === machineName);\n}\n\nexport function getMachines() {\n  return machines;\n}\n","import { useParams } from \"react-router-dom\";\nimport MachinePage from \"./MachinePage\";\nimport useLoadMachineTasksQuery from \"./queries/useLoadMachineTasksQuery\";\nimport { useSelector } from \"react-redux\";\n\ninterface IMachinePageContainerParams {\n  machineName: string;\n}\n\nfunction MachinePageContainer() {\n  const { forceRender } = useSelector((state: any) => state.mainReducer);\n\n  const { machineName } = useParams<IMachinePageContainerParams>();\n\n  const { isLoading, isError, data } = useLoadMachineTasksQuery(\n    machineName,\n    forceRender\n  );\n\n  function handleTaskClick(taskId: string) {\n    console.log(\"hola\");\n  }\n\n  return (\n    <>\n      <MachinePage\n        tasks={data}\n        handleTaskClick={handleTaskClick}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default MachinePageContainer;\n","import { useQuery } from \"react-query\";\n\n// Mocks\nimport { getTaskByMachineId } from \"../../../mocks/tasksRepository\";\nimport { getMachineByName } from \"../../../mocks/machineRepository\";\n\nexport default function useLoadMachineTasksQuery(\n  machineName: string,\n  forceRender: number\n) {\n  // el useQuery reb un array amb el nom de la \"action\" i les variables que si canvien torna a executar\n  return useQuery(\n    [\"loadMachineTasks\", machineName, forceRender],\n    async () => {\n      // TODO: const machine = await axios.get('/api/machine/name/${machineName}')\n      const machine = getMachineByName(machineName);\n\n      // TODO: const {data} = await axios.get('/api/tasks/${machineName}')\n      if (machine) {\n        const data = getTaskByMachineId(machine._id);\n\n        return data;\n      }\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import { TUserResponse } from \"../types/employeeTypes\";\nimport data from \"./users.json\";\nconst users: TUserResponse[] = data;\n\nexport function getUserById(userId: string) {\n  const user = users.find((user) => {\n    return user._id === userId;\n  });\n  return user;\n}\n\nexport function getUserByCode(userCode: string) {\n  const user = users.find((user) => {\n    return user.employerCode === userCode;\n  });\n  return user;\n}\n","import {\n  Box,\n  CircularProgress,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n  Paper,\n} from \"@mui/material\";\nimport React from \"react\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTablePageContainer,\n  StyledTableWrapper,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\n\ninterface IEnhnacedEmployeeTasksTableProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  headCells: THeadCell[];\n}\n\nexport default function EnhnacedEmployeeTasksTable(\n  props: IEnhnacedEmployeeTasksTableProps\n) {\n  const { tasks, headCells, isLoading, isError } = props;\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table\n              sx={{ minWidth: 750, maxHeight: 250 }}\n              aria-labelledby=\"tableTitle\"\n              size=\"medium\"\n              stickyHeader\n            >\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={999}>\n                      <StyledLoadingWrapper>\n                        <CircularProgress />\n                        Cargando Datos...\n                      </StyledLoadingWrapper>\n                    </TableCell>\n                  </TableRow>\n                ) : isError ? (\n                  <></>\n                ) : (\n                  tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">{task.material}</TableCell>\n                        <TableCell align=\"center\">{task.thickness}</TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {!isLoading && tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n    </StyledTablePageContainer>\n  );\n}\n","import React from \"react\";\nimport { TUserResponse } from \"../../types/employeeTypes\";\nimport \"./UserInfoHeader.scss\";\nimport { useHistory } from \"react-router-dom\";\n\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport IconButton from \"@mui/material/IconButton\";\n\ninterface IUserInfoHeaderProps {\n  employee: TUserResponse | undefined;\n}\n\nfunction UserInfoHeader(props: IUserInfoHeaderProps) {\n  const { employee } = props;\n  const history = useHistory();\n\n  return (\n    <div className=\"user-data-table-container\">\n    <div className=\"user-data-table\">\n      <IconButton onClick={() => history.goBack()} aria-label=\"goBack\">\n        <ArrowBackIcon />\n      </IconButton>\n      <p className=\"user-data-table__info--name\">{employee?.name}</p>\n      <p className=\"user-data-table__info\">{employee?.employerCode}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default UserInfoHeader;\n","import React from \"react\";\n\n// types\nimport { TTaskResponse } from \"../../types/taskTypes\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\nimport { TUserResponse } from \"../../types/employeeTypes\";\n\n// components\nimport EnhancedEmployeeTable from '../../components/MUITable/EnhancedEmployeeTable/EnhancedEmployeeTable';\nimport UserInfoHeader from \"../../components/UserInfoHeader/UserInfoHeader\";\n\ninterface IEmployeePage {\n  tasks: TTaskResponse[] | undefined;\n  employee: TUserResponse | undefined;\n  isLoading: boolean;\n  isError: boolean;\n}\n\nfunction EmployeePage(props: IEmployeePage) {\n  const { tasks, isLoading, isError,employee } = props;\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº tarea\",\n    },\n    {\n      id: \"material\",\n      label: \"Material\",\n    },\n    {\n      id: \"thickness\",\n      label: \"Espesor\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n  ];\n\n  return (\n    <>\n      <UserInfoHeader employee={employee} />\n      <EnhancedEmployeeTable\n        headCells={headCells}\n        tasks={tasks}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default EmployeePage;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n// queries\nimport useLoadEmployeeTasksQuery from './queries/useLoadEmployeeTasksQuery';\n\n// components\nimport EmployeePage from './EmployeePage';\n\ninterface IEmployeePageContainerParams {\n  employeeId: string;\n}\n\nfunction EmployeePageContainer() {\n    const {employeeId} = useParams<IEmployeePageContainerParams>();\n\n  const { isLoading, isError, data } = useLoadEmployeeTasksQuery(employeeId); \n\n    \n  return (\n    <>\n      <EmployeePage \n        tasks={data?.employeeTasks}\n        employee={data?.employee}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default EmployeePageContainer;\n","import { useQuery } from \"react-query\";\n\n// mocks\nimport { getTaskByUserId } from \"../../../mocks/tasksRepository\";\nimport { getUserById } from \"../../../mocks/userRepository\";\n\nexport default function useLoadEmployeeTasksQuery(employeeId: string) {\n  return useQuery(\n    [\"loadEmployeeTasks\", employeeId],\n    async () => {\n      // getEmployeeById\n      const employee = getUserById(employeeId);\n      const employeeTasks = getTaskByUserId(employeeId);\n      return { employeeTasks, employee };\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport React from \"react\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\nimport { TEnhancedTaskResponse } from \"../../../types/taskTypes\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTablePageContainer,\n  StyledTableWrapper,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\n\ninterface IEnhancedTableProps {\n  tasks: TEnhancedTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedFinishedTasksTable(props: IEnhancedTableProps) {\n  const { tasks, headCells, isLoading, isError } = props;\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table\n              sx={{ minWidth: 750 }}\n              aria-labelledby=\"tableTitle\"\n              size=\"medium\"\n              stickyHeader\n            >\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={999}>\n                      <StyledLoadingWrapper>\n                        <CircularProgress />\n                        Cargando Datos...\n                      </StyledLoadingWrapper>\n                    </TableCell>\n                  </TableRow>\n                ) : isError ? (\n                  <></>\n                ) : (\n                  tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">{task.machineName}</TableCell>\n                        <TableCell align=\"center\">{task.material}</TableCell>\n                        <TableCell align=\"center\">{task.thickness}</TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.employerCode}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {!isLoading && tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n    </StyledTablePageContainer>\n  );\n}\n","import EnhancedFinishedTasksTable from \"../../components/MUITable/EnhancedFinishedTasksTable/EnhancedFinishedTasksTable\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\nimport { TEnhancedTaskResponse } from \"../../types/taskTypes\";\n\ninterface IFinishedTasksPageProps {\n  tasks: TEnhancedTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  handleTaskClick?: (taskId: string) => void;\n}\n\nfunction FinishedTasksPage(props: IFinishedTasksPageProps) {\n  const { tasks, isLoading, isError } = props;\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº Tarea\",\n    },\n    {\n      id: \"machine\",\n      label: \"Máquina\",\n    },\n    {\n      id: \"material\",\n      label: \"Material\",\n    },\n    {\n      id: \"thickness\",\n      label: \"Espesor\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"employerCode\",\n      label: \"Técnico\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n  ];\n\n  return (\n    <>\n      <EnhancedFinishedTasksTable\n        headCells={headCells}\n        tasks={tasks}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default FinishedTasksPage;\n","import { useQuery } from \"react-query\";\nimport { getMachines } from \"../../../mocks/machineRepository\";\n\nimport { getFinishedTasks } from \"../../../mocks/tasksRepository\";\nimport { TMachineResponse } from \"../../../types/machineTypes\";\n\nfunction getMachineNameById(machines: TMachineResponse[], machineId: string) {\n  const machine = machines.find((machine) => machine._id === machineId);\n\n  return machine ? machine.name : \"\";\n}\n\nexport default function useFinisedTasksQuery() {\n  // el useQuery reb un array amb el nom de la \"action\" i les variables que si canvien torna a executar\n  return useQuery(\n    [\"loadFinishedTasks\"],\n    async () => {\n      // TODO: const {data: tasks} = await axios.get('/api/tasks/finished}')\n      const tasks = getFinishedTasks();\n\n      // TODO: const { data: machines } = await axios.get(\"/api/machines\");\n      const machines = getMachines();\n\n      const finishedTasks = tasks.map((task) => {\n        return {\n          ...task,\n          machineName: getMachineNameById(machines, task.machineId),\n        };\n      });\n\n      return finishedTasks;\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import FinishedTasksPage from \"./FinishedTasksPage\";\nimport useFinisedTasksQuery from \"./queries/useLoadFinishedTasksQuery\";\n\nfunction FinishedTasksPageContainer() {\n  const { isLoading, isError, data } = useFinisedTasksQuery();\n\n  function handleTaskClick(taskId: string) {\n    console.log(\"hola\");\n  }\n\n  return (\n    <>\n      <FinishedTasksPage tasks={data} isLoading={isLoading} isError={isError} />\n    </>\n  );\n}\n\nexport default FinishedTasksPageContainer;\n","export const ERROR_MESSAGE_INVALID_CREDENTIALS = (userCode: string) =>\n  `No existe un empleado con el código de empleado: ${userCode}.`;\n","import { Dispatch } from \"redux\";\nimport { LOGIN_ERROR, LOGIN_SUCCESS, LOGIN_LOADING } from \"./actionTypes\";\n\n// mocks\nimport { getUserByCode } from \"../../mocks/userRepository\";\nimport { TUserResponse } from \"../../types/employeeTypes\";\nimport { ERROR_MESSAGE_INVALID_CREDENTIALS } from \"../../constants/errorMessages\";\n\ntype TLoginLoadingAction = {\n  type: typeof LOGIN_LOADING;\n};\n\nexport type TAuthActions =\n  | TLoginLoadingAction\n  | {\n      type: typeof LOGIN_SUCCESS;\n      payload: { user: TUserResponse };\n    }\n  | {\n      type: typeof LOGIN_ERROR;\n      payload: { errorMessage: string };\n    };\n\nexport function loginLoading() {\n  return {\n    type: LOGIN_LOADING,\n  };\n}\n\nexport function loginSuccess(user: TUserResponse | undefined) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: { user },\n  };\n}\n\nexport function loginError(errorMessage: string) {\n  return {\n    type: LOGIN_ERROR,\n    payload: { errorMessage },\n  };\n}\n\nexport function login(userCode: string) {\n  return async (dispatch: Dispatch) => {\n    try {\n      dispatch(loginLoading());\n      // TODO: const {data} = await axios.get('/api/user/employerCode/${userCode')\n      const data = await getUserByCode(userCode);\n\n      if (data) {\n        localStorage.setItem(\"user\", JSON.stringify(data));\n        dispatch(loginSuccess(data));\n      } else {\n        dispatch(loginError(ERROR_MESSAGE_INVALID_CREDENTIALS(userCode)));\n      }\n    } catch (error: any) {\n      if (error.response) {\n        dispatch(loginError(error.response.message));\n      } else {\n        dispatch(loginError(error.message));\n      }\n    }\n  };\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\n// actions\nimport { login } from \"../../redux/actions/authActions\";\n\n// styles\nimport styled from \"styled-components\";\nimport \"./LoginPage.scss\";\n\n// components\nimport { Grid, Paper, Avatar, TextField, Button } from \"@material-ui/core\";\nimport LoginIcon from \"@mui/icons-material/Login\";\nimport { CircularProgress } from \"@mui/material\";\nimport { TInitialState } from \"../../redux/store/initialState\";\n\nconst StyledLoadingWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n\n  .MuiPaper-root {\n    padding: 3rem 1.25rem;\n    width: 17rem;\n  }\n\n  .MuiGrid-root {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n  .MuiAvatar-root {\n    margin-bottom: 1rem;\n    background-color: #1bbd7e;\n  }\n  .MuiFormControl-root {\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n  }\n  .MuiButton-root {\n    margin-top: 1rem;\n  }\n`;\n\nfunction LoginPage() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const { loginLoading, loginError, user } = useSelector(\n    (state: TInitialState) => state.authReducer\n  );\n\n  const valueRef = useRef<HTMLInputElement>(null);\n  const [warningMessage, setWarningMessage] = useState(\"\");\n\n  useEffect(() => {\n    if (user) {\n      history.replace(\"/machines\");\n    }\n    if (loginError) {\n      setWarningMessage(loginError);\n    }\n  }, [user, loginError]);\n\n  function handleLogInClick() {\n    if (valueRef.current) {\n      dispatch(login(valueRef.current.value));\n    }\n  }\n\n  return (\n    <StyledLoadingWrapper>\n      <Grid>\n        <Paper elevation={10}>\n          <Grid>\n            <Avatar>\n              <LoginIcon />\n            </Avatar>\n            <h2>Login</h2>\n          </Grid>\n          <TextField\n            label=\"Código de empleado\"\n            placeholder=\"Entra el código de empleado\"\n            fullWidth\n            required\n            inputRef={valueRef}\n          />\n          {loginLoading && <CircularProgress />}\n          <small className=\"form__warningMessage\">{warningMessage}</small>\n          {/* <Button\n            type=\"submit\"\n            color=\"primary\"\n            variant=\"contained\"\n            fullWidth\n            onClick={handleLogInClick}\n          >\n            Login\n          </Button> */}\n          <button onClick={handleLogInClick}>login</button>\n        </Paper>\n      </Grid>\n    </StyledLoadingWrapper>\n  );\n}\n\nexport default LoginPage;\n","import { List, ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\nimport AssignmentTurnedInIcon from \"@mui/icons-material/AssignmentTurnedIn\";\nimport PrecisionManufacturingIcon from \"@mui/icons-material/PrecisionManufacturing\";\nimport PeopleIcon from \"@mui/icons-material/People\";\nimport StoreIcon from \"@mui/icons-material/Store\";\nimport { ListItemButton } from \"@mui/material\";\nimport Avatar from \"@mui/material/Avatar\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./LeftMenu.scss\";\n\nfunction LeftMenu() {\n  return (\n    <div className=\"left-menu\">\n      <div className=\"left-menu__header\">\n        <Avatar>CRC</Avatar>\n      </div>\n      <nav>\n        <List>\n          <ListItem disableGutters>\n            <NavLink to=\"/machines\" className=\"left-menu__nav-item\">\n              <ListItemButton>\n                <ListItemIcon>\n                  <StoreIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Maquinas\" />\n              </ListItemButton>\n            </NavLink>\n          </ListItem>\n          <List component=\"div\" disablePadding>\n            <NavLink to=\"/machines/maquina1\" className=\"left-menu__nav-item\">\n              <ListItemButton sx={{ pl: 5 }}>\n                <ListItemIcon>\n                  <PrecisionManufacturingIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Maquina 1\" />\n              </ListItemButton>\n            </NavLink>\n            <NavLink to=\"/machines/maquina2\" className=\"left-menu__nav-item\">\n              <ListItemButton sx={{ pl: 5 }}>\n                <ListItemIcon>\n                  <PrecisionManufacturingIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Maquina 2\" />\n              </ListItemButton>\n            </NavLink>\n          </List>\n\n          <ListItem disableGutters>\n            <NavLink to=\"/employees\" className=\"left-menu__nav-item\">\n              <ListItemButton>\n                <ListItemIcon>\n                  <PeopleIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Lista de técnicos\" />\n              </ListItemButton>\n            </NavLink>\n          </ListItem>\n\n          <ListItem disableGutters>\n            <NavLink to=\"/finishedTasks\" className=\"left-menu__nav-item\">\n              <ListItemButton>\n                <ListItemIcon>\n                  <AssignmentTurnedInIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Programas Terminados\" />\n              </ListItemButton>\n            </NavLink>\n          </ListItem>\n        </List>\n      </nav>\n    </div>\n  );\n}\n\nexport default LeftMenu;\n","import React from \"react\";\nimport LeftMenu from \"../LeftMenu/LeftMenu\";\nimport \"./Layout.scss\";\n\ninterface ILayoutProps {\n  children: React.ReactNode;\n}\n\nfunction Layout(props: ILayoutProps) {\n  const { children } = props;\n\n  return (\n    <div className=\"layout\">\n      <div className=\"layout__menu-container\">\n        <LeftMenu />\n      </div>\n      <div className=\"layout__content\">{children}</div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import { useSelector } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { TInitialState } from \"../../redux/store/initialState\";\n\ninterface IProtectedRouteProps {\n  path: string;\n  component: any;\n  exact?: boolean;\n}\n\nfunction ProtectedRoute(props: IProtectedRouteProps) {\n  const { path, component: Compo, exact, ...rest } = props;\n  const user = useSelector((state: TInitialState) => state.authReducer.user);\n\n  return (\n    <Route\n      path={path}\n      exact={exact}\n      {...rest}\n      render={(props) => (user ? <Compo {...props} /> : <Redirect to=\"/\" />)}\n    />\n  );\n}\n\nexport default ProtectedRoute;\n","import {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport FinishTaskButton from \"../../../pages/MachinePage/components/FinishTaskButton/FinishTaskButton\";\nimport useFinishTaskDialog from \"../../../pages/MachinePage/hooks/useFinishTaskDialog\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTableWrapper,\n  StyledTablePageContainer,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\n\ninterface IEnhancedTableProps {\n  tasks: TTaskResponse[] | undefined;\n\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedTaksTable(props: IEnhancedTableProps) {\n  const { tasks, headCells } = props;\n\n  const {\n    FinishTaskDialog,\n    handleFinishTaskDialogOpen,\n    handleFinishTaskDialogClose,\n  } = useFinishTaskDialog();\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table aria-labelledby=\"tableTitle\" size=\"medium\" stickyHeader>\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <FinishTaskButton\n                            taskId={task._id}\n                            programNumber={task.programNumber}\n                            openFinishedTaskDialog={handleFinishTaskDialogOpen}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n      {FinishTaskDialog}\n    </StyledTablePageContainer>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const StyledMachinesHomePageWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: flex-start;\n`;\n\nexport const StyledMachinesHomePageLoadingWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding-top: 1.5rem;\n  font-size: 1.5rem;\n\n  .MuiCircularProgress-root {\n    margin-right: 1rem;\n  }\n`;\n\nexport const StyledTableWrapper = styled.div`\n  width: 49%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const StyledTableHeaderWrapper = styled.div`\n  padding: 1rem 0;\n\n  .machines-home-page__machine-title {\n    font-size: 1.75rem;\n  }\n`;\n","import { CircularProgress } from \"@material-ui/core\";\nimport EnhancedTaksTable from \"../../components/MUITable/EnhancedTasksTable/EnhancedTasksTable\";\nimport LiteTasksTable from \"../../components/MUITable/LiteTasksTable/LiteTasksTable\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\nimport { TTaskResponse } from \"../../types/taskTypes\";\n\nimport { sortTasksByPriority } from \"../../utils/sortTasksByPriority\";\nimport { TMachinesHomeTasks } from \"./MachinesHomePageTypes\";\nimport {\n  StyledMachinesHomePageLoadingWrapper,\n  StyledMachinesHomePageWrapper,\n  StyledTableHeaderWrapper,\n  StyledTableWrapper,\n} from \"./SCMachinesHomePage\";\n\ninterface IMachinePageProps {\n  tasks: TMachinesHomeTasks | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  handleTaskClick?: (taskId: string) => void;\n}\n\nfunction MachinesHomePage(props: IMachinePageProps) {\n  const { tasks, isLoading, isError } = props;\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº Tarea\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n    {\n      id: \"actions\",\n      label: \"Acciones\",\n    },\n  ];\n\n  return (\n    <>\n      {isLoading && (\n        <StyledMachinesHomePageLoadingWrapper>\n          <CircularProgress />\n          Cargando Datos...\n        </StyledMachinesHomePageLoadingWrapper>\n      )}\n      {tasks && (\n        <StyledMachinesHomePageWrapper>\n          <StyledTableWrapper>\n            <StyledTableHeaderWrapper>\n              <h3 className=\"machines-home-page__machine-title\">Máquina 1</h3>\n            </StyledTableHeaderWrapper>\n            <LiteTasksTable\n              tasks={sortTasksByPriority(tasks.machine1)}\n              headCells={headCells}\n            />\n          </StyledTableWrapper>\n          <StyledTableWrapper>\n            <StyledTableHeaderWrapper>\n              <h3 className=\"machines-home-page__machine-title\">Máquina 2</h3>\n            </StyledTableHeaderWrapper>\n            <LiteTasksTable\n              tasks={sortTasksByPriority(tasks.machine2)}\n              headCells={headCells}\n            />\n          </StyledTableWrapper>\n        </StyledMachinesHomePageWrapper>\n      )}\n    </>\n  );\n}\n\nexport default MachinesHomePage;\n","import { useParams } from \"react-router-dom\";\n\nimport { useSelector } from \"react-redux\";\n\nimport MachinesHomePage from \"./MachinesHomePage\";\nimport useMachinesHomeQuery from \"./queries/useMachinesHomeQuery\";\n\nfunction MachinesHomePageContainer() {\n  const { forceRender } = useSelector((state: any) => state.mainReducer);\n\n  const { isLoading, isError, data } = useMachinesHomeQuery(forceRender);\n\n  function handleTaskClick(taskId: string) {\n    console.log(\"hola\");\n  }\n\n  return (\n    <>\n      <MachinesHomePage\n        tasks={data}\n        handleTaskClick={handleTaskClick}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default MachinesHomePageContainer;\n","import { useQuery } from \"react-query\";\n\n// Mocks\nimport {\n  getActiveTasks,\n  getTaskByMachineId,\n} from \"../../../mocks/tasksRepository\";\nimport { getMachineByName } from \"../../../mocks/machineRepository\";\n\nexport default function useLoadMachineTasksQuery(forceRender: number) {\n  // el useQuery reb un array amb el nom de la \"action\" i les variables que si canvien torna a executar\n  return useQuery(\n    [\"loadMachinesHomeTasks\", forceRender],\n    async () => {\n      // TODO: const {data: activeTasks} = await axios.get(/api/tasks/active)\n\n      const activeTasks = getActiveTasks();\n\n      const machine1Tasks = activeTasks.filter(\n        (task) => task.machineId === \"asd5as5d7a8ad8a\"\n      );\n\n      const machine2Tasks = activeTasks.filter(\n        (task) => task.machineId === \"f87gh6fgh87fg89\"\n      );\n\n      return {\n        machine1: machine1Tasks,\n        machine2: machine2Tasks,\n      };\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./redux/store/configureStore\";\nimport { initialState } from \"./redux/store/initialState\";\n\n// pages\nimport EmployeesListPageContainer from \"./pages/EmployeesListPage/EmployeesListPageContainer\";\nimport MachinePageContainer from \"./pages/MachinePage/MachinePageContainer\";\nimport EmployeePageContainer from \"./pages/EmployeePage/EmployeePageContainer\";\nimport FinishedTasksPageContainer from \"./pages/FinishedTasksPage/FinishedTasksPageContainer\";\nimport LoginPage from \"./pages/LoginPage/LoginPage\";\n\n// components\nimport Layout from \"./components/Layout/Layout\";\nimport ProtectedRoute from \"./components/ProtectedRoute/ProtectedRoute\";\nimport MachinesHomePageContainer from \"./pages/MachinesHomePage/MachinesHomePageContainer\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <>\n      <Provider store={configureStore(initialState)}>\n        <QueryClientProvider client={queryClient}>\n          <BrowserRouter>\n            <Switch>\n              <Route path=\"/\" exact>\n                <LoginPage />\n              </Route>\n              <Layout>\n                <ProtectedRoute\n                  path=\"/employees\"\n                  exact\n                  component={EmployeesListPageContainer}\n                />\n                <ProtectedRoute\n                  path=\"/employees/:employeeId\"\n                  component={EmployeePageContainer}\n                />\n                <ProtectedRoute\n                  path=\"/finishedTasks\"\n                  component={FinishedTasksPageContainer}\n                />\n                <ProtectedRoute\n                  path=\"/machines\"\n                  exact\n                  component={MachinesHomePageContainer}\n                />\n                <ProtectedRoute\n                  path=\"/machines/:machineName\"\n                  component={MachinePageContainer}\n                />\n              </Layout>\n            </Switch>\n          </BrowserRouter>\n        </QueryClientProvider>\n      </Provider>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}