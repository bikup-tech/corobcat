{"version":3,"sources":["redux/actions/actionTypes.ts","redux/reducers/index.ts","redux/reducers/authReducer.ts","redux/reducers/mainReducer.ts","redux/store/configureStore.ts","redux/store/initialState.ts","pages/EmployeesListPage/EmployeeCard/EmployeeCard.tsx","pages/EmployeesListPage/components/EmployeesListPage/EmployeesListPage.tsx","pages/EmployeesListPage/EmployeesListPageContainer.tsx","pages/EmployeesListPage/queries/useLoadEmployeesQuery.ts","components/MUITable/EnhancedTableHead/EnhancedTableHead.tsx","pages/MachinePage/components/FinishTaskButton/FinishTaskButton.tsx","utils/populateTasks.ts","mocks/tasksRepository.ts","redux/actions/mainActions.ts","pages/MachinePage/hooks/useFinishTaskDialog.tsx","styles/styleConstants.ts","components/MUITable/SCMuiTable.ts","components/MUITable/setTableRowBackgroundColorByPriority.ts","components/MUITable/EnhancedTasksTable/EnhancedTasksTable.tsx","utils/calculateTotalTime.ts","utils/sortTasksByPriority.ts","routes/routes.ts","StyledComponents/StyledTableHeader.ts","pages/MachinePage/components/MachineInfoHeader/MachineInfoHeader.tsx","pages/MachinePage/MachinePage.tsx","mocks/machineRepository.ts","pages/MachinePage/MachinePageContainer.tsx","pages/MachinePage/queries/useLoadMachineTasksQuery.ts","mocks/userRepository.ts","utils/formatDate.ts","components/TaskStatus/TaskStatus.tsx","components/MUITable/EnhancedEmployeeTable/EnhancedEmployeeTable.tsx","utils/calculateMachineGeneralValues.ts","components/TableHeaderInfoCard/TableHeaderInfoCard.tsx","components/UserInfoHeader/UserInfoHeader.tsx","pages/EmployeePage/EmployeePage.tsx","pages/EmployeePage/EmployeePageContainer.tsx","pages/EmployeePage/queries/useLoadEmployeeTasksQuery.ts","components/MUITable/EnhancedFinishedTasksTable/EnhancedFinishedTasksTable.tsx","pages/FinishedTasksPage/components/FinishedTasksInfoHeader.tsx","pages/FinishedTasksPage/FinishedTasksPage.tsx","pages/FinishedTasksPage/FinishedTasksPageContainer.tsx","pages/FinishedTasksPage/queries/useLoadFinishedTasksQuery.ts","constants/errorMessages.ts","redux/actions/authActions.ts","pages/LoginPage/LoginPage.tsx","components/LeftMenu/LeftMenu.tsx","components/Layout/Layout.tsx","components/ProtectedRoute/ProtectedRoute.tsx","components/MUITable/LiteTasksTable/LiteTasksTable.tsx","pages/MachinesHomePage/SCMachinesHomePage.ts","pages/MachinesHomePage/MachinesHomePage.tsx","pages/MachinesHomePage/MachinesHomePageContainer.tsx","pages/MachinesHomePage/queries/useMachinesHomeQuery.ts","components/FormikComponents/FormikTextField.tsx","utils/getColorByPriority.ts","components/CreateTaskDialog/components/PriorityBadge/PriorityBadge.tsx","components/CreateTaskDialog/CreateTaskDialog.tsx","components/CreateTaskDialog/CreateTaskDialogContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FORCE_RENDER","LOGIN_LOADING","LOGIN_SUCCESS","LOGIN_ERROR","SET_CREATE_TASK_MODAL_ISOPEN","SET_CREATE_TASK_MODAL_SELECTED_MACHINE","combineReducers","authReducer","state","action","newState","type","loginLoading","loginError","payload","errorMessage","user","mainReducer","forceRender","createTaskModal","isOpen","selectedMachine","configureStore","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","thunk","JSON","parse","localStorage","getItem","EmployeeCard","props","employee","Card","className","CardContent","Typography","color","gutterBottom","employerCode","variant","component","name","CardActions","to","_id","StyledEmployeePageContainer","styled","div","StyledLoadingWrapper","EmployeesListPage","employees","isLoading","isError","CircularProgress","map","EmployeesListPageContainer","useQuery","a","data","users","EnhancedTasksTableHead","headCells","TableHead","TableRow","headCell","TableCell","align","padding","label","id","FinishTaskButton","taskId","openFinishedTaskDialog","programNumber","Button","disableElevation","onClick","populateTasks","tasks","task","find","machine","machines","jsonTasks","getTaskByMachineId","machineId","filter","status","getTaskByUserId","userId","setIsCreateTaskModalOpen","setCreateTaskModalSelectedMachine","useFinishTaskDialog","dispatch","useDispatch","useState","isFinishTaskDialogOpen","setIsFinishTaskDialogOpen","finishTaskDialogState","setFinishTaskDialogState","handleFinishTaskDialogClose","FinishTaskDialog","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","taskIndex","findIndex","saveFinishedTask","autoFocus","handleFinishTaskDialogOpen","maxTableHeight","StyledTablePageContainer","StyledTableWrapper","setTableRowBackgroundColorByPriority","priority","bgColor","backgroundColor","EnhancedTaksTable","page","setPage","rowsPerPage","setRowsPerPage","Box","sx","width","TableContainer","Paper","maxHeight","Table","minWidth","size","stickyHeader","TableBody","colSpan","index","border","style","scope","taskNumber","material","thickness","duration","TablePagination","rowsPerPageOptions","count","length","onPageChange","event","newPage","onRowsPerPageChange","parseInt","target","value","calculateTotalTime","reduce","accumulator","current","sortTasksByPriority","sort","b","undefined","ROUTE_MACHINES","StyledTableHeaderWrapper","StyledTableHeaderInfoWrapper","StyledFlexGrow","StyledTableHeaderName","p","StyledTableHeaderInfo","MachineInfoHeader","machineName","activeOrders","timeToFinish","history","useHistory","machineNumber","split","IconButton","push","Number","MachinePage","getMachineByName","MachinePageContainer","useSelector","useParams","console","log","refetchInterval","useLoadMachineTasksQuery","handleTaskClick","getUserById","getUserByCode","userCode","formatDate","date","dayjs","format","StyledTaskStatusContainer","StyledTaskText","span","statusText","statusTextColor","iconColor","statusBgColor","TaskStatus","background","marginRight","EnhnacedEmployeeTasksTable","React","end","start","calculateMachineGeneralValues","machine1Tasks","machine2Tasks","machine1TimeToFinish","machine2TimeToFinish","machine1","activeTasks","machine2","StyledTableHeaderInfoCardContainer","StyledInfoCardSeparator","StyledImportantCell","StyledTotalValue","TableHeaderInfoCard","totalTasks","totalTimeToFinish","Grid","container","item","alignItems","xs","StyledInfoWrapper","UserInfoHeader","tasksData","goBack","EmployeePage","EmployeePageContainer","employeeId","employeeTasks","useLoadEmployeeTasksQuery","EnhancedFinishedTasksTable","FinishedTasksInfoHeader","FinishedTasksPage","FinishedTasksPageContainer","ERROR_MESSAGE_INVALID_CREDENTIALS","LoginPage","valueRef","useRef","warningMessage","setWarningMessage","handleLogInClick","setItem","stringify","response","message","useEffect","replace","elevation","Avatar","TextField","placeholder","fullWidth","required","inputRef","onKeyUp","key","LeftMenu","List","ListItem","disableGutters","ListItemButton","ListItemIcon","ListItemText","primary","disablePadding","pl","Layout","children","ProtectedRoute","path","Compo","exact","rest","render","StyledMachinesHomePageWrapper","StyledMachinesHomePageLoadingWrapper","MachinesHomePage","handleNewTaskClick","MachinesHomePageContainer","useMachinesHomeQuery","StyledFormikTextFieldWrapper","FormikTextField","formikContext","useFormikContext","margin","autofocus","adornment","disabled","onChange","setFieldValue","values","helperText","errors","error","InputProps","endAdornment","InputAdornment","position","getColorByPriority","StyledPriorityBadgeWrapper","StyledPriorityBadge","StyledPriorityText","formatTextByPriority","text","PriorityBadge","StyledCreateTaskDialogWrapper","StyledFlexCenteredWrapper","CreateTaskDialog","handleClose","resetForm","noValidate","textAlign","spacing","CreateTaksDialogContainer","initialValues","correctionalFactor","validationSchema","Yup","integer","min","max","onSubmit","queryClient","QueryClient","App","store","QueryClientProvider","client","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b3d5907.chunk.js","sourcesContent":["export const FORCE_RENDER = \"FORCE_RENDER\";\n// LOGIN\nexport const LOGIN_LOADING = \"LOGIN_LOADING\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_ERROR = \"LOGIN_ERROR\";\n\n// Create task modal\nexport const SET_CREATE_TASK_MODAL_ISOPEN = \"SET_CREATE_TASK_MODAL_ISOPEN\";\nexport const SET_CREATE_TASK_MODAL_SELECTED_MACHINE =\n  \"SET_CREATE_TASK_MODAL_SELECTED_MACHINE\";\n","import { combineReducers } from \"redux\";\nimport mainReducer from \"./mainReducer\";\nimport authReducer from \"./authReducer\";\n\nexport default combineReducers({\n  authReducer,\n  mainReducer,\n});\n","import {\n  LOGIN_ERROR,\n  LOGIN_LOADING,\n  LOGIN_SUCCESS,\n} from \"../actions/actionTypes\";\n\nimport { TAction } from \"../../types/storeActionType\";\nimport { TAuthActions } from \"../actions/authActions\";\n\nexport default function authReducer(state: any = {}, action: TAuthActions) {\n  let newState = {};\n  switch (action.type) {\n    case LOGIN_LOADING:\n      newState = { ...state, loginLoading: true };\n      break;\n    case LOGIN_ERROR:\n      newState = {\n        ...state,\n        loginLoading: false,\n        loginError: action.payload.errorMessage,\n      };\n      break;\n    case LOGIN_SUCCESS:\n      newState = {\n        ...state,\n        loginLoading: false,\n        loginError: null,\n        user: action.payload.user,\n      };\n      break;\n    default:\n      newState = state;\n      break;\n  }\n  return newState;\n}\n","import {\n  FORCE_RENDER,\n  SET_CREATE_TASK_MODAL_ISOPEN,\n  SET_CREATE_TASK_MODAL_SELECTED_MACHINE,\n} from \"../actions/actionTypes\";\n\nimport { TAction } from \"../../types/storeActionType\";\n\nexport default function mainReducer(state: any = {}, action: TAction) {\n  let newState = {};\n  switch (action.type) {\n    case FORCE_RENDER:\n      newState = { ...state, forceRender: ++state.forceRender };\n      break;\n\n    // Create task modal\n    case SET_CREATE_TASK_MODAL_ISOPEN: {\n      newState = {\n        ...state,\n        createTaskModal: { ...state.createTaskModal, isOpen: action.payload },\n      };\n      break;\n    }\n    case SET_CREATE_TASK_MODAL_SELECTED_MACHINE: {\n      newState = {\n        ...state,\n        createTaskModal: {\n          ...state.createTaskModal,\n          selectedMachine: action.payload,\n        },\n      };\n      break;\n    }\n\n    default:\n      newState = state;\n      break;\n  }\n\n  return newState;\n}\n","import { applyMiddleware, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\nimport { TInitialState } from \"./initialState\";\n\nexport default function configureStore(initialState: TInitialState) {\n  const composeEnhancers =\n    (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\n  return createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunk))\n  );\n}\n","import { TUserResponse } from \"../../types/employeeTypes\";\n\nexport type TMainReducer = {\n  forceRender: number;\n  createTaskModal: {\n    isOpen: boolean;\n    selectedMachine: number;\n  };\n};\n\nexport type TAuthReducer = {\n  user: TUserResponse | null;\n  loginLoading?: boolean;\n  loginError?: string;\n};\n\nexport type TInitialState = {\n  mainReducer: TMainReducer;\n  authReducer: TAuthReducer;\n};\n\nexport const initialState: TInitialState = {\n  mainReducer: {\n    forceRender: 0,\n    createTaskModal: {\n      isOpen: false,\n      selectedMachine: 1,\n    },\n  },\n  authReducer: {\n    user: JSON.parse(localStorage.getItem(\"user\") as string) || null,\n  },\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// styles\nimport \"./EmployeeCard.scss\";\n\n// types\nimport { TUserResponse } from \"../../../types/employeeTypes\";\n\n// components\nimport { Card, CardActions, CardContent, Typography } from \"@mui/material\";\n\ninterface IEmployeeCardProps {\n  employee: TUserResponse;\n}\n\nfunction EmployeeCard(props: IEmployeeCardProps) {\n  const { employee } = props;\n  return (\n    <Card key={employee._id} className={`employee__card`}>\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          Cód. empleado: {employee.employerCode}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {employee.name}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Link to={`/employees/${employee._id}`} className=\"employee__link\">\n          Ver Empleado\n        </Link>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default EmployeeCard;\n","import styled from \"styled-components\";\n\nimport \"./EmployeesListPage.scss\";\n\n// types\nimport { TUserResponse } from \"../../../../types/employeeTypes\";\n\n// components\nimport EmployeeCard from \"../../EmployeeCard/EmployeeCard\";\nimport { CircularProgress } from \"@mui/material\";\n\nconst StyledEmployeePageContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n  width: 100%;\n`;\n\nconst StyledLoadingWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n\n  font-size: 1.75rem;\n`;\n\ninterface IEmployeesCardProps {\n  employees: TUserResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n}\n\nfunction EmployeesListPage(props: IEmployeesCardProps) {\n  const { employees, isLoading, isError } = props;\n  return (\n    <>\n      <div className=\"employees-title\">Lista de empleados</div>\n      <StyledEmployeePageContainer className=\"employees-container\">\n        {isLoading ? (\n          <StyledLoadingWrapper>\n            <CircularProgress />\n            Cargando Datos...\n          </StyledLoadingWrapper>\n        ) : isError ? (\n          <></>\n        ) : (\n          employees &&\n          employees.map((employee) => {\n            return <EmployeeCard key={employee._id} employee={employee} />;\n          })\n        )}\n      </StyledEmployeePageContainer>\n    </>\n  );\n}\nexport default EmployeesListPage;\n","// query\nimport useLoadEmployeesQuery from \"./queries/useLoadEmployeesQuery\";\n// components\nimport EmployeesListPage from \"./components/EmployeesListPage/EmployeesListPage\";\n\nfunction EmployeesListPageContainer() {\n  // getEmployers\n  const { isLoading, isError, data } = useLoadEmployeesQuery();\n\n  return (\n    <>\n      <EmployeesListPage employees={data} isLoading={isLoading} isError={isError} />\n    </>\n  );\n}\n\nexport default EmployeesListPageContainer;\n","import { useQuery } from \"react-query\";\nimport users from \"../../../mocks/users.json\";\n\nexport default function useLoadEmployeesQuery() {\n  return useQuery([\"loadEmployers\"], async () => {\n    // TODO const {data} = await axios.get('/api/users')\n    const data = users;\n\n    return data;\n  });\n}\n","import { TableCell, TableHead, TableRow } from \"@mui/material\";\nimport { THeadCell } from \"../MUITableTypes\";\n\ninterface IEnhancedTableHeadProps {\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedTasksTableHead(props: IEnhancedTableHeadProps) {\n  const { headCells } = props;\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell key={headCell.id} align=\"center\" padding=\"normal\">\n            {headCell.label}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n","import { Button } from \"@mui/material\";\n\ninterface IFinishTaskButtonProps {\n  taskId: string;\n  programNumber: string;\n  openFinishedTaskDialog: (programNumber: string) => void;\n}\n\nfunction FinishTaskButton(props: IFinishTaskButtonProps) {\n  const { taskId, programNumber, openFinishedTaskDialog } = props;\n\n  function handleClick() {\n    openFinishedTaskDialog(taskId);\n  }\n\n  return (\n    <>\n      <Button variant=\"contained\" disableElevation onClick={handleClick}>\n        Finalizar\n      </Button>\n    </>\n  );\n}\n\nexport default FinishTaskButton;\n","import { TTaskResponse } from \"../types/taskTypes\";\nimport users from \"../mocks/users.json\";\nimport machines from \"../mocks/machines.json\";\n\nexport default function populateTasks(tasks: TTaskResponse[]) {\n  return tasks.map((task: any) => {\n    const user = users.find((user) => user._id === task.user);\n    const machine = machines.find((machine) => machine._id === task.machine);\n\n    return { ...task, user, machine };\n  });\n}\n","import { TTaskResponse } from \"../types/taskTypes\";\nimport populateTasks from \"../utils/populateTasks\";\nimport jsonTasks from \"./tasks.json\";\n\nconst tasks: TTaskResponse[] = [...jsonTasks];\n\nexport function getTaskByMachineId(machineId: string): TTaskResponse[] {\n  const filteredTasks = tasks.filter(\n    (task: TTaskResponse) => task.machine === machineId && task.status === 0\n  );\n\n  const populatedTasks = populateTasks(filteredTasks);\n\n  return populatedTasks;\n}\n\nexport function getTaskByUserId(userId: string) {\n  const filteredTasks = tasks.filter((task) => task.user === userId);\n  const populatedTasks = populateTasks(filteredTasks);\n\n  return populatedTasks;\n}\n\nexport function getActiveTasks() {\n  const filteredTasks = tasks.filter(\n    (task: TTaskResponse) => task.status === 0\n  );\n  const populatedTasks = populateTasks(filteredTasks);\n\n  return populatedTasks;\n}\n\nexport function getFinishedTasks() {\n  const filteredTasks = tasks.filter(\n    (task: TTaskResponse) => task.status === 1\n  );\n  const populatedTasks = populateTasks(filteredTasks);\n\n  return populatedTasks;\n}\n\nexport function saveFinishedTask(taskId: string) {\n  const taskIndex = tasks.findIndex((task) => task._id === taskId);\n\n  if (taskIndex || taskIndex === 0) {\n    tasks[taskIndex].status = 1;\n  }\n}\n","import {\n  FORCE_RENDER,\n  SET_CREATE_TASK_MODAL_ISOPEN,\n  SET_CREATE_TASK_MODAL_SELECTED_MACHINE,\n} from \"./actionTypes\";\n\nexport function forceRender() {\n  return {\n    type: FORCE_RENDER,\n  };\n}\n\nexport function setIsCreateTaskModalOpen(isOpen: boolean) {\n  return {\n    type: SET_CREATE_TASK_MODAL_ISOPEN,\n    payload: isOpen,\n  };\n}\n\nexport function setCreateTaskModalSelectedMachine(machine: number) {\n  return {\n    type: SET_CREATE_TASK_MODAL_SELECTED_MACHINE,\n    payload: machine,\n  };\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@mui/material\";\n\nimport React, { useState } from \"react\";\nimport { saveFinishedTask } from \"../../../mocks/tasksRepository\";\nimport { useDispatch } from \"react-redux\";\nimport { forceRender } from \"../../../redux/actions/mainActions\";\n\nconst initialState = {\n  taskId: \"\",\n};\n\nexport default function useFinishTaskDialog() {\n  const dispatch = useDispatch();\n\n  const [isFinishTaskDialogOpen, setIsFinishTaskDialogOpen] = useState(false);\n\n  const [finishTaskDialogState, setFinishTaskDialogState] =\n    useState(initialState);\n\n  function handleFinishTaskDialogOpen(taskId: string) {\n    setIsFinishTaskDialogOpen(true);\n    setFinishTaskDialogState({ ...finishTaskDialogState, taskId });\n  }\n\n  function handleFinishTaskDialogClose() {\n    setIsFinishTaskDialogOpen(false);\n  }\n\n  function handleAccept() {\n    saveFinishedTask(finishTaskDialogState.taskId);\n    setIsFinishTaskDialogOpen(false);\n    dispatch(forceRender());\n  }\n\n  const FinishTaskDialog = (\n    <Dialog\n      open={isFinishTaskDialogOpen}\n      onClose={handleFinishTaskDialogClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Confirmación finalizar programa\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n           Estás seguro de que deseas finalizar el programa?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleFinishTaskDialogClose}>Cancelar</Button>\n        <Button onClick={handleAccept} autoFocus variant=\"contained\">\n          Finalizar programa\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n\n  return {\n    FinishTaskDialog,\n    handleFinishTaskDialogOpen,\n    handleFinishTaskDialogClose,\n  };\n}\n","export const maxWidth = 1200;\nexport const maxTableHeight = \"78vh\";\nexport const maxTableHeight_small = \"70vh\";\nexport const darkBackground = \"#303030\";\nexport const darkMenuBackground = \"#212121\";\nexport const darkCardBackground = \"#424242\";\n","import styled from \"styled-components\";\n\nimport { maxWidth } from \"../../styles/styleConstants\";\n\nexport const StyledTablePageContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nexport const StyledTableWrapper = styled.div`\n  width: 100%;\n  max-width: ${maxWidth}px;\n\n  .MuiTableCell-head {\n    color: #002740;\n    font-weight: 700;\n    background-color: #f5f5f5;\n    border-bottom: 2px solid rgba(150, 150, 150, 1);\n    line-height: 1.25;\n    font-size: 1.1rem;\n  }\n\n  .MuiTableCell-body {\n    border-bottom: 1px solid rgba(255, 255, 255, 1);\n    font-weight: 500;\n    font-size: 1.1rem;\n  }\n\n  .MuiTablePagination-root {\n    color: white;\n  }\n\n  .MuiSvgIcon-root {\n    color: white;\n  }\n`;\n\nexport const StyledLoadingWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n\n  font-size: 1.75rem;\n\n  .MuiCircularProgress-root {\n    margin-right: 1rem;\n  }\n`;\n","export function setTableRowBackgroundColorByPriority(priority: number) {\n  let bgColor = \"\";\n  if (priority > 0 && priority <= 2) {\n    bgColor = \"rgba(93, 172, 245, 0.5)\";\n  }\n  if (priority > 2 && priority <= 4) {\n    bgColor = \"rgba(1, 187, 63, 0.5)\";\n  }\n  if (priority > 4 && priority <= 8) {\n    bgColor = \"rgba(255, 163, 15, 0.5)\";\n  }\n  if (priority > 8 && priority <= 10) {\n    bgColor = \"rgba(246, 91, 92, 0.5)\";\n  }\n\n  return {\n    backgroundColor: bgColor,\n  };\n}\n","import {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport FinishTaskButton from \"../../../pages/MachinePage/components/FinishTaskButton/FinishTaskButton\";\nimport useFinishTaskDialog from \"../../../pages/MachinePage/hooks/useFinishTaskDialog\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTablePageContainer,\n  StyledTableWrapper,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\n\ninterface IEnhancedTableProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedTaksTable(props: IEnhancedTableProps) {\n  const { tasks, headCells, isLoading, isError } = props;\n\n  const {\n    FinishTaskDialog,\n    handleFinishTaskDialogOpen,\n    handleFinishTaskDialogClose,\n  } = useFinishTaskDialog();\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table\n              sx={{ minWidth: 750 }}\n              aria-labelledby=\"tableTitle\"\n              size=\"medium\"\n              stickyHeader\n            >\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={999}>\n                      <StyledLoadingWrapper>\n                        <CircularProgress />\n                        Cargando Datos...\n                      </StyledLoadingWrapper>\n                    </TableCell>\n                  </TableRow>\n                ) : isError ? (\n                  <></>\n                ) : (\n                  tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">{task.material}</TableCell>\n                        <TableCell align=\"center\">{task.thickness}</TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.user.employerCode}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <FinishTaskButton\n                            taskId={task._id}\n                            programNumber={task.programNumber}\n                            openFinishedTaskDialog={handleFinishTaskDialogOpen}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {!isLoading && tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n      {FinishTaskDialog}\n    </StyledTablePageContainer>\n  );\n}\n","import { TTaskResponse } from \"../types/taskTypes\";\n\nexport function calculateTotalTime(tasks: TTaskResponse[] | undefined) {\n  if (tasks) {\n    return tasks.reduce(\n      (accumulator, current) => accumulator + current.duration,\n      0\n    );\n  } else {\n    return 0;\n  }\n}\n","import { TTaskResponse } from \"../types/taskTypes\";\n\nexport function sortTasksByPriority(tasks: TTaskResponse[] | undefined) {\n  return tasks ? tasks.sort((a, b) => b.priority - a.priority) : undefined;\n}\n","export const ROUTE_MACHINES = \"/machines\";\n","import styled from \"styled-components\";\nimport { maxWidth } from \"../styles/styleConstants\";\n\nexport const StyledTableHeaderWrapper = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  max-width: ${maxWidth}px;\n  width: 100%;\n  margin: auto;\n  margin-bottom: 0.5rem;\n  background-color: #f5f5f5;\n  border-radius: 0.25rem;\n  padding: 0.5rem;\n  font-weight: 700;\n`;\n\nexport const StyledTableHeaderInfoWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1;\n`;\n\nexport const StyledFlexGrow = styled.div`\n  flex: 1;\n`;\n","import React from \"react\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { Button, IconButton } from \"@mui/material\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport styled from \"styled-components\";\nimport { ROUTE_MACHINES } from \"../../../../routes/routes\";\nimport {\n  StyledFlexGrow,\n  StyledTableHeaderInfoWrapper,\n  StyledTableHeaderWrapper,\n} from \"../../../../StyledComponents/StyledTableHeader\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  setCreateTaskModalSelectedMachine,\n  setIsCreateTaskModalOpen,\n} from \"../../../../redux/actions/mainActions\";\n\nconst StyledTableHeaderName = styled.p`\n  margin-left: 0.5rem;\n  font-size: 1.5rem;\n  justify-self: flex-start;\n`;\n\nconst StyledTableHeaderInfo = styled.p`\n  width: 15rem;\n  margin-left: 2rem;\n`;\n\ninterface IMachineInfoHeaderProps {\n  machineName: string;\n  activeOrders: number;\n  timeToFinish: number;\n}\n\nfunction MachineInfoHeader(props: IMachineInfoHeaderProps) {\n  const { machineName, activeOrders, timeToFinish } = props;\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const machineNumber = machineName.split(\"\")[machineName.length - 1];\n\n  function handleNewTaskClick(machine: number) {\n    dispatch(setCreateTaskModalSelectedMachine(machine));\n    dispatch(setIsCreateTaskModalOpen(true));\n  }\n\n  return (\n    <StyledTableHeaderWrapper className=\"user-data-table-container\">\n      <IconButton\n        onClick={() => history.push(ROUTE_MACHINES)}\n        aria-label=\"goBack\"\n      >\n        <ArrowBackIcon />\n      </IconButton>\n      <StyledTableHeaderInfoWrapper>\n        <StyledTableHeaderName className=\"user-data-table__info--name\">\n          {machineName}\n        </StyledTableHeaderName>\n        <StyledTableHeaderInfo className=\"user-data-table__info\">\n          Programas activos: {activeOrders}\n        </StyledTableHeaderInfo>\n        <StyledTableHeaderInfo className=\"user-data-table__info\">\n          Tiempo restante: {timeToFinish} min\n        </StyledTableHeaderInfo>\n      </StyledTableHeaderInfoWrapper>\n      <StyledFlexGrow />\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={() => {\n          handleNewTaskClick(Number(machineNumber));\n        }}\n      >\n        Nuevo programa\n      </Button>\n    </StyledTableHeaderWrapper>\n  );\n}\n\nexport default MachineInfoHeader;\n","import EnhancedTaksTable from \"../../components/MUITable/EnhancedTasksTable/EnhancedTasksTable\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\nimport { TTaskResponse } from \"../../types/taskTypes\";\nimport { calculateTotalTime } from \"../../utils/calculateTotalTime\";\n\nimport { sortTasksByPriority } from \"../../utils/sortTasksByPriority\";\nimport MachineInfoHeader from \"./components/MachineInfoHeader/MachineInfoHeader\";\n\ninterface IMachinePageProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  machineName: string;\n  handleTaskClick?: (taskId: string) => void;\n}\n\nfunction MachinePage(props: IMachinePageProps) {\n  const { tasks, isLoading, isError, machineName } = props;\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº Tarea\",\n    },\n    {\n      id: \"material\",\n      label: \"Material\",\n    },\n    {\n      id: \"thickness\",\n      label: \"Espesor\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"employerCode\",\n      label: \"Técnico\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n    {\n      id: \"actions\",\n      label: \"Acciones\",\n    },\n  ];\n\n  return (\n    <>\n      <MachineInfoHeader\n        machineName={machineName}\n        activeOrders={tasks?.length || 0}\n        timeToFinish={calculateTotalTime(tasks)}\n      />\n      <EnhancedTaksTable\n        headCells={headCells}\n        tasks={sortTasksByPriority(tasks)}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default MachinePage;\n","import machines from \"./machines.json\";\n\nexport function getMachineByName(machineName: string) {\n  return machines.find((machine) => machine.name === machineName);\n}\n\nexport function getMachines() {\n  return machines;\n}\n","import { useParams } from \"react-router-dom\";\nimport MachinePage from \"./MachinePage\";\nimport useLoadMachineTasksQuery from \"./queries/useLoadMachineTasksQuery\";\nimport { useSelector } from \"react-redux\";\n\ninterface IMachinePageContainerParams {\n  machineName: string;\n}\n\nfunction MachinePageContainer() {\n  const { forceRender } = useSelector((state: any) => state.mainReducer);\n\n  const { machineName } = useParams<IMachinePageContainerParams>();\n\n  const { isLoading, isError, data } = useLoadMachineTasksQuery(\n    machineName,\n    forceRender\n  );\n\n  function handleTaskClick(taskId: string) {\n    console.log(\"hola\");\n  }\n\n  return (\n    <>\n      <MachinePage\n        machineName={machineName}\n        tasks={data}\n        handleTaskClick={handleTaskClick}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default MachinePageContainer;\n","import { useQuery } from \"react-query\";\n\n// Mocks\nimport { getTaskByMachineId } from \"../../../mocks/tasksRepository\";\nimport { getMachineByName } from \"../../../mocks/machineRepository\";\n\nexport default function useLoadMachineTasksQuery(\n  machineName: string,\n  forceRender: number\n) {\n  // el useQuery reb un array amb el nom de la \"action\" i les variables que si canvien torna a executar\n  return useQuery(\n    [\"loadMachineTasks\", machineName, forceRender],\n    async () => {\n      // TODO: const machine = await axios.get('/api/machine/name/${machineName}')\n      const machine = getMachineByName(machineName);\n\n      // TODO: const {data} = await axios.get('/api/tasks/${machineName}')\n      if (machine) {\n        const data = getTaskByMachineId(machine._id);\n\n        console.log(\"data\", data);\n\n        return data;\n      }\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import { TUserResponse } from \"../types/employeeTypes\";\nimport data from \"./users.json\";\nconst users: TUserResponse[] = data;\n\nexport function getUserById(userId: string) {\n  const user = users.find((user) => {\n    return user._id === userId;\n  });\n  return user;\n}\n\nexport function getUserByCode(userCode: string) {\n  const user = users.find((user) => {\n    return user.employerCode === userCode;\n  });\n  return user;\n}\n","import dayjs from \"dayjs\";\n\nexport default function formatDate(date: string | null) {\n  if (!date) {\n    return \"-\";\n  }\n  return dayjs(date).format(\"DD/MM/YY HH:mm\");\n}\n","import { FC } from \"react\";\nimport styled from \"styled-components\";\n\nimport WatchLaterIcon from \"@mui/icons-material/WatchLater\";\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\n\nconst StyledTaskStatusContainer = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.5rem;\n  font-size: 0.9rem;\n  font-weight: 600;\n  width: fit-content;\n`;\n\nconst StyledTaskText = styled.span`\n  line-height: normal;\n`;\n\ninterface ITaskStatusProps {\n  status: number;\n}\n\nconst statusText: any = {\n  0: \"En curso\",\n  1: \"Finalizada\",\n};\n\nconst statusTextColor: any = {\n  0: \"#014361\",\n  1: \"#1e4620\",\n};\n\nconst iconColor: any = {\n  0: \"#03a9f4\",\n  1: \"#4caf50\",\n};\n\nconst statusBgColor: any = {\n  0: \"#E5F5FD\",\n  1: \"#EDF7ED\",\n};\n\nconst TaskStatus: FC<ITaskStatusProps> = ({ status }) => {\n  return (\n    <StyledTaskStatusContainer\n      className=\"TaskStatusContainer\"\n      style={{\n        background: statusBgColor[status],\n        color: statusTextColor[status],\n      }}\n    >\n      {status === 0 ? (\n        <WatchLaterIcon\n          style={{ color: iconColor[status], marginRight: \"0.25rem\" }}\n        />\n      ) : (\n        <CheckCircleIcon\n          style={{ color: iconColor[status], marginRight: \"0.25rem\" }}\n        />\n      )}\n      <StyledTaskText>{statusText[status]}</StyledTaskText>\n    </StyledTaskStatusContainer>\n  );\n};\n\nexport default TaskStatus;\n","import {\n  Box,\n  CircularProgress,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n  Paper,\n} from \"@mui/material\";\nimport React from \"react\";\nimport {\n  maxTableHeight,\n  maxTableHeight_small,\n} from \"../../../styles/styleConstants\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport formatDate from \"../../../utils/formatDate\";\nimport TaskStatus from \"../../TaskStatus/TaskStatus\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTablePageContainer,\n  StyledTableWrapper,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\n\ninterface IEnhnacedEmployeeTasksTableProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  headCells: THeadCell[];\n}\n\nexport default function EnhnacedEmployeeTasksTable(\n  props: IEnhnacedEmployeeTasksTableProps\n) {\n  const { tasks, headCells, isLoading, isError } = props;\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer\n            component={Paper}\n            sx={{ maxHeight: maxTableHeight_small }}\n          >\n            <Table\n              sx={{ minWidth: 750, maxHeight: 250 }}\n              aria-labelledby=\"tableTitle\"\n              size=\"medium\"\n              stickyHeader\n            >\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={999}>\n                      <StyledLoadingWrapper>\n                        <CircularProgress />\n                        Cargando Datos...\n                      </StyledLoadingWrapper>\n                    </TableCell>\n                  </TableRow>\n                ) : isError ? (\n                  <></>\n                ) : (\n                  tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n\n                        <TableCell align=\"center\">\n                          <TaskStatus status={task.status} />\n                        </TableCell>\n                        <TableCell align=\"center\">{task.material}</TableCell>\n                        <TableCell align=\"center\">{task.thickness}</TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.machine.name}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {formatDate(task.end || task.start)}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {!isLoading && tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n    </StyledTablePageContainer>\n  );\n}\n","import { TMachineResponse } from \"../types/machineTypes\";\nimport { TTaskResponse } from \"../types/taskTypes\";\nimport { calculateTotalTime } from \"./calculateTotalTime\";\n\ntype TTasksData = {\n  machine1: {\n    activeTasks: number | undefined;\n    timeToFinish: number;\n  };\n  machine2: {\n    activeTasks: number | undefined;\n\n    timeToFinish: number;\n  };\n};\n\nexport function calculateMachineGeneralValues(\n  tasks: TTaskResponse[] | undefined\n): TTasksData {\n  const machine1Tasks = tasks?.filter(\n    (task) => task.machine.name === \"maquina1\"\n  );\n  const machine2Tasks = tasks?.filter(\n    (task) => task.machine.name === \"maquina2\"\n  );\n\n  const machine1TimeToFinish = calculateTotalTime(machine1Tasks);\n  const machine2TimeToFinish = calculateTotalTime(machine2Tasks);\n\n  return {\n    machine1: {\n      activeTasks: machine1Tasks?.length,\n      timeToFinish: machine1TimeToFinish,\n    },\n    machine2: {\n      activeTasks: machine2Tasks?.length,\n      timeToFinish: machine2TimeToFinish,\n    },\n  };\n}\n","import { Grid } from \"@mui/material\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledTableHeaderInfoCardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background: #d8d8d8;\n  border-radius: 0.5rem;\n  padding: 0.15rem 0;\n\n  .MuiGrid-item {\n    text-align: center;\n    padding: 0.25rem;\n    font-weight: 400;\n  }\n`;\n\nconst StyledInfoCardSeparator = styled.div`\n  width: 95%;\n  height: 1px;\n  margin: auto;\n  background: #8a8a8a;\n`;\n\nconst StyledImportantCell = styled.span`\n  font-weight: 700;\n`;\n\nconst StyledTotalValue = styled.span`\n  color: green;\n  font-weight: 700;\n`;\n\ninterface ITableHeaderInfoCardProps {\n  machine1Tasks: number;\n  machine1TimeToFinish: number;\n  machine2Tasks: number;\n  machine2TimeToFinish: number;\n  totalTasks: number;\n  totalTimeToFinish: number;\n}\n\nfunction TableHeaderInfoCard(props: ITableHeaderInfoCardProps) {\n  const {\n    machine1Tasks,\n    machine1TimeToFinish,\n    machine2Tasks,\n    machine2TimeToFinish,\n    totalTasks,\n    totalTimeToFinish,\n  } = props;\n\n  return (\n    <StyledTableHeaderInfoCardContainer>\n      <Grid container>\n        {/* Inicio fila 1 */}\n        <Grid item alignItems=\"center\" xs={3}></Grid>\n        <Grid item alignItems=\"start\" xs={3}>\n          <StyledImportantCell>Maq.1</StyledImportantCell>\n        </Grid>\n        <Grid item alignItems=\"start\" xs={3}>\n          <StyledImportantCell>Maq.2</StyledImportantCell>\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          <StyledTotalValue>Total</StyledTotalValue>\n        </Grid>\n\n        {/* Inicio fila 2 */}\n        <Grid item alignItems=\"start\" xs={3}>\n          <StyledImportantCell>Prog. Activos</StyledImportantCell>\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          {machine1Tasks}\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          {machine2Tasks}\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          <StyledTotalValue>{totalTasks}</StyledTotalValue>\n        </Grid>\n\n        <StyledInfoCardSeparator />\n\n        {/* Inicio fila 3 */}\n        <Grid item alignItems=\"center\" xs={3}>\n          <StyledImportantCell> T. Restante</StyledImportantCell>\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          {machine1TimeToFinish} min\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          {machine2TimeToFinish} min\n        </Grid>\n        <Grid item alignItems=\"center\" xs={3}>\n          <StyledTotalValue>{totalTimeToFinish} min </StyledTotalValue>\n        </Grid>\n      </Grid>\n    </StyledTableHeaderInfoCardContainer>\n  );\n}\n\nexport default TableHeaderInfoCard;\n","import React from \"react\";\nimport { TUserResponse } from \"../../types/employeeTypes\";\nimport \"./UserInfoHeader.scss\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport IconButton from \"@mui/material/IconButton\";\nimport {\n  StyledTableHeaderInfoWrapper,\n  StyledTableHeaderWrapper,\n} from \"../../StyledComponents/StyledTableHeader\";\nimport { TTaskResponse } from \"../../types/taskTypes\";\nimport { TMachineResponse } from \"../../types/machineTypes\";\nimport { calculateMachineGeneralValues } from \"../../utils/calculateMachineGeneralValues\";\nimport TableHeaderInfoCard from \"../TableHeaderInfoCard/TableHeaderInfoCard\";\nimport { calculateTotalTime } from \"../../utils/calculateTotalTime\";\n\nconst StyledFlexGrow = styled.div`\n  flex: 1;\n`;\n\nconst StyledInfoWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\ninterface IUserInfoHeaderProps {\n  employee: TUserResponse | undefined;\n  tasks: TTaskResponse[] | undefined;\n}\n\nfunction UserInfoHeader(props: IUserInfoHeaderProps) {\n  const { employee, tasks } = props;\n\n  const tasksData = calculateMachineGeneralValues(tasks);\n  const history = useHistory();\n\n  return (\n    <StyledTableHeaderWrapper className=\"user-data-table-container\">\n      <StyledTableHeaderInfoWrapper className=\"user-data-table\">\n        <IconButton onClick={() => history.goBack()} aria-label=\"goBack\">\n          <ArrowBackIcon />\n        </IconButton>\n        <StyledInfoWrapper>\n          <span className=\"user-data-table__info--name\">{employee?.name}</span>\n          <span className=\"user-data-table__info\">\n            Cód. Empleado: {employee?.employerCode}\n          </span>\n        </StyledInfoWrapper>\n        <StyledFlexGrow />\n        <TableHeaderInfoCard\n          machine1Tasks={tasksData.machine1.activeTasks as number}\n          machine1TimeToFinish={tasksData.machine1.timeToFinish as number}\n          machine2Tasks={tasksData.machine2.activeTasks as number}\n          machine2TimeToFinish={tasksData.machine2.timeToFinish as number}\n          totalTasks={tasks?.length as number}\n          totalTimeToFinish={calculateTotalTime(tasks)}\n        />\n      </StyledTableHeaderInfoWrapper>\n    </StyledTableHeaderWrapper>\n  );\n}\n\nexport default UserInfoHeader;\n","import React from \"react\";\n\n// types\nimport { TTaskResponse } from \"../../types/taskTypes\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\nimport { TUserResponse } from \"../../types/employeeTypes\";\n\n// components\nimport EnhancedEmployeeTable from \"../../components/MUITable/EnhancedEmployeeTable/EnhancedEmployeeTable\";\nimport UserInfoHeader from \"../../components/UserInfoHeader/UserInfoHeader\";\nimport { TMachineResponse } from \"../../types/machineTypes\";\n\ninterface IEmployeePage {\n  tasks: TTaskResponse[] | undefined;\n  employee: TUserResponse | undefined;\n  isLoading: boolean;\n  isError: boolean;\n}\n\nfunction EmployeePage(props: IEmployeePage) {\n  const { tasks, isLoading, isError, employee } = props;\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº tarea\",\n    },\n    {\n      id: \"status\",\n      label: \"Estado\",\n    },\n    {\n      id: \"material\",\n      label: \"Material\",\n    },\n    {\n      id: \"thickness\",\n      label: \"Espesor\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"machine\",\n      label: \"Máquina\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n    {\n      id: \"date\",\n      label: \"Fecha\",\n    },\n  ];\n\n  return (\n    <>\n      <UserInfoHeader employee={employee} tasks={tasks} />\n      <EnhancedEmployeeTable\n        headCells={headCells}\n        tasks={tasks}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default EmployeePage;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n// queries\nimport useLoadEmployeeTasksQuery from \"./queries/useLoadEmployeeTasksQuery\";\n\n// components\nimport EmployeePage from \"./EmployeePage\";\n\ninterface IEmployeePageContainerParams {\n  employeeId: string;\n}\n\nfunction EmployeePageContainer() {\n  const { employeeId } = useParams<IEmployeePageContainerParams>();\n\n  const { isLoading, isError, data } = useLoadEmployeeTasksQuery(employeeId);\n\n  return (\n    <>\n      <EmployeePage\n        tasks={data?.employeeTasks}\n        employee={data?.employee}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default EmployeePageContainer;\n","import { useQuery } from \"react-query\";\nimport { getMachines } from \"../../../mocks/machineRepository\";\n\n// mocks\nimport { getTaskByUserId } from \"../../../mocks/tasksRepository\";\nimport { getUserById } from \"../../../mocks/userRepository\";\n\nexport default function useLoadEmployeeTasksQuery(employeeId: string) {\n  return useQuery(\n    [\"loadEmployeeTasks\", employeeId],\n    async () => {\n      // TODO const {data:employee} = await axios.get(\"/api/employee/${employeeId}\")\n      // TODO const {data:employeeTasks} = await axios.get(\"/api/tasks/employee/${employeeId}\")\n      // TODO const {data:machines} = await axios.get(\"/api/machines\")\n      const employee = getUserById(employeeId);\n      const employeeTasks = getTaskByUserId(employeeId);\n      return { employeeTasks, employee };\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport React from \"react\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport formatDate from \"../../../utils/formatDate\";\nimport TaskStatus from \"../../TaskStatus/TaskStatus\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTablePageContainer,\n  StyledTableWrapper,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\n\ninterface IEnhancedTableProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedFinishedTasksTable(props: IEnhancedTableProps) {\n  const { tasks, headCells, isLoading, isError } = props;\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  console.log(tasks);\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table\n              sx={{ minWidth: 750 }}\n              aria-labelledby=\"tableTitle\"\n              size=\"medium\"\n              stickyHeader\n            >\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={999}>\n                      <StyledLoadingWrapper>\n                        <CircularProgress />\n                        Cargando Datos...\n                      </StyledLoadingWrapper>\n                    </TableCell>\n                  </TableRow>\n                ) : isError ? (\n                  <></>\n                ) : (\n                  tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.machine.name}\n                        </TableCell>\n                        <TableCell align=\"center\">{task.material}</TableCell>\n                        <TableCell align=\"center\">{task.thickness}</TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.user.employerCode}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {formatDate(task.end)}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {!isLoading && tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n    </StyledTablePageContainer>\n  );\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport IconButton from \"@mui/material/IconButton\";\n\nimport { ROUTE_MACHINES } from \"../../../routes/routes\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport { calculateMachineGeneralValues } from \"../../../utils/calculateMachineGeneralValues\";\nimport {\n  StyledTableHeaderInfoWrapper,\n  StyledTableHeaderWrapper,\n} from \"../../../StyledComponents/StyledTableHeader\";\nimport TableHeaderInfoCard from \"../../../components/TableHeaderInfoCard/TableHeaderInfoCard\";\nimport { calculateTotalTime } from \"../../../utils/calculateTotalTime\";\n\nconst StyledFlexGrow = styled.div`\n  flex: 1;\n`;\n\nconst StyledTableHeaderName = styled.p`\n  margin-left: 0.5rem;\n  font-size: 1.5rem;\n  justify-self: flex-start;\n`;\n\ninterface IFinishedTasksInfoHeaderProps {\n  tasks: TTaskResponse[] | undefined;\n}\n\nfunction FinishedTasksInfoHeader(props: IFinishedTasksInfoHeaderProps) {\n  const { tasks } = props;\n\n  const tasksData = calculateMachineGeneralValues(tasks);\n  const history = useHistory();\n\n  return (\n    <StyledTableHeaderWrapper className=\"user-data-table-container\">\n      <StyledTableHeaderInfoWrapper className=\"user-data-table\">\n        <IconButton\n          onClick={() => history.push(ROUTE_MACHINES)}\n          aria-label=\"goBack\"\n        >\n          <ArrowBackIcon />\n        </IconButton>\n        <StyledTableHeaderName>Programas finalizados</StyledTableHeaderName>\n        <StyledFlexGrow />\n        <TableHeaderInfoCard\n          machine1Tasks={tasksData.machine1.activeTasks as number}\n          machine1TimeToFinish={tasksData.machine1.timeToFinish as number}\n          machine2Tasks={tasksData.machine2.activeTasks as number}\n          machine2TimeToFinish={tasksData.machine2.timeToFinish as number}\n          totalTasks={tasks?.length as number}\n          totalTimeToFinish={calculateTotalTime(tasks)}\n        />\n      </StyledTableHeaderInfoWrapper>\n    </StyledTableHeaderWrapper>\n  );\n}\n\nexport default FinishedTasksInfoHeader;\n","import EnhancedFinishedTasksTable from \"../../components/MUITable/EnhancedFinishedTasksTable/EnhancedFinishedTasksTable\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\nimport { TTaskResponse } from \"../../types/taskTypes\";\nimport FinishedTasksInfoHeader from \"./components/FinishedTasksInfoHeader\";\n\ninterface IFinishedTasksPageProps {\n  tasks: TTaskResponse[] | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  handleTaskClick?: (taskId: string) => void;\n}\n\nfunction FinishedTasksPage(props: IFinishedTasksPageProps) {\n  const { tasks, isLoading, isError } = props;\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº Tarea\",\n    },\n    {\n      id: \"machine\",\n      label: \"Máquina\",\n    },\n    {\n      id: \"material\",\n      label: \"Material\",\n    },\n    {\n      id: \"thickness\",\n      label: \"Espesor\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"employerCode\",\n      label: \"Técnico\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n    {\n      id: \"date\",\n      label: \"Fecha\",\n    },\n  ];\n\n  return (\n    <>\n      <FinishedTasksInfoHeader tasks={tasks} />\n      <EnhancedFinishedTasksTable\n        headCells={headCells}\n        tasks={tasks}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default FinishedTasksPage;\n","import FinishedTasksPage from \"./FinishedTasksPage\";\nimport useFinisedTasksQuery from \"./queries/useLoadFinishedTasksQuery\";\n\nfunction FinishedTasksPageContainer() {\n  const { isLoading, isError, data } = useFinisedTasksQuery();\n\n  function handleTaskClick(taskId: string) {\n    console.log(\"hola\");\n  }\n\n  return (\n    <>\n      <FinishedTasksPage tasks={data} isLoading={isLoading} isError={isError} />\n    </>\n  );\n}\n\nexport default FinishedTasksPageContainer;\n","import { useQuery } from \"react-query\";\nimport { getMachines } from \"../../../mocks/machineRepository\";\n\nimport { getFinishedTasks } from \"../../../mocks/tasksRepository\";\nimport { TMachineResponse } from \"../../../types/machineTypes\";\n\nfunction getMachineNameById(machines: TMachineResponse[], machineId: string) {\n  const machine = machines.find((machine) => machine._id === machineId);\n\n  return machine ? machine.name : \"\";\n}\n\nexport default function useFinisedTasksQuery() {\n  // el useQuery reb un array amb el nom de la \"action\" i les variables que si canvien torna a executar\n  return useQuery(\n    [\"loadFinishedTasks\"],\n    async () => {\n      // TODO: const {data: tasks} = await axios.get('/api/tasks/finished}')\n      const tasks = getFinishedTasks();\n\n      return tasks;\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","export const ERROR_MESSAGE_INVALID_CREDENTIALS = (userCode: string) =>\n  `No existe un empleado con el código de empleado: ${userCode}.`;\n","import { Dispatch } from \"redux\";\nimport { LOGIN_ERROR, LOGIN_SUCCESS, LOGIN_LOADING } from \"./actionTypes\";\n\n// mocks\nimport { getUserByCode } from \"../../mocks/userRepository\";\nimport { TUserResponse } from \"../../types/employeeTypes\";\nimport { ERROR_MESSAGE_INVALID_CREDENTIALS } from \"../../constants/errorMessages\";\n\ntype TLoginLoadingAction = {\n  type: typeof LOGIN_LOADING;\n};\n\nexport type TAuthActions =\n  | TLoginLoadingAction\n  | {\n      type: typeof LOGIN_SUCCESS;\n      payload: { user: TUserResponse };\n    }\n  | {\n      type: typeof LOGIN_ERROR;\n      payload: { errorMessage: string };\n    };\n\nexport function loginLoading() {\n  return {\n    type: LOGIN_LOADING,\n  };\n}\n\nexport function loginSuccess(user: TUserResponse | undefined) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: { user },\n  };\n}\n\nexport function loginError(errorMessage: string) {\n  return {\n    type: LOGIN_ERROR,\n    payload: { errorMessage },\n  };\n}\n\nexport function login(userCode: string) {\n  return async (dispatch: Dispatch) => {\n    try {\n      dispatch(loginLoading());\n      // TODO: const {data} = await axios.get('/api/user/employerCode/${userCode')\n      const data = await getUserByCode(userCode);\n\n      if (data) {\n        localStorage.setItem(\"user\", JSON.stringify(data));\n        dispatch(loginSuccess(data));\n      } else {\n        dispatch(loginError(ERROR_MESSAGE_INVALID_CREDENTIALS(userCode)));\n      }\n    } catch (error: any) {\n      if (error.response) {\n        dispatch(loginError(error.response.message));\n      } else {\n        dispatch(loginError(error.message));\n      }\n    }\n  };\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\n// actions\nimport { login } from \"../../redux/actions/authActions\";\n\n// styles\nimport styled from \"styled-components\";\nimport \"./LoginPage.scss\";\n\nimport {\n  Grid,\n  Paper,\n  Avatar,\n  TextField,\n  CircularProgress,\n  Button,\n} from \"@mui/material\";\n\nimport LoginIcon from \"@mui/icons-material/Login\";\nimport { TInitialState } from \"../../redux/store/initialState\";\n\nconst StyledLoadingWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n\n  .MuiPaper-root {\n    padding: 3rem 1.25rem;\n    width: 17rem;\n  }\n\n  .MuiGrid-root {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n  .MuiAvatar-root {\n    margin-bottom: 1rem;\n    background-color: #1bbd7e;\n  }\n  .MuiFormControl-root {\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n  }\n  .MuiButton-root {\n    margin-top: 1rem;\n  }\n`;\n\nfunction LoginPage() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const { loginLoading, loginError, user } = useSelector(\n    (state: TInitialState) => state.authReducer\n  );\n\n  const valueRef = useRef<HTMLInputElement>(null);\n  const [warningMessage, setWarningMessage] = useState(\"\");\n\n  useEffect(() => {\n    if (user) {\n      history.replace(\"/machines\");\n    }\n    if (loginError) {\n      setWarningMessage(loginError);\n    }\n  }, [user, loginError]);\n\n  function handleLogInClick() {\n    if (valueRef.current) {\n      dispatch(login(valueRef.current.value));\n    }\n  }\n\n  function handleKeyUp(event: React.KeyboardEvent) {\n    if (event.key === \"Enter\") {\n      handleLogInClick();\n    }\n  }\n\n  return (\n    <StyledLoadingWrapper>\n      <Grid>\n        <Paper elevation={10}>\n          <Grid>\n            <Avatar>\n              <LoginIcon />\n            </Avatar>\n            <h2>Login</h2>\n          </Grid>\n          <TextField\n            label=\"Código de empleado\"\n            placeholder=\"Entra el código de empleado\"\n            variant=\"standard\"\n            fullWidth\n            required\n            inputRef={valueRef}\n            onKeyUp={handleKeyUp}\n          />\n          {loginLoading && <CircularProgress />}\n          <small className=\"form__warningMessage\">{warningMessage}</small>\n\n          <Button variant=\"contained\" fullWidth onClick={handleLogInClick}>\n            login\n          </Button>\n        </Paper>\n      </Grid>\n    </StyledLoadingWrapper>\n  );\n}\n\nexport default LoginPage;\n","import { List, ListItem, ListItemIcon, ListItemText } from \"@mui/material\";\n\nimport AssignmentTurnedInIcon from \"@mui/icons-material/AssignmentTurnedIn\";\nimport PrecisionManufacturingIcon from \"@mui/icons-material/PrecisionManufacturing\";\nimport PeopleIcon from \"@mui/icons-material/People\";\nimport StoreIcon from \"@mui/icons-material/Store\";\nimport { ListItemButton } from \"@mui/material\";\nimport Avatar from \"@mui/material/Avatar\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./LeftMenu.scss\";\n\nfunction LeftMenu() {\n  return (\n    <div className=\"left-menu\">\n      <div className=\"left-menu__header\">\n        <Avatar>CRC</Avatar>\n      </div>\n      <nav>\n        <List>\n          <ListItem disableGutters>\n            <NavLink to=\"/machines\" className=\"left-menu__nav-item\">\n              <ListItemButton>\n                <ListItemIcon>\n                  <StoreIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Maquinas\" />\n              </ListItemButton>\n            </NavLink>\n          </ListItem>\n          <List component=\"div\" disablePadding>\n            <NavLink to=\"/machines/maquina1\" className=\"left-menu__nav-item\">\n              <ListItemButton sx={{ pl: 5 }}>\n                <ListItemIcon>\n                  <PrecisionManufacturingIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Maquina 1\" />\n              </ListItemButton>\n            </NavLink>\n            <NavLink to=\"/machines/maquina2\" className=\"left-menu__nav-item\">\n              <ListItemButton sx={{ pl: 5 }}>\n                <ListItemIcon>\n                  <PrecisionManufacturingIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Maquina 2\" />\n              </ListItemButton>\n            </NavLink>\n          </List>\n\n          <ListItem disableGutters>\n            <NavLink to=\"/employees\" className=\"left-menu__nav-item\">\n              <ListItemButton>\n                <ListItemIcon>\n                  <PeopleIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Lista de técnicos\" />\n              </ListItemButton>\n            </NavLink>\n          </ListItem>\n\n          <ListItem disableGutters>\n            <NavLink to=\"/finishedTasks\" className=\"left-menu__nav-item\">\n              <ListItemButton>\n                <ListItemIcon>\n                  <AssignmentTurnedInIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Programas Terminados\" />\n              </ListItemButton>\n            </NavLink>\n          </ListItem>\n        </List>\n      </nav>\n    </div>\n  );\n}\n\nexport default LeftMenu;\n","import React from \"react\";\nimport LeftMenu from \"../LeftMenu/LeftMenu\";\nimport \"./Layout.scss\";\n\ninterface ILayoutProps {\n  children: React.ReactNode;\n}\n\nfunction Layout(props: ILayoutProps) {\n  const { children } = props;\n\n  return (\n    <div className=\"layout\">\n      <div className=\"layout__menu-container\">\n        <LeftMenu />\n      </div>\n      <div className=\"layout__content\">{children}</div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import { useSelector } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { TInitialState } from \"../../redux/store/initialState\";\n\ninterface IProtectedRouteProps {\n  path: string;\n  component: any;\n  exact?: boolean;\n}\n\nfunction ProtectedRoute(props: IProtectedRouteProps) {\n  const { path, component: Compo, exact, ...rest } = props;\n  const user = useSelector((state: TInitialState) => state.authReducer.user);\n\n  return (\n    <Route\n      path={path}\n      exact={exact}\n      {...rest}\n      render={(props) => (user ? <Compo {...props} /> : <Redirect to=\"/\" />)}\n    />\n  );\n}\n\nexport default ProtectedRoute;\n","import {\n  Box,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { TTaskResponse } from \"../../../types/taskTypes\";\nimport EnhancedTableHead from \"../EnhancedTableHead/EnhancedTableHead\";\nimport { THeadCell } from \"../MUITableTypes\";\n\nimport FinishTaskButton from \"../../../pages/MachinePage/components/FinishTaskButton/FinishTaskButton\";\nimport useFinishTaskDialog from \"../../../pages/MachinePage/hooks/useFinishTaskDialog\";\n\nimport {\n  StyledLoadingWrapper,\n  StyledTableWrapper,\n  StyledTablePageContainer,\n} from \"../SCMuiTable\";\n\nimport { setTableRowBackgroundColorByPriority } from \"../setTableRowBackgroundColorByPriority\";\nimport { maxTableHeight } from \"../../../styles/styleConstants\";\n\ninterface IEnhancedTableProps {\n  tasks: TTaskResponse[] | undefined;\n\n  headCells: THeadCell[];\n}\n\nexport default function EnhancedTaksTable(props: IEnhancedTableProps) {\n  const { tasks, headCells } = props;\n\n  const {\n    FinishTaskDialog,\n    handleFinishTaskDialogOpen,\n    handleFinishTaskDialogClose,\n  } = useFinishTaskDialog();\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <StyledTablePageContainer className=\"EnhancedTaskTable\">\n      <StyledTableWrapper className=\"EnhancedTaskTable__container\">\n        <Box sx={{ width: \"100%\" }}>\n          <TableContainer component={Paper} sx={{ maxHeight: maxTableHeight }}>\n            <Table aria-labelledby=\"tableTitle\" size=\"medium\" stickyHeader>\n              <EnhancedTableHead headCells={headCells} />\n              <TableBody>\n                {tasks &&\n                  tasks.map((task, index) => {\n                    return (\n                      <TableRow\n                        key={task._id}\n                        sx={{\n                          \"&:last-child td, &:last-child th\": { border: 0 },\n                        }}\n                        style={setTableRowBackgroundColorByPriority(\n                          task.priority\n                        )}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          align=\"center\"\n                          width={100}\n                        >\n                          {task.taskNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.programNumber}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {task.duration} min\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <FinishTaskButton\n                            taskId={task._id}\n                            programNumber={task.programNumber}\n                            openFinishedTaskDialog={handleFinishTaskDialogOpen}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {tasks && (\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 75, 100]}\n              component=\"div\"\n              count={tasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          )}\n        </Box>\n      </StyledTableWrapper>\n      {FinishTaskDialog}\n    </StyledTablePageContainer>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const StyledMachinesHomePageWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: flex-start;\n`;\n\nexport const StyledMachinesHomePageLoadingWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding-top: 1.5rem;\n  font-size: 1.5rem;\n  color: white;\n\n  .MuiCircularProgress-root {\n    margin-right: 1rem;\n  }\n`;\n\nexport const StyledTableWrapper = styled.div`\n  width: 49%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const StyledTableHeaderWrapper = styled.div`\n  padding: 1rem 0;\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n\n  .flex-grow {\n    flex: 1;\n  }\n\n  .machines-home-page__machine-title {\n    font-size: 1.75rem;\n    color: white;\n  }\n\n  .machines__header-actions {\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n","import { CircularProgress, Button } from \"@mui/material\";\nimport LiteTasksTable from \"../../components/MUITable/LiteTasksTable/LiteTasksTable\";\nimport { THeadCell } from \"../../components/MUITable/MUITableTypes\";\n\nimport { useDispatch } from \"react-redux\";\nimport { sortTasksByPriority } from \"../../utils/sortTasksByPriority\";\nimport { TMachinesHomeTasks } from \"./MachinesHomePageTypes\";\nimport {\n  StyledMachinesHomePageLoadingWrapper,\n  StyledMachinesHomePageWrapper,\n  StyledTableHeaderWrapper,\n  StyledTableWrapper,\n} from \"./SCMachinesHomePage\";\nimport {\n  setCreateTaskModalSelectedMachine,\n  setIsCreateTaskModalOpen,\n} from \"../../redux/actions/mainActions\";\n\ninterface IMachinePageProps {\n  tasks: TMachinesHomeTasks | undefined;\n  isLoading: boolean;\n  isError: boolean;\n  handleTaskClick?: (taskId: string) => void;\n}\n\nfunction MachinesHomePage(props: IMachinePageProps) {\n  const { tasks, isLoading, isError } = props;\n\n  const dispatch = useDispatch();\n\n  const headCells: THeadCell[] = [\n    {\n      id: \"taskNumber\",\n      label: \"Nº Tarea\",\n    },\n    {\n      id: \"programNumber\",\n      label: \"Nº Programa\",\n    },\n    {\n      id: \"duration\",\n      label: \"Tiempo\",\n    },\n    {\n      id: \"actions\",\n      label: \"Acciones\",\n    },\n  ];\n\n  function handleNewTaskClick(machine: number) {\n    dispatch(setCreateTaskModalSelectedMachine(machine));\n    dispatch(setIsCreateTaskModalOpen(true));\n  }\n\n  return (\n    <>\n      {isLoading && (\n        <StyledMachinesHomePageLoadingWrapper>\n          <CircularProgress />\n          Cargando Datos...\n        </StyledMachinesHomePageLoadingWrapper>\n      )}\n      {tasks && (\n        <StyledMachinesHomePageWrapper>\n          <StyledTableWrapper>\n            <StyledTableHeaderWrapper>\n              <div className=\"flex-grow\" />\n              <h3 className=\"machines-home-page__machine-title\">Máquina 1</h3>\n              <div className=\"flex-grow machines__header-actions\">\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => {\n                    handleNewTaskClick(1);\n                  }}\n                >\n                  Nuevo programa\n                </Button>\n              </div>\n            </StyledTableHeaderWrapper>\n            <LiteTasksTable\n              tasks={sortTasksByPriority(tasks.machine1)}\n              headCells={headCells}\n            />\n          </StyledTableWrapper>\n          <StyledTableWrapper>\n            <StyledTableHeaderWrapper>\n              <div className=\"flex-grow\" />\n              <h3 className=\"machines-home-page__machine-title\">Máquina 2</h3>\n              <div className=\"flex-grow machines__header-actions\">\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => {\n                    handleNewTaskClick(2);\n                  }}\n                >\n                  Nuevo programa\n                </Button>\n              </div>\n            </StyledTableHeaderWrapper>\n            <LiteTasksTable\n              tasks={sortTasksByPriority(tasks.machine2)}\n              headCells={headCells}\n            />\n          </StyledTableWrapper>\n        </StyledMachinesHomePageWrapper>\n      )}\n    </>\n  );\n}\n\nexport default MachinesHomePage;\n","import { useParams } from \"react-router-dom\";\n\nimport { useSelector } from \"react-redux\";\n\nimport MachinesHomePage from \"./MachinesHomePage\";\nimport useMachinesHomeQuery from \"./queries/useMachinesHomeQuery\";\n\nfunction MachinesHomePageContainer() {\n  const { forceRender } = useSelector((state: any) => state.mainReducer);\n\n  const { isLoading, isError, data } = useMachinesHomeQuery(forceRender);\n\n  function handleTaskClick(taskId: string) {\n    console.log(\"hola\");\n  }\n\n  return (\n    <>\n      <MachinesHomePage\n        tasks={data}\n        handleTaskClick={handleTaskClick}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n}\n\nexport default MachinesHomePageContainer;\n","import { useQuery } from \"react-query\";\n\n// Mocks\nimport {\n  getActiveTasks,\n  getTaskByMachineId,\n} from \"../../../mocks/tasksRepository\";\nimport { getMachineByName } from \"../../../mocks/machineRepository\";\n\nexport default function useLoadMachineTasksQuery(forceRender: number) {\n  // el useQuery reb un array amb el nom de la \"action\" i les variables que si canvien torna a executar\n  return useQuery(\n    [\"loadMachinesHomeTasks\", forceRender],\n    async () => {\n      // TODO: const {data: activeTasks} = await axios.get(/api/tasks/active)\n\n      const activeTasks = getActiveTasks();\n\n      const machine1Tasks = activeTasks.filter(\n        (task) => task.machine.name === \"maquina1\"\n      );\n\n      const machine2Tasks = activeTasks.filter(\n        (task) => task.machine.name === \"maquina2\"\n      );\n\n      return {\n        machine1: machine1Tasks,\n        machine2: machine2Tasks,\n      };\n    },\n    {\n      refetchInterval: 60000,\n    }\n  );\n}\n","import { InputAdornment, TextField } from \"@mui/material\";\nimport React from \"react\";\nimport { useFormikContext } from \"formik\";\n\nimport styled from \"styled-components\";\n\nconst StyledFormikTextFieldWrapper = styled.div`\n  input {\n    padding: 0.75rem 0.5rem;\n  }\n`;\n\ninterface IFormikTextFieldProps {\n  name: string;\n  type?: string;\n  label?: string;\n  placeholder?: string;\n  variant?: \"outlined\" | \"filled\" | \"standard\";\n  size?: \"medium\" | \"small\";\n  margin?: \"normal\" | \"dense\";\n  autofocus?: boolean;\n  fullWidth?: boolean;\n  adornment?: string;\n  disabled?: boolean;\n}\n\nfunction FormikTextField(props: IFormikTextFieldProps) {\n  const formikContext = useFormikContext<any>();\n\n  const {\n    name,\n    label,\n    placeholder,\n    variant = \"outlined\",\n    size = \"medium\",\n    type = \"text\",\n    margin = \"dense\",\n    autofocus = false,\n    fullWidth = false,\n    adornment = null,\n    disabled = false,\n  } = props;\n\n  function handleChange({ target }: React.ChangeEvent<HTMLInputElement>) {\n    formikContext.setFieldValue(name, target.value);\n  }\n\n  return (\n    <StyledFormikTextFieldWrapper>\n      <TextField\n        variant={variant}\n        name={name}\n        label={label}\n        type={type}\n        placeholder={placeholder}\n        size={size}\n        onChange={handleChange}\n        value={formikContext.values[name]}\n        autoFocus={autofocus}\n        fullWidth={fullWidth}\n        margin={margin}\n        helperText={formikContext.errors[name]}\n        error={!!formikContext.errors[name]}\n        disabled={disabled}\n        InputProps={{\n          endAdornment: adornment && (\n            <InputAdornment position=\"end\">{adornment}</InputAdornment>\n          ),\n        }}\n      />\n    </StyledFormikTextFieldWrapper>\n  );\n}\n\nexport default FormikTextField;\n","export default function getColorByPriority(priority: number) {\n  let bgColor = \"\";\n  if (priority > 0 && priority <= 2) {\n    bgColor = \"rgba(93, 172, 245, 0.5)\";\n  }\n  if (priority > 2 && priority <= 4) {\n    bgColor = \"rgba(1, 187, 63, 0.5)\";\n  }\n  if (priority > 4 && priority <= 8) {\n    bgColor = \"rgba(255, 163, 15, 0.5)\";\n  }\n  if (priority > 8 && priority <= 10) {\n    bgColor = \"rgba(246, 91, 92, 0.5)\";\n  }\n\n  return bgColor;\n}\n","import styled from \"styled-components\";\nimport getColorByPriority from \"../../../../utils/getColorByPriority\";\n\nconst StyledPriorityBadgeWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst StyledPriorityBadge = styled.div`\n  width: 1.75rem;\n  height: 1.75rem;\n  border-radius: 50%;\n  margin-right: 0.5rem;\n`;\n\nconst StyledPriorityText = styled.span`\n  font-size: 1rem;\n  font-weight: 600;\n`;\n\nfunction formatTextByPriority(priority: number) {\n  let text = \"\";\n\n  if (priority > 0 && priority <= 2) {\n    text = \"Normal\";\n  }\n  if (priority > 2 && priority <= 4) {\n    text = \"Normal\";\n  }\n  if (priority > 4 && priority <= 8) {\n    text = \"Urgencia 48h\";\n  }\n  if (priority > 8 && priority <= 10) {\n    text = \"Urgencia 24h\";\n  }\n\n  return text;\n}\n\ninterface IPriorityBadge {\n  priority: number;\n}\nfunction PriorityBadge(props: IPriorityBadge) {\n  const { priority } = props;\n  return (\n    <StyledPriorityBadgeWrapper>\n      <StyledPriorityBadge\n        style={{\n          background: getColorByPriority(priority),\n        }}\n      />\n      <StyledPriorityText>{formatTextByPriority(priority)}</StyledPriorityText>\n    </StyledPriorityBadgeWrapper>\n  );\n}\n\nexport default PriorityBadge;\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n} from \"@mui/material\";\nimport { Form } from \"formik\";\nimport styled from \"styled-components\";\nimport FormikTextField from \"../FormikComponents/FormikTextField\";\nimport PriorityBadge from \"./components/PriorityBadge/PriorityBadge\";\n\nimport { useFormikContext } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { TInitialState } from \"../../redux/store/initialState\";\nimport { useEffect } from \"react\";\n\nconst StyledCreateTaskDialogWrapper = styled(Dialog)`\n  .MuiPaper-root {\n    max-width: 26rem;\n  }\n`;\n\nconst StyledFlexCenteredWrapper = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\ninterface ICreateTaskDialogProps {\n  isOpen: boolean;\n  handleClose: () => void;\n}\n\nfunction CreateTaskDialog(props: ICreateTaskDialogProps) {\n  const { isOpen, handleClose } = props;\n\n  const formikContext = useFormikContext<any>();\n\n  const { selectedMachine } = useSelector(\n    (state: TInitialState) => state.mainReducer.createTaskModal\n  );\n\n  useEffect(() => {\n    formikContext.values.selectedMachine = selectedMachine;\n  }, [selectedMachine]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      formikContext.resetForm();\n    }\n  }, [isOpen]);\n\n  return (\n    <StyledCreateTaskDialogWrapper open={isOpen} onClose={handleClose}>\n      <Form noValidate>\n        <DialogTitle sx={{ textAlign: \"center\" }}>Nuevo programa</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <FormikTextField\n                name=\"employee\"\n                label=\"Código de empleado\"\n                autofocus\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormikTextField\n                name=\"programNumber\"\n                label=\"Nº Programa\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField name=\"material\" label=\"Material\" fullWidth />\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField\n                name=\"thickness\"\n                label=\"Espesor (mm)\"\n                type=\"number\"\n                adornment=\"mm\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField\n                name=\"priority\"\n                label=\"Prioridad\"\n                type=\"number\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <StyledFlexCenteredWrapper>\n                <PriorityBadge priority={formikContext.values.priority} />\n              </StyledFlexCenteredWrapper>\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField\n                name=\"duration\"\n                label=\"Tiempo\"\n                type=\"number\"\n                adornment=\"min\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormikTextField\n                name=\"correctionalFactor\"\n                label=\"Factor corrector\"\n                fullWidth\n                disabled\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormikTextField\n                name=\"selectedMachine\"\n                label=\"Máquina\"\n                fullWidth\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} variant=\"outlined\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" variant=\"contained\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Form>\n    </StyledCreateTaskDialogWrapper>\n  );\n}\n\nexport default CreateTaskDialog;\n","import { useSelector, useDispatch } from \"react-redux\";\n\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { TInitialState } from \"../../redux/store/initialState\";\nimport { setIsCreateTaskModalOpen } from \"../../redux/actions/mainActions\";\nimport CreateTaskDialog from \"./CreateTaskDialog\";\n\nfunction CreateTaksDialogContainer() {\n  const dispatch = useDispatch();\n\n  const { isOpen, selectedMachine } = useSelector(\n    (state: TInitialState) => state.mainReducer.createTaskModal\n  );\n\n  function handleClose() {\n    dispatch(setIsCreateTaskModalOpen(false));\n  }\n\n  const initialValues = {\n    employee: \"\",\n    material: \"\",\n    thickness: 0,\n    programNumber: \"\",\n    priority: 1,\n    duration: 0,\n    correctionalFactor: 10,\n    selectedMachine: selectedMachine || 1,\n  };\n\n  const validationSchema = Yup.object({\n    employee: Yup.string().required(\"El código de empleado es obligatorio.\"),\n    material: Yup.string().required(\"El material es obligatorio.\"),\n    programNumber: Yup.string().required(\n      \"El número de programa es obligatorio.\"\n    ),\n    thickness: Yup.number()\n      .integer(\"No puede contener decimales.\")\n      .min(0, \"No puede ser negativo.\")\n      .required(\"El espesor es obligatorio.\"),\n    priority: Yup.number()\n      .min(1, \"El valor mínimo es 1.\")\n      .max(10, \"El valor máximo es 10.\")\n      .required(\"La prioridad es obligatoria.\"),\n    duration: Yup.number()\n      .integer(\"No puede contener decimales.\")\n      .required(\"La duración es obligatoria.\"),\n    selectedMachine: Yup.number().required(\"La máquina es obligatoria.\"),\n  });\n\n  function handleCreateTaskFormSubmit(values: TCreateTaskDialogFormValues) {\n    console.log(values);\n    handleClose();\n  }\n\n  type TCreateTaskDialogFormValues = typeof initialValues;\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleCreateTaskFormSubmit}\n      validationSchema={validationSchema}\n    >\n      <CreateTaskDialog isOpen={isOpen} handleClose={handleClose} />\n    </Formik>\n  );\n}\n\nexport default CreateTaksDialogContainer;\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./redux/store/configureStore\";\nimport { initialState } from \"./redux/store/initialState\";\n\n// pages\nimport EmployeesListPageContainer from \"./pages/EmployeesListPage/EmployeesListPageContainer\";\nimport MachinePageContainer from \"./pages/MachinePage/MachinePageContainer\";\nimport EmployeePageContainer from \"./pages/EmployeePage/EmployeePageContainer\";\nimport FinishedTasksPageContainer from \"./pages/FinishedTasksPage/FinishedTasksPageContainer\";\nimport LoginPage from \"./pages/LoginPage/LoginPage\";\n\n// components\nimport Layout from \"./components/Layout/Layout\";\nimport ProtectedRoute from \"./components/ProtectedRoute/ProtectedRoute\";\nimport MachinesHomePageContainer from \"./pages/MachinesHomePage/MachinesHomePageContainer\";\nimport CreateTaskDialog from \"./components/CreateTaskDialog/CreateTaskDialogContainer\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <>\n      <Provider store={configureStore(initialState)}>\n        <QueryClientProvider client={queryClient}>\n          <BrowserRouter basename=\"/corobcat\">\n            <Switch>\n              <Route path=\"/\" exact>\n                <LoginPage />\n              </Route>\n              <Layout>\n                <ProtectedRoute\n                  path=\"/employees\"\n                  exact\n                  component={EmployeesListPageContainer}\n                />\n                <ProtectedRoute\n                  path=\"/employees/:employeeId\"\n                  component={EmployeePageContainer}\n                />\n                <ProtectedRoute\n                  path=\"/finishedTasks\"\n                  component={FinishedTasksPageContainer}\n                />\n                <ProtectedRoute\n                  path=\"/machines\"\n                  exact\n                  component={MachinesHomePageContainer}\n                />\n                <ProtectedRoute\n                  path=\"/machines/:machineName\"\n                  component={MachinePageContainer}\n                />\n              </Layout>\n            </Switch>\n          </BrowserRouter>\n\n          <CreateTaskDialog />\n        </QueryClientProvider>\n      </Provider>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}